[default language_features=V_1_4_SQL_GRAPH]
[default no_test_extract_table_names]
[default show_unparsed]
[default also_show_signature_mismatch_details]

[no_run_unparser]
# Disable unparser because SQLBuilder will build explicit casting which is not
# syntactically allowed.
# SAME over GraphElementTypes with different property types (e.g. `a` and `b`
# are node types with different properties) will cast them into common
# supertype.
select * from graph_table(
  aml
  match (a IS Person) -[e]-> (b IS Account)
  columns(SAME(a, b, a, b) as same_node_a_b,
          SAME(a, a, a) AS same_node_a,
          SAME(e, e) as same_edge)
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.same_node_a_b#4 AS same_node_a_b [BOOL]
| +-$graph_table.same_node_a#5 AS same_node_a [BOOL]
| +-$graph_table.same_edge#6 AS same_edge [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[same_node_a_b#4, same_node_a#5, same_edge#6]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[same_node_a_b#4, same_node_a#5, same_edge#6]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[a#1, e#2, b#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[a#1, e#2, b#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.a#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Person)
        |       | | +-target_element_table_list=[sample_catalog.aml.Person]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.e#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.b#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabel(label=sample_catalog.aml.Account)
        |       |   +-target_element_table_list=[sample_catalog.aml.Account]
        |       +-head=$element_table.a#1
        |       +-tail=$element_table.b#3
        +-shape_expr_list=
          +-same_node_a_b#4 :=
          | +-FunctionCall(ZetaSQL:same(repeated(4) GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>) -> BOOL)
          |   +-Cast(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>)
          |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#1)
          |   +-Cast(GRAPH_NODE(aml)<balance UINT64, id INT64> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>)
          |   | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.b#3)
          |   +-Cast(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>)
          |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#1)
          |   +-Cast(GRAPH_NODE(aml)<balance UINT64, id INT64> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>)
          |     +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.b#3)
          +-same_node_a#5 :=
          | +-FunctionCall(ZetaSQL:same(repeated(3) GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>) -> BOOL)
          |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#1)
          |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#1)
          |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#1)
          +-same_edge#6 :=
            +-FunctionCall(ZetaSQL:same(repeated(2) GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> BOOL)
              +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#2)
              +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#2)
==

select * from graph_table(
  aml
  match (a IS Person) -[e]-> (b IS Account)
  columns(SAME(a, e) as same)
)

--
ERROR: No matching signature for function SAME for argument types: GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>. Supported signature: SAME([GRAPH_ELEMENT, ...]) [at 4:11]
  columns(SAME(a, e) as same)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for function SAME
  Argument types: GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>
  Signature: SAME([GRAPH_ELEMENT, ...])
    Unable to find common supertype for templated argument <graph_element>
      Input types for <graph_element>: {GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>, GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>} [at 4:11]
  columns(SAME(a, e) as same)
          ^
==

select * from graph_table(
  aml
  match (a IS Person)
  columns(SAME() AS same)
)

--
ERROR: Function SAME() requires at least 2 arguments [at 4:11]
  columns(SAME() AS same)
          ^
==

select * from graph_table(
  aml
  match (a IS Person)
  columns(SAME(a) AS same)
)

--
ERROR: Function SAME() requires at least 2 arguments [at 4:11]
  columns(SAME(a) AS same)
          ^
==

select * from graph_table(
  aml
  match (IS Person)
  columns(SAME(1, 2) AS same)
)

--
ERROR: No matching signature for function SAME for argument types: INT64, INT64. Supported signature: SAME([GRAPH_ELEMENT, ...]) [at 4:11]
  columns(SAME(1, 2) AS same)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for function SAME
  Argument types: INT64, INT64
  Signature: SAME([GRAPH_ELEMENT, ...])
    Argument 1: expected GRAPH_ELEMENT, found INT64 [at 4:11]
  columns(SAME(1, 2) AS same)
          ^
==

select * from graph_table(
  aml
  match (n IS Person)
  columns(SAME(n, n.name) AS same)
)

--
ERROR: No matching signature for function SAME for argument types: GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>, STRING. Supported signature: SAME([GRAPH_ELEMENT, ...]) [at 4:11]
  columns(SAME(n, n.name) AS same)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for function SAME
  Argument types: GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>, STRING
  Signature: SAME([GRAPH_ELEMENT, ...])
    Argument 2: expected GRAPH_ELEMENT, found STRING [at 4:11]
  columns(SAME(n, n.name) AS same)
          ^
==

# <source/destination predicate>
select * from graph_table(
  aml
  match (a IS Person) -[b]-> (c IS Account)
  columns((a IS SOURCE OF b) AS val0,
          (a IS SOURCE b) AS val1,
          (a IS NOT SOURCE OF b) AS val2,
          (a IS NOT SOURCE b) AS val3,
          (a IS DESTINATION OF b) AS val4,
          (a IS DESTINATION b) AS val5,
          (a IS NOT DESTINATION OF b) AS val6,
          (a IS NOT DESTINATION b) AS val7)
)

--
QueryStmt
+-output_column_list=
| +-$graph_table.val0#4 AS val0 [BOOL]
| +-$graph_table.val1#5 AS val1 [BOOL]
| +-$graph_table.val2#6 AS val2 [BOOL]
| +-$graph_table.val3#7 AS val3 [BOOL]
| +-$graph_table.val4#8 AS val4 [BOOL]
| +-$graph_table.val5#9 AS val5 [BOOL]
| +-$graph_table.val6#10 AS val6 [BOOL]
| +-$graph_table.val7#11 AS val7 [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[val0#4, val1#5, val2#6, val3#7, val4#8, val5#9, val6#10, val7#11]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[val0#4, val1#5, val2#6, val3#7, val4#8, val5#9, val6#10, val7#11]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[a#1, b#2, c#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[a#1, b#2, c#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.a#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Person)
        |       | | +-target_element_table_list=[sample_catalog.aml.Person]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.b#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.c#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabel(label=sample_catalog.aml.Account)
        |       |   +-target_element_table_list=[sample_catalog.aml.Account]
        |       +-head=$element_table.a#1
        |       +-tail=$element_table.c#3
        +-shape_expr_list=
          +-val0#4 :=
          | +-FunctionCall(ZetaSQL:$is_source_node(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> BOOL)
          |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#1)
          |   +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.b#2)
          +-val1#5 :=
          | +-FunctionCall(ZetaSQL:$is_source_node(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> BOOL)
          |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#1)
          |   +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.b#2)
          +-val2#6 :=
          | +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
          |   +-FunctionCall(ZetaSQL:$is_source_node(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> BOOL)
          |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#1)
          |     +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.b#2)
          +-val3#7 :=
          | +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
          |   +-FunctionCall(ZetaSQL:$is_source_node(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> BOOL)
          |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#1)
          |     +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.b#2)
          +-val4#8 :=
          | +-FunctionCall(ZetaSQL:$is_dest_node(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> BOOL)
          |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#1)
          |   +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.b#2)
          +-val5#9 :=
          | +-FunctionCall(ZetaSQL:$is_dest_node(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> BOOL)
          |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#1)
          |   +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.b#2)
          +-val6#10 :=
          | +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
          |   +-FunctionCall(ZetaSQL:$is_dest_node(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> BOOL)
          |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#1)
          |     +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.b#2)
          +-val7#11 :=
            +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
              +-FunctionCall(ZetaSQL:$is_dest_node(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> BOOL)
                +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#1)
                +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.b#2)

[UNPARSED_SQL]
SELECT
  aml_1.a_5 AS val0,
  aml_1.a_6 AS val1,
  aml_1.a_7 AS val2,
  aml_1.a_8 AS val3,
  aml_1.a_9 AS val4,
  aml_1.a_10 AS val5,
  aml_1.a_11 AS val6,
  aml_1.a_12 AS val7
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS Account)
    COLUMNS(
      a_2 IS SOURCE OF a_3 AS a_5,
      a_2 IS SOURCE OF a_3 AS a_6,
      NOT(a_2 IS SOURCE OF a_3) AS a_7,
      NOT(a_2 IS SOURCE OF a_3) AS a_8,
      a_2 IS DESTINATION OF a_3 AS a_9,
      a_2 IS DESTINATION OF a_3 AS a_10,
      NOT(a_2 IS DESTINATION OF a_3) AS a_11,
      NOT(a_2 IS DESTINATION OF a_3) AS a_12
    )
  ) AS aml_1;
==

# <source/destination predicate> first argument must be node.
select * from graph_table(
  aml
  match (a IS Person) -[b]-> (c IS Account)
  columns({{1|b}} IS {{|NOT}} {{SOURCE|DESTINATION}} OF b AS b_is_source_of_b)
)

--
ALTERNATION GROUP: 1,,SOURCE
--
ERROR: No matching signature for operator IS SOURCE OF for argument types: INT64, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>. Supported signature: GRAPH_NODE IS SOURCE OF GRAPH_EDGE [at 4:11]
  columns(1 IS  SOURCE OF b AS b_is_source_of_b)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for operator IS SOURCE OF
  Argument types: INT64, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>
  Signature: GRAPH_NODE IS SOURCE OF GRAPH_EDGE
    Argument 1: expected GRAPH_NODE, found INT64 [at 4:11]
  columns(1 IS  SOURCE OF b AS b_is_source_of_b)
          ^
--
ALTERNATION GROUP: 1,,DESTINATION
--
ERROR: No matching signature for operator IS DESTINATION OF for argument types: INT64, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>. Supported signature: GRAPH_NODE IS DESTINATION OF GRAPH_EDGE [at 4:11]
  columns(1 IS  DESTINATION OF b AS b_is_source_of_b)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for operator IS DESTINATION OF
  Argument types: INT64, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>
  Signature: GRAPH_NODE IS DESTINATION OF GRAPH_EDGE
    Argument 1: expected GRAPH_NODE, found INT64 [at 4:11]
  columns(1 IS  DESTINATION OF b AS b_is_source_of_b)
          ^
--
ALTERNATION GROUP: 1,NOT,SOURCE
--
ERROR: No matching signature for operator IS SOURCE OF for argument types: INT64, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>. Supported signature: GRAPH_NODE IS SOURCE OF GRAPH_EDGE [at 4:11]
  columns(1 IS NOT SOURCE OF b AS b_is_source_of_b)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for operator IS SOURCE OF
  Argument types: INT64, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>
  Signature: GRAPH_NODE IS SOURCE OF GRAPH_EDGE
    Argument 1: expected GRAPH_NODE, found INT64 [at 4:11]
  columns(1 IS NOT SOURCE OF b AS b_is_source_of_b)
          ^
--
ALTERNATION GROUP: 1,NOT,DESTINATION
--
ERROR: No matching signature for operator IS DESTINATION OF for argument types: INT64, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>. Supported signature: GRAPH_NODE IS DESTINATION OF GRAPH_EDGE [at 4:11]
  columns(1 IS NOT DESTINATION OF b AS b_is_source_of_b)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for operator IS DESTINATION OF
  Argument types: INT64, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>
  Signature: GRAPH_NODE IS DESTINATION OF GRAPH_EDGE
    Argument 1: expected GRAPH_NODE, found INT64 [at 4:11]
  columns(1 IS NOT DESTINATION OF b AS b_is_source_of_b)
          ^
--
ALTERNATION GROUP: b,,SOURCE
--
ERROR: No matching signature for operator IS SOURCE OF for argument types: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>. Supported signature: GRAPH_NODE IS SOURCE OF GRAPH_EDGE [at 4:11]
  columns(b IS  SOURCE OF b AS b_is_source_of_b)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for operator IS SOURCE OF
  Argument types: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>
  Signature: GRAPH_NODE IS SOURCE OF GRAPH_EDGE
    Argument 1: expected GRAPH_NODE, found GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...> [at 4:11]
  columns(b IS  SOURCE OF b AS b_is_source_of_b)
          ^
--
ALTERNATION GROUP: b,,DESTINATION
--
ERROR: No matching signature for operator IS DESTINATION OF for argument types: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>. Supported signature: GRAPH_NODE IS DESTINATION OF GRAPH_EDGE [at 4:11]
  columns(b IS  DESTINATION OF b AS b_is_source_of_b)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for operator IS DESTINATION OF
  Argument types: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>
  Signature: GRAPH_NODE IS DESTINATION OF GRAPH_EDGE
    Argument 1: expected GRAPH_NODE, found GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...> [at 4:11]
  columns(b IS  DESTINATION OF b AS b_is_source_of_b)
          ^
--
ALTERNATION GROUP: b,NOT,SOURCE
--
ERROR: No matching signature for operator IS SOURCE OF for argument types: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>. Supported signature: GRAPH_NODE IS SOURCE OF GRAPH_EDGE [at 4:11]
  columns(b IS NOT SOURCE OF b AS b_is_source_of_b)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for operator IS SOURCE OF
  Argument types: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>
  Signature: GRAPH_NODE IS SOURCE OF GRAPH_EDGE
    Argument 1: expected GRAPH_NODE, found GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...> [at 4:11]
  columns(b IS NOT SOURCE OF b AS b_is_source_of_b)
          ^
--
ALTERNATION GROUP: b,NOT,DESTINATION
--
ERROR: No matching signature for operator IS DESTINATION OF for argument types: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>. Supported signature: GRAPH_NODE IS DESTINATION OF GRAPH_EDGE [at 4:11]
  columns(b IS NOT DESTINATION OF b AS b_is_source_of_b)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for operator IS DESTINATION OF
  Argument types: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>
  Signature: GRAPH_NODE IS DESTINATION OF GRAPH_EDGE
    Argument 1: expected GRAPH_NODE, found GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...> [at 4:11]
  columns(b IS NOT DESTINATION OF b AS b_is_source_of_b)
          ^
==

# <source/destination predicate> second argument must be edge.
select * from graph_table(
  aml
  match (a IS Person) -[b]-> (c IS Account)
  columns(a IS {{|NOT}} {{SOURCE|DESTINATION}} OF {{1|a}} AS a_is_source_of_a)
)

--
ALTERNATION GROUP: SOURCE,1
--
ERROR: No matching signature for operator IS SOURCE OF for argument types: GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>, INT64. Supported signature: GRAPH_NODE IS SOURCE OF GRAPH_EDGE [at 4:11]
  columns(a IS  SOURCE OF 1 AS a_is_source_of_a)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for operator IS SOURCE OF
  Argument types: GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>, INT64
  Signature: GRAPH_NODE IS SOURCE OF GRAPH_EDGE
    Argument 2: expected GRAPH_EDGE, found INT64 [at 4:11]
  columns(a IS  SOURCE OF 1 AS a_is_source_of_a)
          ^
--
ALTERNATION GROUP: SOURCE,a
--
ERROR: No matching signature for operator IS SOURCE OF for argument types: GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>, GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>. Supported signature: GRAPH_NODE IS SOURCE OF GRAPH_EDGE [at 4:11]
  columns(a IS  SOURCE OF a AS a_is_source_of_a)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for operator IS SOURCE OF
  Argument types: GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>, GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>
  Signature: GRAPH_NODE IS SOURCE OF GRAPH_EDGE
    Argument 2: expected GRAPH_EDGE, found GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...> [at 4:11]
  columns(a IS  SOURCE OF a AS a_is_source_of_a)
          ^
--
ALTERNATION GROUP: DESTINATION,1
--
ERROR: No matching signature for operator IS DESTINATION OF for argument types: GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>, INT64. Supported signature: GRAPH_NODE IS DESTINATION OF GRAPH_EDGE [at 4:11]
  columns(a IS  DESTINATION OF 1 AS a_is_source_of_a)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for operator IS DESTINATION OF
  Argument types: GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>, INT64
  Signature: GRAPH_NODE IS DESTINATION OF GRAPH_EDGE
    Argument 2: expected GRAPH_EDGE, found INT64 [at 4:11]
  columns(a IS  DESTINATION OF 1 AS a_is_source_of_a)
          ^
--
ALTERNATION GROUP: DESTINATION,a
--
ERROR: No matching signature for operator IS DESTINATION OF for argument types: GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>, GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>. Supported signature: GRAPH_NODE IS DESTINATION OF GRAPH_EDGE [at 4:11]
  columns(a IS  DESTINATION OF a AS a_is_source_of_a)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for operator IS DESTINATION OF
  Argument types: GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>, GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>
  Signature: GRAPH_NODE IS DESTINATION OF GRAPH_EDGE
    Argument 2: expected GRAPH_EDGE, found GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...> [at 4:11]
  columns(a IS  DESTINATION OF a AS a_is_source_of_a)
          ^
--
ALTERNATION GROUP: NOT,SOURCE,1
--
ERROR: No matching signature for operator IS SOURCE OF for argument types: GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>, INT64. Supported signature: GRAPH_NODE IS SOURCE OF GRAPH_EDGE [at 4:11]
  columns(a IS NOT SOURCE OF 1 AS a_is_source_of_a)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for operator IS SOURCE OF
  Argument types: GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>, INT64
  Signature: GRAPH_NODE IS SOURCE OF GRAPH_EDGE
    Argument 2: expected GRAPH_EDGE, found INT64 [at 4:11]
  columns(a IS NOT SOURCE OF 1 AS a_is_source_of_a)
          ^
--
ALTERNATION GROUP: NOT,SOURCE,a

--
ERROR: No matching signature for operator IS SOURCE OF for argument types: GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>, GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>. Supported signature: GRAPH_NODE IS SOURCE OF GRAPH_EDGE [at 4:11]
  columns(a IS NOT SOURCE OF a AS a_is_source_of_a)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for operator IS SOURCE OF
  Argument types: GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>, GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>
  Signature: GRAPH_NODE IS SOURCE OF GRAPH_EDGE
    Argument 2: expected GRAPH_EDGE, found GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...> [at 4:11]
  columns(a IS NOT SOURCE OF a AS a_is_source_of_a)
          ^
--
ALTERNATION GROUP: NOT,DESTINATION,1
--
ERROR: No matching signature for operator IS DESTINATION OF for argument types: GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>, INT64. Supported signature: GRAPH_NODE IS DESTINATION OF GRAPH_EDGE [at 4:11]
  columns(a IS NOT DESTINATION OF 1 AS a_is_source_of_a)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for operator IS DESTINATION OF
  Argument types: GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>, INT64
  Signature: GRAPH_NODE IS DESTINATION OF GRAPH_EDGE
    Argument 2: expected GRAPH_EDGE, found INT64 [at 4:11]
  columns(a IS NOT DESTINATION OF 1 AS a_is_source_of_a)
          ^
--
ALTERNATION GROUP: NOT,DESTINATION,a
--
ERROR: No matching signature for operator IS DESTINATION OF for argument types: GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>, GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>. Supported signature: GRAPH_NODE IS DESTINATION OF GRAPH_EDGE [at 4:11]
  columns(a IS NOT DESTINATION OF a AS a_is_source_of_a)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for operator IS DESTINATION OF
  Argument types: GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>, GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>
  Signature: GRAPH_NODE IS DESTINATION OF GRAPH_EDGE
    Argument 2: expected GRAPH_EDGE, found GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...> [at 4:11]
  columns(a IS NOT DESTINATION OF a AS a_is_source_of_a)
          ^
==

select * from graph_table(
  aml
  match (n IS Person | Account Where PROPERTY_EXISTS(n, 'birthday'))
  columns(1 as v)
)

--
ERROR: Second argument of PROPERTY_EXISTS must be identifier of the property [at 3:57]
  match (n IS Person | Account Where PROPERTY_EXISTS(n, 'birthday'))
                                                        ^

==

select * from graph_table(
  aml
  match (n IS Person | Account Where PROPERTY_EXISTS(n))
  columns(1 as v)
)

--
ERROR: PROPERTY_EXISTS should have exactlty two arguments [at 3:38]
  match (n IS Person | Account Where PROPERTY_EXISTS(n))
                                     ^
==

select * from graph_table(
  aml
  match (n IS Person | Account Where PROPERTY_EXISTS(1, birthday))
  columns(1 as v)
)

--
ERROR: First argument of PROPERTY_EXISTS must be GRAPH_ELEMENT [at 3:54]
  match (n IS Person | Account Where PROPERTY_EXISTS(1, birthday))
                                                     ^
==

select * from graph_table(
  aml
  match (n IS Person | Account Where PROPERTY_EXISTS(n, unknown))
  columns(1 as v)
)

--

ERROR: Property unknown is not defined in PropertyGraph sample_catalog.aml [at 3:57]
  match (n IS Person | Account Where PROPERTY_EXISTS(n, unknown))
                                                        ^

==

[language_features=V_1_4_SQL_GRAPH,V_1_3_INLINE_LAMBDA_ARGUMENT]

select * from graph_table(
  aml
  match (n IS Person | Account Where PROPERTY_EXISTS(()->NULL, 'birthday'))
  columns(1 as v)
)
--
ERROR: First argument of PROPERTY_EXISTS must be GRAPH_ELEMENT [at 3:54]
  match (n IS Person | Account Where PROPERTY_EXISTS(()->NULL, 'birthday'))
                                                     ^
==

select has_id from graph_table(
  aml
  match (n IS Person | Account Where PROPERTY_EXISTS(n, birthday))
  columns(PROPERTY_EXISTS(n, id) as has_id)
)

--
QueryStmt
+-output_column_list=
| +-$graph_table.has_id#2 AS has_id [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.has_id#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.has_id#2]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$element_table.n#1]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$element_table.n#1]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.n#1]
        |       |   +-filter_expr=
        |       |   | +-FunctionCall(ZetaSQL:property_exists(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>, STRING) -> BOOL)
        |       |   |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
        |       |   |   +-Literal(type=STRING, value="birthday")
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphLabel(label=sample_catalog.aml.Person)
        |       |   |     +-GraphLabel(label=sample_catalog.aml.Account)
        |       |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person]
        |       +-head=$element_table.n#1
        |       +-tail=$element_table.n#1
        +-shape_expr_list=
          +-has_id#2 :=
            +-FunctionCall(ZetaSQL:property_exists(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>, STRING) -> BOOL)
              +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
              +-Literal(type=STRING, value="id")

[UNPARSED_SQL]
SELECT
  aml_1.a_3 AS has_id
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (Person | Account)
      WHERE
        PROPERTY_EXISTS(a_2, birthday))
    COLUMNS(
      PROPERTY_EXISTS(a_2, id) AS a_3
    )
  ) AS aml_1;

==

select has_birthday from graph_table(
  aml
  match (n IS Account Where PROPERTY_EXISTS(n, id))
  columns(PROPERTY_EXISTS(n, birthday) as has_birthday)
)

--
QueryStmt
+-output_column_list=
| +-$graph_table.has_birthday#2 AS has_birthday [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.has_birthday#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.has_birthday#2]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$element_table.n#1]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$element_table.n#1]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.n#1]
        |       |   +-filter_expr=
        |       |   | +-FunctionCall(ZetaSQL:property_exists(GRAPH_NODE(aml)<balance UINT64, id INT64>, STRING) -> BOOL)
        |       |   |   +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.n#1)
        |       |   |   +-Literal(type=STRING, value="id")
        |       |   +-label_expr=
        |       |   | +-GraphLabel(label=sample_catalog.aml.Account)
        |       |   +-target_element_table_list=[sample_catalog.aml.Account]
        |       +-head=$element_table.n#1
        |       +-tail=$element_table.n#1
        +-shape_expr_list=
          +-has_birthday#2 :=
            +-FunctionCall(ZetaSQL:property_exists(GRAPH_NODE(aml)<balance UINT64, id INT64>, STRING) -> BOOL)
              +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.n#1)
              +-Literal(type=STRING, value="birthday")

[UNPARSED_SQL]
SELECT
  aml_1.a_3 AS has_birthday
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Account
      WHERE
        PROPERTY_EXISTS(a_2, id))
    COLUMNS(
      PROPERTY_EXISTS(a_2, birthday) AS a_3
    )
  ) AS aml_1;
==

[language_features=V_1_4_SQL_GRAPH{{|,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT}}]
[no_run_unparser]
select 1 from graph_table(
  aml
  match (n)
  columns ([n] as array_of_n)
)

--
ALTERNATION GROUP: <empty>
--
ERROR: Graph element typed expression is not allowed here [at 4:13]
  columns ([n] as array_of_n)
            ^
--
ALTERNATION GROUP: ,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 := Literal(type=INT64, value=1)
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.array_of_n#2]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$element_table.n#1]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$element_table.n#1]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.n#1]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       +-head=$element_table.n#1
        |       +-tail=$element_table.n#1
        +-shape_expr_list=
          +-array_of_n#2 :=
            +-FunctionCall(ZetaSQL:$make_array(repeated(1) GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>)
              +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
==

[language_features=V_1_4_SQL_GRAPH{{|,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT}}]
[no_run_unparser]
select 1 from graph_table(
  aml
  match (n where struct(n as e).e.id > 0)
  columns ([n] as array_of_n)
)

--
ALTERNATION GROUP: <empty>
--
ERROR: Graph element typed expression is not allowed here [at 3:25]
  match (n where struct(n as e).e.id > 0)
                        ^
--
ALTERNATION GROUP: ,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 := Literal(type=INT64, value=1)
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.array_of_n#2]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$element_table.n#1]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$element_table.n#1]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.n#1]
        |       |   +-filter_expr=
        |       |   | +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |       |   |   +-GraphGetElementProperty
        |       |   |   | +-type=INT64
        |       |   |   | +-expr=
        |       |   |   | | +-GetStructField
        |       |   |   | |   +-type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>
        |       |   |   | |   +-expr=
        |       |   |   | |   | +-MakeStruct
        |       |   |   | |   |   +-type=STRUCT<e GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>
        |       |   |   | |   |   +-field_list=
        |       |   |   | |   |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
        |       |   |   | |   +-field_idx=0
        |       |   |   | +-property=id(INT64)
        |       |   |   +-Literal(type=INT64, value=0)
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       +-head=$element_table.n#1
        |       +-tail=$element_table.n#1
        +-shape_expr_list=
          +-array_of_n#2 :=
            +-FunctionCall(ZetaSQL:$make_array(repeated(1) GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>)
              +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
==

select * from graph_table(
  aml
  match (n)
  columns ((select n.id from (select n)) AS id)
)
--
ERROR: Graph element typed expression is not allowed here [at 4:38]
  columns ((select n.id from (select n)) AS id)
                                     ^
==

[language_features=V_1_4_SQL_GRAPH{{|,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT}}]
[no_run_unparser]
select 1 from graph_table(
  aml
  match (n)
  columns ((n is null) as n_is_null)
)
--
ALTERNATION GROUP: <empty>
--
ERROR: Graph element typed expression is not allowed here [at 4:13]
  columns ((n is null) as n_is_null)
            ^
--
ALTERNATION GROUP: ,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 := Literal(type=INT64, value=1)
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.n_is_null#2]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$element_table.n#1]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$element_table.n#1]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.n#1]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       +-head=$element_table.n#1
        |       +-tail=$element_table.n#1
        +-shape_expr_list=
          +-n_is_null#2 :=
            +-FunctionCall(ZetaSQL:$is_null(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
              +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
==

[language_features=V_1_4_SQL_GRAPH{{|,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT}}]
[no_run_unparser]
select 1 from graph_table(
  aml
  match (n)
  columns (if(true, n, n) AS if_expr)
)
--
ALTERNATION GROUP: <empty>
--
ERROR: No matching signature for function IF for argument types: BOOL, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>. Supported signature: IF(BOOL, ANY, ANY) [at 4:12]
  columns (if(true, n, n) AS if_expr)
           ^
--
Signature Mismatch Details:
ERROR: No matching signature for function IF
  Argument types: BOOL, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>
  Signature: IF(BOOL, T1, T1)
    Argument 2: expected T1, found GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>: which is not allowed for ANY arguments [at 4:12]
  columns (if(true, n, n) AS if_expr)
           ^
--
ALTERNATION GROUP: ,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 := Literal(type=INT64, value=1)
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.if_expr#2]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$element_table.n#1]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$element_table.n#1]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.n#1]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       +-head=$element_table.n#1
        |       +-tail=$element_table.n#1
        +-shape_expr_list=
          +-if_expr#2 :=
            +-FunctionCall(ZetaSQL:if(BOOL, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>)
              +-Literal(type=BOOL, value=true)
              +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
              +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
==

[language_features=V_1_4_SQL_GRAPH{{|,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT}}]
[no_run_unparser]
select 1 from graph_table(
  aml
  match (n)
  columns (array_length((SELECT array_agg(n) FROM (select 1))) as arr_length)
)
--
ALTERNATION GROUP: <empty>
--
ERROR: No matching signature for aggregate function ARRAY_AGG for argument types: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>. Supported signature: ARRAY_AGG(ANY) [at 4:33]
  columns (array_length((SELECT array_agg(n) FROM (select 1))) as arr_length)
                                ^
--
Signature Mismatch Details:
ERROR: No matching signature for aggregate function ARRAY_AGG
  Argument types: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>
  Signature: ARRAY_AGG(T1)
    Argument 1: expected T1, found GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>: which is not allowed for ANY arguments [at 4:33]
  columns (array_length((SELECT array_agg(n) FROM (select 1))) as arr_length)
                                ^
--
ALTERNATION GROUP: ,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT
--
QueryStmt
+-output_column_list=
| +-$query.$col1#5 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#5]
    +-expr_list=
    | +-$col1#5 := Literal(type=INT64, value=1)
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.arr_length#4]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$element_table.n#1]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$element_table.n#1]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.n#1]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       +-head=$element_table.n#1
        |       +-tail=$element_table.n#1
        +-shape_expr_list=
          +-arr_length#4 :=
            +-FunctionCall(ZetaSQL:array_length(ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>) -> INT64)
              +-SubqueryExpr
                +-type=ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>
                +-subquery_type=SCALAR
                +-parameter_list=
                | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                +-subquery=
                  +-ProjectScan
                    +-column_list=[$aggregate.$agg1#3]
                    +-input_scan=
                      +-AggregateScan
                        +-column_list=[$aggregate.$agg1#3]
                        +-input_scan=
                        | +-ProjectScan
                        |   +-column_list=[$subquery1.$col1#2]
                        |   +-expr_list=
                        |   | +-$col1#2 := Literal(type=INT64, value=1)
                        |   +-input_scan=
                        |     +-SingleRowScan
                        +-aggregate_list=
                          +-$agg1#3 :=
                            +-AggregateFunctionCall(ZetaSQL:array_agg(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>)
                              +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1, is_correlated=TRUE)
==

select gt.* from graph_table(
  aml
  match (n)-[e]->(m)
  columns(n.id as id, same(n, NULL) as same_node_with_nulls)
) gt

--
ERROR: No matching signature for function SAME for argument types: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>, NULL. Supported signature: SAME([GRAPH_ELEMENT, ...]) [at 4:23]
  columns(n.id as id, same(n, NULL) as same_node_with_nulls)
                      ^
--
Signature Mismatch Details:
ERROR: No matching signature for function SAME
  Argument types: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>, NULL
  Signature: SAME([GRAPH_ELEMENT, ...])
    Argument 2: expected GRAPH_ELEMENT, found NULL [at 4:23]
  columns(n.id as id, same(n, NULL) as same_node_with_nulls)
                      ^
==

select gt.* from graph_table(
  aml
  match (n)-[e]-(m)
  columns(same(NULL, NULL, NULL) as same_with_nulls)
) gt
--
ERROR: No matching signature for function SAME for argument types: NULL, NULL, NULL. Supported signature: SAME([GRAPH_ELEMENT, ...]) [at 4:11]
  columns(same(NULL, NULL, NULL) as same_with_nulls)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for function SAME
  Argument types: NULL, NULL, NULL
  Signature: SAME([GRAPH_ELEMENT, ...])
    Argument 1: expected GRAPH_ELEMENT, found NULL [at 4:11]
  columns(same(NULL, NULL, NULL) as same_with_nulls)
          ^

==

select gt.* from graph_table(
  aml
  match (n)
  columns(all_different(n) as all_different)
) gt
--

ERROR: Function ALL_DIFFERENT() requires at least 2 arguments [at 4:11]
  columns(all_different(n) as all_different)
          ^
==

select gt.* from graph_table(
  aml
  match (n)->(m)->(k)
  columns(all_different(n, m, k) as all_different)
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.all_different#6 AS all_different [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.all_different#6]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.all_different#6]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[n#1, $element1#2, m#3, $element2#4, k#5]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[n#1, $element1#2, m#3, $element2#4, k#5]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.n#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element1#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.m#3]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element2#4]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.k#5]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       +-head=$element_table.n#1
        |       +-tail=$element_table.k#5
        +-shape_expr_list=
          +-all_different#6 :=
            +-FunctionCall(ZetaSQL:all_different(repeated(3) GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
              +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
              +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#3)
              +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.k#5)

[UNPARSED_SQL]
SELECT
  aml_1.a_7 AS all_different
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
      -[a_5
      IS (% | ! %)]->
      (a_6
      IS (% | ! %))
    COLUMNS(
      ALL_DIFFERENT(a_2, a_4, a_6) AS a_7
    )
  ) AS aml_1;

==

# all different edges

select gt.* from graph_table(
  aml
  match ()-[e1]->()-[e2]->()-[e3]->()
  columns(all_different(e1, e2, e3) as all_different)
) gt

--

QueryStmt
+-output_column_list=
| +-$graph_table.all_different#8 AS all_different [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.all_different#8]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.all_different#8]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[$element1#1, e1#2, $element2#3, e2#4, $element3#5, e3#6, $element4#7]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[$element1#1, e1#2, $element2#3, e2#4, $element3#5, e3#6, $element4#7]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element1#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.e1#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element2#3]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.e2#4]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element3#5]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.e3#6]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.$element4#7]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       +-head=$element_table.$element1#1
        |       +-tail=$element_table.$element4#7
        +-shape_expr_list=
          +-all_different#8 :=
            +-FunctionCall(ZetaSQL:all_different(repeated(3) GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> BOOL)
              +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e1#2)
              +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e2#4)
              +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e3#6)

[UNPARSED_SQL]
SELECT
  aml_1.a_9 AS all_different
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
      -[a_5
      IS (% | ! %)]->
      (a_6
      IS (% | ! %))
      -[a_7
      IS (% | ! %)]->
      (a_8
      IS (% | ! %))
    COLUMNS(
      ALL_DIFFERENT(a_3, a_5, a_7) AS a_9
    )
  ) AS aml_1;
==

# mixing node and edge in all_different is not allowed

select gt.* from graph_table(
  aml
  match (n)-[e]->(m)
  columns(all_different(n, e, m) as all_different)
) gt
--
ERROR: No matching signature for function ALL_DIFFERENT for argument types: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>. Supported signature: ALL_DIFFERENT([GRAPH_ELEMENT, ...]) [at 4:11]
  columns(all_different(n, e, m) as all_different)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for function ALL_DIFFERENT
  Argument types: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>
  Signature: ALL_DIFFERENT([GRAPH_ELEMENT, ...])
    Unable to find common supertype for templated argument <graph_element>
      Input types for <graph_element>: {GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>} [at 4:11]
  columns(all_different(n, e, m) as all_different)
          ^

==

select gt.* from graph_table(
  aml
  match (n)-[e]->(m)
  columns(all_different(NULL, n, m) as all_different)
) gt

--

ERROR: No matching signature for function ALL_DIFFERENT for argument types: NULL, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>. Supported signature: ALL_DIFFERENT([GRAPH_ELEMENT, ...]) [at 4:11]
  columns(all_different(NULL, n, m) as all_different)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for function ALL_DIFFERENT
  Argument types: NULL, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>
  Signature: ALL_DIFFERENT([GRAPH_ELEMENT, ...])
    Argument 1: expected GRAPH_ELEMENT, found NULL [at 4:11]
  columns(all_different(NULL, n, m) as all_different)
          ^

==

[language_features=V_1_4_SQL_GRAPH,JSON_TYPE,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT]
[no_run_unparser]
select * from graph_table(
  aml
  match (n) -[e]-> (m)
  columns (TO_JSON(n) as js_n, TO_JSON(e) as js_e, TO_JSON(m) as js_m)
)

--
QueryStmt
+-output_column_list=
| +-$graph_table.js_n#4 AS js_n [JSON]
| +-$graph_table.js_e#5 AS js_e [JSON]
| +-$graph_table.js_m#6 AS js_m [JSON]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[js_n#4, js_e#5, js_m#6]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[js_n#4, js_e#5, js_m#6]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[n#1, e#2, m#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[n#1, e#2, m#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.n#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.e#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.m#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       +-head=$element_table.n#1
        |       +-tail=$element_table.m#3
        +-shape_expr_list=
          +-js_n#4 :=
          | +-FunctionCall(ZetaSQL:to_json(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, optional(1) BOOL stringify_wide_numbers) -> JSON)
          |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
          |   +-Literal(type=BOOL, value=false)
          +-js_e#5 :=
          | +-FunctionCall(ZetaSQL:to_json(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, optional(1) BOOL stringify_wide_numbers) -> JSON)
          |   +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#2)
          |   +-Literal(type=BOOL, value=false)
          +-js_m#6 :=
            +-FunctionCall(ZetaSQL:to_json(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, optional(1) BOOL stringify_wide_numbers) -> JSON)
              +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#3)
              +-Literal(type=BOOL, value=false)

==

[language_features=V_1_4_SQL_GRAPH,JSON_TYPE,NAMED_ARGUMENTS,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT]
[no_run_unparser]
select * from graph_table(
  aml
  match (n) -[e]-> (m)
  columns (TO_JSON(n, stringify_wide_numbers=>true) as js_n,
           TO_JSON(e, stringify_wide_numbers=>true) as js_e,
           TO_JSON(m, stringify_wide_numbers=>true) as js_m)
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.js_n#4 AS js_n [JSON]
| +-$graph_table.js_e#5 AS js_e [JSON]
| +-$graph_table.js_m#6 AS js_m [JSON]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[js_n#4, js_e#5, js_m#6]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[js_n#4, js_e#5, js_m#6]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[n#1, e#2, m#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[n#1, e#2, m#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.n#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.e#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.m#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       +-head=$element_table.n#1
        |       +-tail=$element_table.m#3
        +-shape_expr_list=
          +-js_n#4 :=
          | +-FunctionCall(ZetaSQL:to_json(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, optional(1) BOOL stringify_wide_numbers) -> JSON)
          |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
          |   +-Literal(type=BOOL, value=true)
          +-js_e#5 :=
          | +-FunctionCall(ZetaSQL:to_json(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, optional(1) BOOL stringify_wide_numbers) -> JSON)
          |   +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#2)
          |   +-Literal(type=BOOL, value=true)
          +-js_m#6 :=
            +-FunctionCall(ZetaSQL:to_json(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, optional(1) BOOL stringify_wide_numbers) -> JSON)
              +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#3)
              +-Literal(type=BOOL, value=true)
==

select gt.* from graph_table(
  aml
  match (n)
  columns(labels(n) as node_labels)
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.node_labels#2 AS node_labels [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.node_labels#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.node_labels#2]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$element_table.n#1]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$element_table.n#1]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.n#1]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       +-head=$element_table.n#1
        |       +-tail=$element_table.n#1
        +-shape_expr_list=
          +-node_labels#2 :=
            +-FunctionCall(ZetaSQL:labels(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> ARRAY<STRING>)
              +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)

[UNPARSED_SQL]
SELECT
  aml_1.a_3 AS node_labels
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
    COLUMNS(
      LABELS(a_2) AS a_3
    )
  ) AS aml_1;
==

select gt.* from graph_table(
  aml
  match -[e]-
  columns(labels(e) as edge_labels)
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.edge_labels#4 AS edge_labels [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.edge_labels#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.edge_labels#4]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[$element1#1, e#2, $element2#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[$element1#1, e#2, $element2#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element1#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.e#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=ANY
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.$element2#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       +-head=$element_table.$element1#1
        |       +-tail=$element_table.$element2#3
        +-shape_expr_list=
          +-edge_labels#4 :=
            +-FunctionCall(ZetaSQL:labels(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> ARRAY<STRING>)
              +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#2)

[UNPARSED_SQL]
SELECT
  aml_1.a_5 AS edge_labels
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]-
      (a_4
      IS (% | ! %))
    COLUMNS(
      LABELS(a_3) AS a_5
    )
  ) AS aml_1;
==

select gt.* from graph_table(
  aml
  match (n:% & !%)
  columns(labels(n) as empty_labels, property_exists(n, id) as has_id)
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.empty_labels#2 AS empty_labels [ARRAY<STRING>]
| +-$graph_table.has_id#3 AS has_id [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[empty_labels#2, has_id#3]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[empty_labels#2, has_id#3]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$element_table.n#1]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$element_table.n#1]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.n#1]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=AND
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[]
        |       +-head=$element_table.n#1
        |       +-tail=$element_table.n#1
        +-shape_expr_list=
          +-empty_labels#2 :=
          | +-FunctionCall(ZetaSQL:labels(GRAPH_NODE(aml)<>) -> ARRAY<STRING>)
          |   +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1)
          +-has_id#3 :=
            +-FunctionCall(ZetaSQL:property_exists(GRAPH_NODE(aml)<>, STRING) -> BOOL)
              +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1)
              +-Literal(type=STRING, value="id")

[UNPARSED_SQL]
SELECT
  aml_1.a_3 AS empty_labels,
  aml_1.a_4 AS has_id
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% & ! %))
    COLUMNS(
      LABELS(a_2) AS a_3,
      PROPERTY_EXISTS(a_2, id) AS a_4
    )
  ) AS aml_1;
==

select gt.* from graph_table(
  aml
  match (n)
  columns(property_names(n) as node_properties)
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.node_properties#2 AS node_properties [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.node_properties#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.node_properties#2]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$element_table.n#1]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$element_table.n#1]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.n#1]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       +-head=$element_table.n#1
        |       +-tail=$element_table.n#1
        +-shape_expr_list=
          +-node_properties#2 :=
            +-FunctionCall(ZetaSQL:property_names(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> ARRAY<STRING>)
              +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)

[UNPARSED_SQL]
SELECT
  aml_1.a_3 AS node_properties
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
    COLUMNS(
      PROPERTY_NAMES(a_2) AS a_3
    )
  ) AS aml_1;
==

select gt.* from graph_table(
  aml
  match -[e]-
  columns(property_names(e) as edge_properties)
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.edge_properties#4 AS edge_properties [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.edge_properties#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.edge_properties#4]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[$element1#1, e#2, $element2#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[$element1#1, e#2, $element2#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element1#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.e#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=ANY
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.$element2#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       +-head=$element_table.$element1#1
        |       +-tail=$element_table.$element2#3
        +-shape_expr_list=
          +-edge_properties#4 :=
            +-FunctionCall(ZetaSQL:property_names(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> ARRAY<STRING>)
              +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#2)

[UNPARSED_SQL]
SELECT
  aml_1.a_5 AS edge_properties
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]-
      (a_4
      IS (% | ! %))
    COLUMNS(
      PROPERTY_NAMES(a_3) AS a_5
    )
  ) AS aml_1;
==

# <is labeled predicate> LHS must be a graph element type
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH (a)-[e]->(b)
  COLUMNS(1 is labeled %)
  )
--
ERROR: Operand to IS LABELED must be a graph element [at 4:11]
  COLUMNS(1 is labeled %)
          ^
==

[language_features=V_1_4_SQL_GRAPH,V_1_4_SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION]
# <is labeled predicate> currently only supports column references
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH ((a IS !%)-[e]->(b)){1, 5}
  COLUMNS(array_first(a) IS LABELED Account as col1)
  )
--
ERROR: Operand to IS LABELED must be a column reference [at 5:11]
  COLUMNS(array_first(a) IS LABELED Account as col1)
          ^
==

[language_features=V_1_4_SQL_GRAPH,V_1_4_SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION]
# <is labeled predicate> returns error if label is not applicable to LHS
# based on inconsistent element types (node vs edge)
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH (a)-[e]->(b)
  COLUMNS(e IS LABELED Person)
  )
--
ERROR: Label Person is only valid for nodes, but used here on a edge [at 6:24]
  COLUMNS(e IS LABELED Person)
                       ^
==

SELECT * FROM GRAPH_TABLE(
  aml
  MATCH (a)-[e]->(b)
  COLUMNS(labels(a) as labels,
          a is labeled % | (account & person) as true_pred,
          a is not labeled %|!% as false_pred,
          a is labeled person as is_person,
          a is labeled account as is_account)
  )
--
QueryStmt
+-output_column_list=
| +-$graph_table.labels#4 AS labels [ARRAY<STRING>]
| +-$graph_table.true_pred#5 AS true_pred [BOOL]
| +-$graph_table.false_pred#6 AS false_pred [BOOL]
| +-$graph_table.is_person#7 AS is_person [BOOL]
| +-$graph_table.is_account#8 AS is_account [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[labels#4, true_pred#5, false_pred#6, is_person#7, is_account#8]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[labels#4, true_pred#5, false_pred#6, is_person#7, is_account#8]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[a#1, e#2, b#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[a#1, e#2, b#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.a#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.e#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.b#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       +-head=$element_table.a#1
        |       +-tail=$element_table.b#3
        +-shape_expr_list=
          +-labels#4 :=
          | +-FunctionCall(ZetaSQL:labels(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> ARRAY<STRING>)
          |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
          +-true_pred#5 :=
          | +-GraphIsLabeledPredicate
          |   +-type=BOOL
          |   +-expr=
          |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
          |   +-label_expr=
          |     +-GraphLabelNaryExpr
          |       +-op=OR
          |       +-operand_list=
          |         +-GraphWildCardLabel
          |         +-GraphLabelNaryExpr
          |           +-op=AND
          |           +-operand_list=
          |             +-GraphLabel(label=sample_catalog.aml.Account)
          |             +-GraphLabel(label=sample_catalog.aml.Person)
          +-false_pred#6 :=
          | +-GraphIsLabeledPredicate
          |   +-type=BOOL
          |   +-is_not=TRUE
          |   +-expr=
          |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
          |   +-label_expr=
          |     +-GraphLabelNaryExpr
          |       +-op=OR
          |       +-operand_list=
          |         +-GraphWildCardLabel
          |         +-GraphLabelNaryExpr
          |           +-op=NOT
          |           +-operand_list=
          |             +-GraphWildCardLabel
          +-is_person#7 :=
          | +-GraphIsLabeledPredicate
          |   +-type=BOOL
          |   +-expr=
          |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
          |   +-label_expr=
          |     +-GraphLabel(label=sample_catalog.aml.Person)
          +-is_account#8 :=
            +-GraphIsLabeledPredicate
              +-type=BOOL
              +-expr=
              | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
              +-label_expr=
                +-GraphLabel(label=sample_catalog.aml.Account)

[UNPARSED_SQL]
SELECT
  aml_1.a_5 AS labels,
  aml_1.a_6 AS true_pred,
  aml_1.a_7 AS false_pred,
  aml_1.a_8 AS is_person,
  aml_1.a_9 AS is_account
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    COLUMNS(
      LABELS(a_2) AS a_5,
      a_2 IS LABELED(% |(Account & Person)) AS a_6,
      a_2 IS NOT LABELED(% | ! %) AS a_7,
      a_2 IS LABELED Person AS a_8,
      a_2 IS LABELED Account AS a_9
    )
  ) AS aml_1;
==

select gt.* from graph_table(
  aml
  match (n1)-[e]-(n2)
  columns(element_id(n1) as nid,
         element_id(e) as eid,
         source_node_id(e) as source_node_id,
         destination_node_id(e) as destination_node_id)
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.nid#4 AS nid [STRING]
| +-$graph_table.eid#5 AS eid [STRING]
| +-$graph_table.source_node_id#6 AS source_node_id [STRING]
| +-$graph_table.destination_node_id#7 AS destination_node_id [STRING]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[nid#4, eid#5, source_node_id#6, destination_node_id#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[nid#4, eid#5, source_node_id#6, destination_node_id#7]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[n1#1, e#2, n2#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[n1#1, e#2, n2#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.n1#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.e#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=ANY
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.n2#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       +-head=$element_table.n1#1
        |       +-tail=$element_table.n2#3
        +-shape_expr_list=
          +-nid#4 :=
          | +-FunctionCall(ZetaSQL:element_id(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> STRING)
          |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n1#1)
          +-eid#5 :=
          | +-FunctionCall(ZetaSQL:element_id(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> STRING)
          |   +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#2)
          +-source_node_id#6 :=
          | +-FunctionCall(ZetaSQL:source_node_id(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> STRING)
          |   +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#2)
          +-destination_node_id#7 :=
            +-FunctionCall(ZetaSQL:destination_node_id(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> STRING)
              +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#2)

[UNPARSED_SQL]
SELECT
  aml_1.a_5 AS nid,
  aml_1.a_6 AS eid,
  aml_1.a_7 AS source_node_id,
  aml_1.a_8 AS destination_node_id
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]-
      (a_4
      IS (% | ! %))
    COLUMNS(
      ELEMENT_ID(a_2) AS a_5,
      ELEMENT_ID(a_3) AS a_6,
      SOURCE_NODE_ID(a_3) AS a_7,
      DESTINATION_NODE_ID(a_3) AS a_8
    )
  ) AS aml_1;
==

# TODO: b/348064840 - Add test cases for path variables
[language_features=V_1_4_SQL_GRAPH,V_1_4_SQL_GRAPH_ADVANCED_QUERY,V_1_4_SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION]
select gt.* from graph_table(
  aml
  match (n), (-[e]-){3}
  columns({{source_node_id(n)|source_node_id(1)|source_node_id(e)|destination_node_id(n)|destination_node_id(1)|destination_node_id(e)}} as output)
) gt
--
ALTERNATION GROUP: source_node_id(n)
--
ERROR: No matching signature for function SOURCE_NODE_ID for argument types: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>. Supported signature: SOURCE_NODE_ID(GRAPH_EDGE) [at 4:11]
  columns(source_node_id(n) as output)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for function SOURCE_NODE_ID
  Argument types: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>
  Signature: SOURCE_NODE_ID(GRAPH_EDGE)
    Argument 1: expected GRAPH_EDGE, found GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...> [at 4:11]
  columns(source_node_id(n) as output)
          ^
--
ALTERNATION GROUP: source_node_id(1)
--
ERROR: No matching signature for function SOURCE_NODE_ID for argument types: INT64. Supported signature: SOURCE_NODE_ID(GRAPH_EDGE) [at 4:11]
  columns(source_node_id(1) as output)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for function SOURCE_NODE_ID
  Argument types: INT64
  Signature: SOURCE_NODE_ID(GRAPH_EDGE)
    Argument 1: expected GRAPH_EDGE, found INT64 [at 4:11]
  columns(source_node_id(1) as output)
          ^
--
ALTERNATION GROUP: source_node_id(e)
--
ERROR: No matching signature for function SOURCE_NODE_ID for argument types: ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>>. Supported signature: SOURCE_NODE_ID(GRAPH_EDGE) [at 4:11]
  columns(source_node_id(e) as output)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for function SOURCE_NODE_ID
  Argument types: ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>>
  Signature: SOURCE_NODE_ID(GRAPH_EDGE)
    Argument 1: expected GRAPH_EDGE, found ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>> [at 4:11]
  columns(source_node_id(e) as output)
          ^
--
ALTERNATION GROUP: destination_node_id(n)
--
ERROR: No matching signature for function DESTINATION_NODE_ID for argument types: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>. Supported signature: DESTINATION_NODE_ID(GRAPH_EDGE) [at 4:11]
  columns(destination_node_id(n) as output)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for function DESTINATION_NODE_ID
  Argument types: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>
  Signature: DESTINATION_NODE_ID(GRAPH_EDGE)
    Argument 1: expected GRAPH_EDGE, found GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...> [at 4:11]
  columns(destination_node_id(n) as output)
          ^
--
ALTERNATION GROUP: destination_node_id(1)
--
ERROR: No matching signature for function DESTINATION_NODE_ID for argument types: INT64. Supported signature: DESTINATION_NODE_ID(GRAPH_EDGE) [at 4:11]
  columns(destination_node_id(1) as output)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for function DESTINATION_NODE_ID
  Argument types: INT64
  Signature: DESTINATION_NODE_ID(GRAPH_EDGE)
    Argument 1: expected GRAPH_EDGE, found INT64 [at 4:11]
  columns(destination_node_id(1) as output)
          ^
--
ALTERNATION GROUP: destination_node_id(e)
--
ERROR: No matching signature for function DESTINATION_NODE_ID for argument types: ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>>. Supported signature: DESTINATION_NODE_ID(GRAPH_EDGE) [at 4:11]
  columns(destination_node_id(e) as output)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for function DESTINATION_NODE_ID
  Argument types: ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>>
  Signature: DESTINATION_NODE_ID(GRAPH_EDGE)
    Argument 1: expected GRAPH_EDGE, found ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>> [at 4:11]
  columns(destination_node_id(e) as output)
          ^
==

select gt.* from graph_table(
  aml
  match (n)-[e]-
  columns(element_definition_name(n) as node_name,
          element_definition_name(e) as edge_name)
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.node_name#4 AS node_name [STRING]
| +-$graph_table.edge_name#5 AS edge_name [STRING]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[node_name#4, edge_name#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[node_name#4, edge_name#5]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[n#1, e#2, $element1#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[n#1, e#2, $element1#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.n#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.e#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=ANY
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.$element1#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       +-head=$element_table.n#1
        |       +-tail=$element_table.$element1#3
        +-shape_expr_list=
          +-node_name#4 :=
          | +-FunctionCall(ZetaSQL:element_definition_name(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> STRING)
          |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
          +-edge_name#5 :=
            +-FunctionCall(ZetaSQL:element_definition_name(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> STRING)
              +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#2)

[UNPARSED_SQL]
SELECT
  aml_1.a_5 AS node_name,
  aml_1.a_6 AS edge_name
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]-
      (a_4
      IS (% | ! %))
    COLUMNS(
      ELEMENT_DEFINITION_NAME(a_2) AS a_5,
      ELEMENT_DEFINITION_NAME(a_3) AS a_6
    )
  ) AS aml_1;
==

[language_features=V_1_4_SQL_GRAPH,JSON_TYPE,JSON_MUTATOR_FUNCTIONS{{|,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT}}]
[no_run_unparser]
select 1 from graph_table(
  aml
  match (a:Person)
  columns(JSON_ARRAY_APPEND(JSON '[]', '$', a) AS json_array_append)
)

--
ALTERNATION GROUP: <empty>
--
ERROR: No matching signature for function JSON_ARRAY_APPEND for argument types: JSON, STRING, GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>. Supported signature: JSON_ARRAY_APPEND(JSON, STRING, ANY, [[STRING, ANY], ...], [append_each_element => BOOL]) [at 4:11]
  columns(JSON_ARRAY_APPEND(JSON '[]', '$', a) AS json_array_append)
          ^
--
Signature Mismatch Details:
ERROR: No matching signature for function JSON_ARRAY_APPEND
  Argument types: JSON, STRING, GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>
  Signature: JSON_ARRAY_APPEND(JSON, STRING, ANY, [[STRING, ANY], ...], [append_each_element => BOOL])
    Argument 3: expected ANY, found GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>: which is not allowed for ANY arguments [at 4:11]
  columns(JSON_ARRAY_APPEND(JSON '[]', '$', a) AS json_array_append)
          ^
--
ALTERNATION GROUP: ,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 := Literal(type=INT64, value=1)
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.json_array_append#2]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$element_table.a#1]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$element_table.a#1]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.a#1]
        |       |   +-label_expr=
        |       |   | +-GraphLabel(label=sample_catalog.aml.Person)
        |       |   +-target_element_table_list=[sample_catalog.aml.Person]
        |       +-head=$element_table.a#1
        |       +-tail=$element_table.a#1
        +-shape_expr_list=
          +-json_array_append#2 :=
            +-FunctionCall(ZetaSQL:json_array_append(JSON, STRING, GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, repeated(0) STRING, repeated ANY TYPE, optional(1) BOOL append_each_element) -> JSON)
              +-Literal(type=JSON, value=[], has_explicit_type=TRUE)
              +-Literal(type=STRING, value="$")
              +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#1)
              +-Literal(type=BOOL, value=true)
==

[language_features=V_1_4_SQL_GRAPH,V_1_4_SQL_GRAPH_ADVANCED_QUERY{{|,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT}}]
[no_run_unparser]
select 1 from graph_table(
  aml
  match (a:Person)
  return ANY_VALUE(a) AS any_value,
         COUNT(a) AS count,
         ARRAY_AGG(a) AS array_agg
)

--
ALTERNATION GROUP: <empty>
--
ERROR: No matching signature for aggregate function ANY_VALUE for argument types: GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>. Supported signature: ANY_VALUE(ANY) [at 4:10]
  return ANY_VALUE(a) AS any_value,
         ^
--
Signature Mismatch Details:
ERROR: No matching signature for aggregate function ANY_VALUE
  Argument types: GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>
  Signature: ANY_VALUE(T1)
    Argument 1: expected T1, found GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>: which is not allowed for ANY arguments [at 4:10]
  return ANY_VALUE(a) AS any_value,
         ^
--
ALTERNATION GROUP: ,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT
--
QueryStmt
+-output_column_list=
| +-$query.$col1#5 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#5]
    +-expr_list=
    | +-$col1#5 := Literal(type=INT64, value=1)
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[any_value#2, count#3, array_agg#4]
        +-property_graph=sample_catalog.aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[any_value#2, count#3, array_agg#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[any_value#2, count#3, array_agg#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.a#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.a#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(label=sample_catalog.aml.Person)
                  | |   |   +-target_element_table_list=[sample_catalog.aml.Person]
                  | |   +-head=$element_table.a#1
                  | |   +-tail=$element_table.a#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=$graph_table.[any_value#2, count#3, array_agg#4]
                    +-input_scan=
                      +-AggregateScan
                        +-column_list=$graph_table.[any_value#2, count#3, array_agg#4]
                        +-input_scan=
                        | +-GraphRefScan(column_list=[$element_table.a#1])
                        +-aggregate_list=
                          +-any_value#2 :=
                          | +-AggregateFunctionCall(ZetaSQL:any_value(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>) -> GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>)
                          |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#1)
                          +-count#3 :=
                          | +-AggregateFunctionCall(ZetaSQL:count(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>) -> INT64)
                          |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#1)
                          +-array_agg#4 :=
                            +-AggregateFunctionCall(ZetaSQL:array_agg(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>) -> ARRAY<GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>>)
                              +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#1)
==

[language_features=V_1_4_SQL_GRAPH{{|,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT}}]
[no_run_unparser]
select 1 from graph_table(
  aml
  match (a:Person)
  columns(LEAST(a, a) AS least)
)

--
ERROR: LEAST is not defined for arguments of type GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> [at 4:11]
  columns(LEAST(a, a) AS least)
          ^
==

[language_features=V_1_4_SQL_GRAPH{{|,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT}}]
[no_run_unparser]
select 1 from graph_table(
  aml
  match (a:Person)
  columns(MAX(a) AS max)
)
--
ERROR: MAX is not defined for arguments of type GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> [at 4:11]
  columns(MAX(a) AS max)
          ^
==

[language_features=V_1_4_SQL_GRAPH,ANALYTIC_FUNCTIONS{{|,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT}}]
[no_run_unparser]
select 1 from (
select FIRST_VALUE(a) OVER (ORDER BY a.id) from graph_table(
  aml
  match (a:Person)
  columns(a)
))
# POST-COMMENT FROM MISSING PART

--
ALTERNATION GROUP: <empty>
--
ERROR: Graph element typed expression is not allowed here [at 5:11]
  columns(a)
          ^
--
ALTERNATION GROUP: ,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT
--
QueryStmt
+-output_column_list=
| +-$query.$col1#6 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#6]
    +-expr_list=
    | +-$col1#6 := Literal(type=INT64, value=1)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$analytic.$analytic1#4]
        +-input_scan=
          +-AnalyticScan
            +-column_list=[$graph_table.a#2, $analytic.$analytic1#4]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[$graph_table.a#2, $orderby.id#5]
            |   +-expr_list=
            |   | +-id#5 :=
            |   |   +-GraphGetElementProperty
            |   |     +-type=INT64
            |   |     +-expr=
            |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$graph_table.a#2)
            |   |     +-property=id(INT64)
            |   +-input_scan=
            |     +-GraphTableScan
            |       +-column_list=[$graph_table.a#2]
            |       +-property_graph=sample_catalog.aml
            |       +-input_scan=
            |       | +-GraphScan
            |       |   +-column_list=[$element_table.a#1]
            |       |   +-input_scan_list=
            |       |     +-GraphPathScan
            |       |       +-column_list=[$element_table.a#1]
            |       |       +-input_scan_list=
            |       |       | +-GraphNodeScan
            |       |       |   +-column_list=[$element_table.a#1]
            |       |       |   +-label_expr=
            |       |       |   | +-GraphLabel(label=sample_catalog.aml.Person)
            |       |       |   +-target_element_table_list=[sample_catalog.aml.Person]
            |       |       +-head=$element_table.a#1
            |       |       +-tail=$element_table.a#1
            |       +-shape_expr_list=
            |         +-a#2 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#1)
            +-function_group_list=
              +-AnalyticFunctionGroup
                +-order_by=
                | +-WindowOrdering
                |   +-order_by_item_list=
                |     +-OrderByItem
                |       +-column_ref=
                |         +-ColumnRef(type=INT64, column=$orderby.id#5)
                +-analytic_function_list=
                  +-$analytic1#4 :=
                    +-AnalyticFunctionCall(ZetaSQL:first_value(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>) -> GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>)
                      +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$graph_table.a#2)
                      +-window_frame=
                        +-WindowFrame(frame_unit=RANGE)
                          +-start_expr=
                          | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                          +-end_expr=
                            +-WindowFrameExpr(boundary_type=CURRENT ROW)
==

[language_features=V_1_4_SQL_GRAPH,NAMED_ARGUMENTS,TEMPLATED_SQL_FUNCTION_RESOLVE_WITH_TYPED_ARGS,TABLE_VALUED_FUNCTIONS{{|,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT}}]
[no_run_unparser]
select x.id from tvf_templated_select_any_scalar_arg((select a from graph_table(
  aml
  match (a:Person)
  columns(a)
)))
--
ALTERNATION GROUP: <empty>
--
ERROR: Graph element typed expression is not allowed here [at 4:11]
  columns(a)
          ^
--
ALTERNATION GROUP: ,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT
--
QueryStmt
+-output_column_list=
| +-$query.id#4 AS id [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.id#4]
    +-expr_list=
    | +-id#4 :=
    |   +-GraphGetElementProperty
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=tvf_templated_select_any_scalar_arg.x#3)
    |     +-property=id(INT64)
    +-input_scan=
      +-TVFScan
        +-column_list=[tvf_templated_select_any_scalar_arg.x#3]
        +-tvf=tvf_templated_select_any_scalar_arg((ANY TYPE) -> ANY TABLE)
        +-signature=(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>) -> TABLE<x GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>>
        +-argument_list=
        | +-FunctionArgument
        |   +-expr=
        |     +-SubqueryExpr
        |       +-type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>
        |       +-subquery_type=SCALAR
        |       +-subquery=
        |         +-ProjectScan
        |           +-column_list=[$graph_table.a#2]
        |           +-input_scan=
        |             +-GraphTableScan
        |               +-column_list=[$graph_table.a#2]
        |               +-property_graph=sample_catalog.aml
        |               +-input_scan=
        |               | +-GraphScan
        |               |   +-column_list=[$element_table.a#1]
        |               |   +-input_scan_list=
        |               |     +-GraphPathScan
        |               |       +-column_list=[$element_table.a#1]
        |               |       +-input_scan_list=
        |               |       | +-GraphNodeScan
        |               |       |   +-column_list=[$element_table.a#1]
        |               |       |   +-label_expr=
        |               |       |   | +-GraphLabel(label=sample_catalog.aml.Person)
        |               |       |   +-target_element_table_list=[sample_catalog.aml.Person]
        |               |       +-head=$element_table.a#1
        |               |       +-tail=$element_table.a#1
        |               +-shape_expr_list=
        |                 +-a#2 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#1)
        +-column_index_list=[0]

With Templated SQL TVF signature:
  tvf_templated_select_any_scalar_arg(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>) -> TABLE<x GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>>
containing resolved templated query:
QueryStmt
+-output_column_list=
| +-$query.x#1 AS x [GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.x#1]
    +-expr_list=
    | +-x#1 := ArgumentRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, name="x")
    +-input_scan=
      +-SingleRowScan
==

[language_features=V_1_4_SQL_GRAPH,V_1_4_SQL_GRAPH_ADVANCED_QUERY,V_1_4_SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION,V_1_3_INLINE_LAMBDA_ARGUMENT,V_1_1_CAST_DIFFERENT_ARRAY_TYPES,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT]
select ARRAY_LENGTH(arr) from graph_table(
  aml
  MATCH ANY ((x IS Person)-[y]->(z IS Account|Person)){3}
  COLUMNS(ARRAY_CONCAT(x, z) AS arr)
)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#10 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#10]
    +-expr_list=
    | +-$col1#10 :=
    |   +-FunctionCall(ZetaSQL:array_length(ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>>) -> INT64)
    |     +-ColumnRef(type=ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>>, column=$graph_table.arr#9)
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.arr#9]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$path_scan.$head#7, $element_table.x#4, $element_table.z#6, $path_scan.$tail#8]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$path_scan.$head#7, $element_table.x#4, $element_table.z#6, $path_scan.$tail#8]
        |       +-input_scan_list=
        |       | +-GraphPathScan
        |       |   +-column_list=[$path_scan.$head#7, $element_table.x#4, $element_table.z#6, $path_scan.$tail#8]
        |       |   +-input_scan_list=
        |       |   | +-GraphNodeScan
        |       |   | | +-column_list=[$element_table.x#1]
        |       |   | | +-label_expr=
        |       |   | | | +-GraphLabel(label=sample_catalog.aml.Person)
        |       |   | | +-target_element_table_list=[sample_catalog.aml.Person]
        |       |   | +-GraphEdgeScan
        |       |   | | +-column_list=[$element_table.y#2]
        |       |   | | +-label_expr=
        |       |   | | | +-GraphLabelNaryExpr
        |       |   | | |   +-op=OR
        |       |   | | |   +-operand_list=
        |       |   | | |     +-GraphWildCardLabel
        |       |   | | |     +-GraphLabelNaryExpr
        |       |   | | |       +-op=NOT
        |       |   | | |       +-operand_list=
        |       |   | | |         +-GraphWildCardLabel
        |       |   | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       |   | | +-orientation=RIGHT
        |       |   | +-GraphNodeScan
        |       |   |   +-column_list=[$element_table.z#3]
        |       |   |   +-label_expr=
        |       |   |   | +-GraphLabelNaryExpr
        |       |   |   |   +-op=OR
        |       |   |   |   +-operand_list=
        |       |   |   |     +-GraphLabel(label=sample_catalog.aml.Account)
        |       |   |   |     +-GraphLabel(label=sample_catalog.aml.Person)
        |       |   |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person]
        |       |   +-head=$path_scan.$head#7
        |       |   +-tail=$path_scan.$tail#8
        |       |   +-quantifier=
        |       |   | +-GraphPathPatternQuantifier
        |       |   |   +-lower_bound=
        |       |   |   | +-Literal(type=INT64, value=3)
        |       |   |   +-upper_bound=
        |       |   |     +-Literal(type=INT64, value=3)
        |       |   +-group_variable_list=
        |       |     +-GraphMakeArrayVariable(element=$element_table.x#1, array=$element_table.x#4)
        |       |     +-GraphMakeArrayVariable(element=$element_table.y#2, array=$element_table.y#5)
        |       |     +-GraphMakeArrayVariable(element=$element_table.z#3, array=$element_table.z#6)
        |       +-head=$path_scan.$head#7
        |       +-tail=$path_scan.$tail#8
        |       +-search_prefix=
        |         +-GraphPathSearchPrefix(type=ANY)
        +-shape_expr_list=
          +-arr#9 :=
            +-FunctionCall(ZetaSQL:array_concat(ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>>, repeated(1) ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>>) -> ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>>)
              +-Cast(ARRAY<GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>> -> ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>>)
              | +-ColumnRef(type=ARRAY<GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>>, column=$element_table.x#4)
              +-ColumnRef(type=ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>>, column=$element_table.z#6)

[UNPARSED_SQL]
SELECT
  ARRAY_LENGTH(graphtablescan_6.a_5) AS a_7
FROM
  (
    SELECT
      aml_1.a_5 AS a_5
    FROM
      GRAPH_TABLE(
        aml
        MATCH
          ANY (
            (a_2
            IS Person)
            -[a_3
            IS (% | ! %)]->
            (a_4
            IS (Account | Person))
          ) { 3, 3 }
        COLUMNS(
          ARRAY_CONCAT(a_2, a_4) AS a_5
        )
      ) AS aml_1
  ) AS graphtablescan_6;
==

[language_features=V_1_4_SQL_GRAPH,V_1_4_SQL_GRAPH_ADVANCED_QUERY,V_1_4_SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION,V_1_3_INLINE_LAMBDA_ARGUMENT,V_1_1_CAST_DIFFERENT_ARRAY_TYPES,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT]
select * from graph_table(
  aml
  MATCH ANY ((x IS Person)-[y]->(z IS Account|Person)){3}
  COLUMNS(ARRAY_TRANSFORM(ARRAY_CONCAT(x, z), x -> x.name) AS arr)
)
--

QueryStmt
+-output_column_list=
| +-$graph_table.arr#10 AS arr [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.arr#10]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.arr#10]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$path_scan.$head#7, $element_table.x#4, $element_table.z#6, $path_scan.$tail#8]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$path_scan.$head#7, $element_table.x#4, $element_table.z#6, $path_scan.$tail#8]
        |       +-input_scan_list=
        |       | +-GraphPathScan
        |       |   +-column_list=[$path_scan.$head#7, $element_table.x#4, $element_table.z#6, $path_scan.$tail#8]
        |       |   +-input_scan_list=
        |       |   | +-GraphNodeScan
        |       |   | | +-column_list=[$element_table.x#1]
        |       |   | | +-label_expr=
        |       |   | | | +-GraphLabel(label=sample_catalog.aml.Person)
        |       |   | | +-target_element_table_list=[sample_catalog.aml.Person]
        |       |   | +-GraphEdgeScan
        |       |   | | +-column_list=[$element_table.y#2]
        |       |   | | +-label_expr=
        |       |   | | | +-GraphLabelNaryExpr
        |       |   | | |   +-op=OR
        |       |   | | |   +-operand_list=
        |       |   | | |     +-GraphWildCardLabel
        |       |   | | |     +-GraphLabelNaryExpr
        |       |   | | |       +-op=NOT
        |       |   | | |       +-operand_list=
        |       |   | | |         +-GraphWildCardLabel
        |       |   | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       |   | | +-orientation=RIGHT
        |       |   | +-GraphNodeScan
        |       |   |   +-column_list=[$element_table.z#3]
        |       |   |   +-label_expr=
        |       |   |   | +-GraphLabelNaryExpr
        |       |   |   |   +-op=OR
        |       |   |   |   +-operand_list=
        |       |   |   |     +-GraphLabel(label=sample_catalog.aml.Account)
        |       |   |   |     +-GraphLabel(label=sample_catalog.aml.Person)
        |       |   |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person]
        |       |   +-head=$path_scan.$head#7
        |       |   +-tail=$path_scan.$tail#8
        |       |   +-quantifier=
        |       |   | +-GraphPathPatternQuantifier
        |       |   |   +-lower_bound=
        |       |   |   | +-Literal(type=INT64, value=3)
        |       |   |   +-upper_bound=
        |       |   |     +-Literal(type=INT64, value=3)
        |       |   +-group_variable_list=
        |       |     +-GraphMakeArrayVariable(element=$element_table.x#1, array=$element_table.x#4)
        |       |     +-GraphMakeArrayVariable(element=$element_table.y#2, array=$element_table.y#5)
        |       |     +-GraphMakeArrayVariable(element=$element_table.z#3, array=$element_table.z#6)
        |       +-head=$path_scan.$head#7
        |       +-tail=$path_scan.$tail#8
        |       +-search_prefix=
        |         +-GraphPathSearchPrefix(type=ANY)
        +-shape_expr_list=
          +-arr#10 :=
            +-FunctionCall(ZetaSQL:array_transform(ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>> array_to_transform, FUNCTION<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>->STRING> transformation) -> ARRAY<STRING>)
              +-FunctionArgument
              | +-expr=
              |   +-FunctionCall(ZetaSQL:array_concat(ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>>, repeated(1) ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>>) -> ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>>)
              |     +-Cast(ARRAY<GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>> -> ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>>)
              |     | +-ColumnRef(type=ARRAY<GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>>, column=$element_table.x#4)
              |     +-ColumnRef(type=ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>>, column=$element_table.z#6)
              +-FunctionArgument
                +-inline_lambda=
                  +-InlineLambda
                    +-argument_list=[$lambda_arg.x#9]
                    +-body=
                      +-GraphGetElementProperty
                        +-type=STRING
                        +-expr=
                        | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>, column=$lambda_arg.x#9)
                        +-property=name(STRING)

[UNPARSED_SQL]
SELECT
  aml_1.a_5 AS arr
FROM
  GRAPH_TABLE(
    aml
    MATCH
      ANY (
        (a_2
        IS Person)
        -[a_3
        IS (% | ! %)]->
        (a_4
        IS (Account | Person))
      ) { 3, 3 }
    COLUMNS(
      ARRAY_TRANSFORM(ARRAY_CONCAT(a_2, a_4), (a_6) -> a_6.name) AS a_5
    )
  ) AS aml_1;
==

# Repro test for b/355707672
[language_features=V_1_4_SQL_GRAPH,NAMED_ARGUMENTS,TEMPLATED_SQL_FUNCTION_RESOLVE_WITH_TYPED_ARGS,TABLE_VALUED_FUNCTIONS,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT,V_1_4_SQL_GRAPH_ADVANCED_QUERY]
select (select x from graph_table(aml match (n:Person) return x))
from tvf_templated_select_any_scalar_arg(1)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=tvf_templated_select_any_scalar_arg.x#1)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$graph_table.x#3]
    |         +-input_scan=
    |           +-GraphTableScan
    |             +-column_list=[$graph_table.x#3]
    |             +-property_graph=sample_catalog.aml
    |             +-input_scan=
    |               +-GraphLinearScan
    |                 +-column_list=[$graph_table.x#3]
    |                 +-scan_list=
    |                   +-GraphLinearScan
    |                     +-column_list=[$graph_table.x#3]
    |                     +-scan_list=
    |                       +-GraphScan
    |                       | +-column_list=[$element_table.n#2]
    |                       | +-input_scan_list=
    |                       | | +-GraphPathScan
    |                       | |   +-column_list=[$element_table.n#2]
    |                       | |   +-input_scan_list=
    |                       | |   | +-GraphNodeScan
    |                       | |   |   +-column_list=[$element_table.n#2]
    |                       | |   |   +-label_expr=
    |                       | |   |   | +-GraphLabel(label=sample_catalog.aml.Person)
    |                       | |   |   +-target_element_table_list=[sample_catalog.aml.Person]
    |                       | |   +-head=$element_table.n#2
    |                       | |   +-tail=$element_table.n#2
    |                       | +-input_scan=
    |                       |   +-SingleRowScan
    |                       +-ProjectScan
    |                         +-column_list=[$graph_table.x#3]
    |                         +-expr_list=
    |                         | +-x#3 := ColumnRef(type=INT64, column=tvf_templated_select_any_scalar_arg.x#1, is_correlated=TRUE)
    |                         +-input_scan=
    |                           +-GraphRefScan(column_list=[$element_table.n#2])
    +-input_scan=
      +-TVFScan
        +-column_list=[tvf_templated_select_any_scalar_arg.x#1]
        +-tvf=tvf_templated_select_any_scalar_arg((ANY TYPE) -> ANY TABLE)
        +-signature=(literal INT64) -> TABLE<x INT64>
        +-argument_list=
        | +-FunctionArgument
        |   +-expr=
        |     +-Literal(type=INT64, value=1)
        +-column_index_list=[0]

With Templated SQL TVF signature:
  tvf_templated_select_any_scalar_arg(literal INT64) -> TABLE<x INT64>
containing resolved templated query:
QueryStmt
+-output_column_list=
| +-$query.x#1 AS x [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.x#1]
    +-expr_list=
    | +-x#1 := ArgumentRef(type=INT64, name="x")
    +-input_scan=
      +-SingleRowScan

[UNPARSED_SQL]
SELECT
  (
    SELECT
      aml_3.a_5 AS a_5
    FROM
      GRAPH_TABLE(
        aml
        MATCH
          (a_4
          IS Person)
        RETURN
          tvfscan_1.x AS a_5
      ) AS aml_3
  ) AS a_2
FROM
  TVF_TEMPLATED_SELECT_ANY_SCALAR_ARG(1) AS tvfscan_1;
==

[language_features=V_1_4_SQL_GRAPH,V_1_4_SQL_GRAPH_PATH_TYPE,JSON_TYPE]
[no_run_unparser]
select * from graph_table(
  aml
  match p=(n) -[e]-> (m)
  columns (TO_JSON(p) as js_p)
)
--

QueryStmt
+-output_column_list=
| +-$graph_table.js_p#5 AS js_p [JSON]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.js_p#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.js_p#5]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.m#3, $graph_table.p#4]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.m#3, $graph_table.p#4]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.n#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.e#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.m#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       +-path=
        |       | +-ColumnHolder(column=$graph_table.p#4)
        |       +-head=$element_table.n#1
        |       +-tail=$element_table.m#3
        +-shape_expr_list=
          +-js_p#5 :=
            +-FunctionCall(ZetaSQL:to_json(PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, optional(1) BOOL stringify_wide_numbers) -> JSON)
              +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.p#4)
              +-Literal(type=BOOL, value=false)
==

[language_features=V_1_4_SQL_GRAPH,V_1_4_SQL_GRAPH_PATH_TYPE,JSON_TYPE,NAMED_ARGUMENTS]
[no_run_unparser]
select * from graph_table(
  aml
  match p=(n) -[e]-> (m)
  columns (TO_JSON(p, stringify_wide_numbers=>true) as js_p)
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.js_p#5 AS js_p [JSON]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.js_p#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.js_p#5]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.m#3, $graph_table.p#4]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.m#3, $graph_table.p#4]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.n#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.e#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.m#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       +-path=
        |       | +-ColumnHolder(column=$graph_table.p#4)
        |       +-head=$element_table.n#1
        |       +-tail=$element_table.m#3
        +-shape_expr_list=
          +-js_p#5 :=
            +-FunctionCall(ZetaSQL:to_json(PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, optional(1) BOOL stringify_wide_numbers) -> JSON)
              +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.p#4)
              +-Literal(type=BOOL, value=true)
==

[language_features=V_1_4_SQL_GRAPH{{|,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT}}]
select * from graph_table(
  aml
  match (a) -[e]-> (b)
  columns(a <= a as v)
)
--
ALTERNATION GROUP: <empty>
--
ERROR: Graph element typed expression is not allowed here [at 4:11]
  columns(a <= a as v)
          ^
--
ALTERNATION GROUP: ,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT
--
ERROR: Less than is not defined for arguments of type GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING> [at 4:11]
  columns(a <= a as v)
          ^
==

[language_features=V_1_4_SQL_GRAPH{{|,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT}}]
select * from graph_table(
  aml
  match (a) -[e]-> (b)
  columns(e <= e as v)
)
--
ALTERNATION GROUP: <empty>
--
ERROR: Graph element typed expression is not allowed here [at 4:11]
  columns(e <= e as v)
          ^
--
ALTERNATION GROUP: ,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT
--
ERROR: Less than is not defined for arguments of type GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64> [at 4:11]
  columns(e <= e as v)
          ^
==

[language_features=V_1_4_SQL_GRAPH,V_1_4_SQL_GRAPH_PATH_TYPE]
select * from graph_table(
  aml
  match p=(n) -[e]-> (m)
  columns (p <= p as v)
)
--
ERROR: Less than is not defined for arguments of type PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>> [at 4:12]
  columns (p <= p as v)
           ^
