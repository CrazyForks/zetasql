# Success tests for MEASURE type. Cases which are supposed to be success should
# be here (even if they currently error), while cases that are supposed to be
# errors should be in measures_errors.test (even if they currently succeed).
#
# TODO: b/350555383 - Java support requires the ability to serialize and
# deserialize the measure expression, which is currently stored as string in the
# ExpressionAttributesProto on columns. The Java serialization/deserialization
# code needs to be updated to be aware of this field.
[default no_java]
[default language_features=ENABLE_MEASURES,MULTILEVEL_AGGREGATION,GROUP_BY_STRUCT]
[default enabled_ast_rewrites=DEFAULTS,+MEASURE_TYPE]
[default sql_builder_target_syntax_mode=standard]
[default show_sqlbuilder_output]

# AGG(MEASURE<T>) -> T
SELECT
  key,
  AGG(measure_sum_quantity)
FROM MeasureTable_SingleKey GROUP BY key;
--
QueryStmt
+-output_column_list=
| +-$groupby.key#16 AS key [INT64]
| +-$aggregate.$agg1#15 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.key#16, $aggregate.$agg1#15]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.key#16, $aggregate.$agg1#15]
        +-input_scan=
        | +-TableScan(column_list=MeasureTable_SingleKey.[key#1, measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[0, 8])
        +-group_by_list=
        | +-key#16 := ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
        +-aggregate_list=
          +-$agg1#15 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_quantity#9)

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_singlekey_3.a_1 AS key,
  AGG(measuretable_singlekey_3.a_2) AS a_5
FROM
  (
    SELECT
      MeasureTable_SingleKey.key AS a_1,
      MeasureTable_SingleKey.measure_sum_quantity AS a_2
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_3
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.key#16 AS key [INT64]
| +-$aggregate.$agg1#15 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.key#16, $aggregate.$agg1#15]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.key#16, $aggregate.$agg1#15]
        +-expr_list=
        | +-$agg1#15 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#19)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.key#16, $aggregate.constituent_aggregate_1#19]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_SingleKey.[key#1, quantity#17, measure_sum_quantity#9, struct_for_measure_measure_sum_quantity#18]
            |   +-expr_list=
            |   | +-struct_for_measure_measure_sum_quantity#18 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<quantity INT64>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#17)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_SingleKey.[key#1, quantity#17, measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[0, 2, 8])
            +-group_by_list=
            | +-key#16 := ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
            +-aggregate_list=
              +-constituent_aggregate_1#19 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#20)
                  +-group_by_list=
                  | +-grain_lock_key#21 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_sum_quantity#18)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#20 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-GetStructField
                          +-type=INT64
                          +-expr=
                          | +-GetStructField
                          |   +-type=STRUCT<quantity INT64>
                          |   +-expr=
                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_sum_quantity#18)
                          |   +-field_idx=0
                          +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_9.a_7 AS key,
  aggregatescan_9.a_8 AS a_10
FROM
  (
    SELECT
      projectscan_6.a_1 AS a_7,
      SUM(ANY_VALUE(projectscan_6.a_5.referenced_columns.quantity)
        GROUP BY projectscan_6.a_5.key_columns) AS a_8
    FROM
      (
        SELECT
          measuretable_singlekey_4.a_1 AS a_1,
          measuretable_singlekey_4.a_2 AS a_2,
          measuretable_singlekey_4.a_3 AS a_3,
          STRUCT< referenced_columns STRUCT< quantity INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< quantity INT64 >
            (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.quantity AS a_2,
              MeasureTable_SingleKey.measure_sum_quantity AS a_3
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_4
      ) AS projectscan_6
    GROUP BY 1
  ) AS aggregatescan_9;
==

# Measure-typed columns can propoagate through WITH clauses (i.e. measure
# column renames are handled correctly)
WITH t AS (
  SELECT measure_sum_quantity AS renamed_measure FROM MeasureTable_SingleKey
) SELECT AGG(renamed_measure) FROM (SELECT * FROM t)
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#16 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$aggregate.$agg1#16]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[MeasureTable_SingleKey.measure_sum_quantity#9]
    |       +-input_scan=
    |         +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[8])
    +-query=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#16]
        +-input_scan=
          +-AggregateScan
            +-column_list=[$aggregate.$agg1#16]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[t.renamed_measure#15]
            |   +-input_scan=
            |     +-WithRefScan(column_list=[t.renamed_measure#15], with_query_name="t")
            +-aggregate_list=
              +-$agg1#16 :=
                +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
                  +-ColumnRef(type=MEASURE<INT64>, column=t.renamed_measure#15)

[SQLBUILDER_OUTPUT]
WITH
  t AS (
    SELECT
      MeasureTable_SingleKey.measure_sum_quantity AS a_1
    FROM
      MeasureTable_SingleKey
  )
SELECT
  AGG(projectscan_3.a_1) AS a_4
FROM
  (
    SELECT
      withrefscan_2.a_1 AS a_1
    FROM
      t AS withrefscan_2
  ) AS projectscan_3;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#16 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$aggregate.$agg1#16]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=MeasureTable_SingleKey.[measure_sum_quantity#9, struct_for_measure_measure_sum_quantity#19]
    |       +-input_scan=
    |         +-ProjectScan
    |           +-column_list=MeasureTable_SingleKey.[key#17, quantity#18, measure_sum_quantity#9, struct_for_measure_measure_sum_quantity#19]
    |           +-expr_list=
    |           | +-struct_for_measure_measure_sum_quantity#19 :=
    |           |   +-MakeStruct
    |           |     +-type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>
    |           |     +-field_list=
    |           |       +-MakeStruct
    |           |       | +-type=STRUCT<quantity INT64>
    |           |       | +-field_list=
    |           |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#18)
    |           |       +-MakeStruct
    |           |         +-type=STRUCT<key INT64>
    |           |         +-field_list=
    |           |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#17)
    |           +-input_scan=
    |             +-TableScan(column_list=MeasureTable_SingleKey.[key#17, quantity#18, measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[0, 2, 8])
    +-query=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#16]
        +-input_scan=
          +-ProjectScan
            +-column_list=[$aggregate.$agg1#16]
            +-expr_list=
            | +-$agg1#16 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#21)
            +-input_scan=
              +-AggregateScan
                +-column_list=[$aggregate.constituent_aggregate_1#21]
                +-input_scan=
                | +-ProjectScan
                |   +-column_list=t.[renamed_measure#15, struct_for_measure_renamed_measure#20]
                |   +-input_scan=
                |     +-WithRefScan(column_list=t.[renamed_measure#15, struct_for_measure_renamed_measure#20], with_query_name="t")
                +-aggregate_list=
                  +-constituent_aggregate_1#21 :=
                    +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                      +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#22)
                      +-group_by_list=
                      | +-grain_lock_key#23 :=
                      |   +-GetStructField
                      |     +-type=STRUCT<key INT64>
                      |     +-expr=
                      |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=t.struct_for_measure_renamed_measure#20)
                      |     +-field_idx=1
                      +-group_by_aggregate_list=
                        +-$any_value_grain_lock_0#22 :=
                          +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                            +-GetStructField
                              +-type=INT64
                              +-expr=
                              | +-GetStructField
                              |   +-type=STRUCT<quantity INT64>
                              |   +-expr=
                              |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=t.struct_for_measure_renamed_measure#20)
                              |   +-field_idx=0
                              +-field_idx=0
[SQLBUILDER_OUTPUT]
WITH
  t AS (
    SELECT
      projectscan_6.a_3 AS a_3,
      projectscan_6.a_5 AS a_5
    FROM
      (
        SELECT
          measuretable_singlekey_4.a_1 AS a_1,
          measuretable_singlekey_4.a_2 AS a_2,
          measuretable_singlekey_4.a_3 AS a_3,
          STRUCT< referenced_columns STRUCT< quantity INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< quantity INT64 >
            (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.quantity AS a_2,
              MeasureTable_SingleKey.measure_sum_quantity AS a_3
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_4
      ) AS projectscan_6
  )
SELECT
  aggregatescan_10.a_9 AS a_11
FROM
  (
    SELECT
      SUM(ANY_VALUE(projectscan_8.a_5.referenced_columns.quantity)
        GROUP BY projectscan_8.a_5.key_columns) AS a_9
    FROM
      (
        SELECT
          withrefscan_7.a_3 AS a_3,
          withrefscan_7.a_5 AS a_5
        FROM
          t AS withrefscan_7
      ) AS projectscan_8
  ) AS aggregatescan_10;
==

# Measure-typed columns can propoagate through WITH clauses (i.e. measure
# column renames are handled correctly)
WITH t1 AS (
  SELECT measure_sum_quantity AS rename_1 FROM MeasureTable_SingleKey
), t2 AS (
  SELECT rename_1 AS rename_2 FROM t1
) SELECT AGG(rename_2) FROM (SELECT * FROM t2)
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#17 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$aggregate.$agg1#17]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="t1"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=[MeasureTable_SingleKey.measure_sum_quantity#9]
    | |     +-input_scan=
    | |       +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[8])
    | +-WithEntry
    |   +-with_query_name="t2"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[t1.rename_1#15]
    |       +-input_scan=
    |         +-WithRefScan(column_list=[t1.rename_1#15], with_query_name="t1")
    +-query=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#17]
        +-input_scan=
          +-AggregateScan
            +-column_list=[$aggregate.$agg1#17]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[t2.rename_2#16]
            |   +-input_scan=
            |     +-WithRefScan(column_list=[t2.rename_2#16], with_query_name="t2")
            +-aggregate_list=
              +-$agg1#17 :=
                +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
                  +-ColumnRef(type=MEASURE<INT64>, column=t2.rename_2#16)

[SQLBUILDER_OUTPUT]
WITH
  t1 AS (
    SELECT
      MeasureTable_SingleKey.measure_sum_quantity AS a_1
    FROM
      MeasureTable_SingleKey
  ),
  t2 AS (
    SELECT
      withrefscan_2.a_1 AS a_1
    FROM
      t1 AS withrefscan_2
  )
SELECT
  AGG(projectscan_4.a_1) AS a_5
FROM
  (
    SELECT
      withrefscan_3.a_1 AS a_1
    FROM
      t2 AS withrefscan_3
  ) AS projectscan_4;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#17 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$aggregate.$agg1#17]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="t1"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=MeasureTable_SingleKey.[measure_sum_quantity#9, struct_for_measure_measure_sum_quantity#20]
    | |     +-input_scan=
    | |       +-ProjectScan
    | |         +-column_list=MeasureTable_SingleKey.[key#18, quantity#19, measure_sum_quantity#9, struct_for_measure_measure_sum_quantity#20]
    | |         +-expr_list=
    | |         | +-struct_for_measure_measure_sum_quantity#20 :=
    | |         |   +-MakeStruct
    | |         |     +-type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>
    | |         |     +-field_list=
    | |         |       +-MakeStruct
    | |         |       | +-type=STRUCT<quantity INT64>
    | |         |       | +-field_list=
    | |         |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#19)
    | |         |       +-MakeStruct
    | |         |         +-type=STRUCT<key INT64>
    | |         |         +-field_list=
    | |         |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#18)
    | |         +-input_scan=
    | |           +-TableScan(column_list=MeasureTable_SingleKey.[key#18, quantity#19, measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[0, 2, 8])
    | +-WithEntry
    |   +-with_query_name="t2"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=t1.[rename_1#15, struct_for_measure_rename_1#21]
    |       +-input_scan=
    |         +-WithRefScan(column_list=t1.[rename_1#15, struct_for_measure_rename_1#21], with_query_name="t1")
    +-query=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#17]
        +-input_scan=
          +-ProjectScan
            +-column_list=[$aggregate.$agg1#17]
            +-expr_list=
            | +-$agg1#17 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#23)
            +-input_scan=
              +-AggregateScan
                +-column_list=[$aggregate.constituent_aggregate_1#23]
                +-input_scan=
                | +-ProjectScan
                |   +-column_list=t2.[rename_2#16, struct_for_measure_rename_2#22]
                |   +-input_scan=
                |     +-WithRefScan(column_list=t2.[rename_2#16, struct_for_measure_rename_2#22], with_query_name="t2")
                +-aggregate_list=
                  +-constituent_aggregate_1#23 :=
                    +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                      +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#24)
                      +-group_by_list=
                      | +-grain_lock_key#25 :=
                      |   +-GetStructField
                      |     +-type=STRUCT<key INT64>
                      |     +-expr=
                      |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=t2.struct_for_measure_rename_2#22)
                      |     +-field_idx=1
                      +-group_by_aggregate_list=
                        +-$any_value_grain_lock_0#24 :=
                          +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                            +-GetStructField
                              +-type=INT64
                              +-expr=
                              | +-GetStructField
                              |   +-type=STRUCT<quantity INT64>
                              |   +-expr=
                              |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=t2.struct_for_measure_rename_2#22)
                              |   +-field_idx=0
                              +-field_idx=0
[SQLBUILDER_OUTPUT]
WITH
  t1 AS (
    SELECT
      projectscan_6.a_3 AS a_3,
      projectscan_6.a_5 AS a_5
    FROM
      (
        SELECT
          measuretable_singlekey_4.a_1 AS a_1,
          measuretable_singlekey_4.a_2 AS a_2,
          measuretable_singlekey_4.a_3 AS a_3,
          STRUCT< referenced_columns STRUCT< quantity INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< quantity INT64 >
            (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.quantity AS a_2,
              MeasureTable_SingleKey.measure_sum_quantity AS a_3
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_4
      ) AS projectscan_6
  ),
  t2 AS (
    SELECT
      withrefscan_7.a_3 AS a_3,
      withrefscan_7.a_5 AS a_5
    FROM
      t1 AS withrefscan_7
  )
SELECT
  aggregatescan_11.a_10 AS a_12
FROM
  (
    SELECT
      SUM(ANY_VALUE(projectscan_9.a_5.referenced_columns.quantity)
        GROUP BY projectscan_9.a_5.key_columns) AS a_10
    FROM
      (
        SELECT
          withrefscan_8.a_3 AS a_3,
          withrefscan_8.a_5 AS a_5
        FROM
          t2 AS withrefscan_8
      ) AS projectscan_9
  ) AS aggregatescan_11;
==

# Measures can be described by Pipe STATIC_DESCRIBE
[language_features=ENABLE_MEASURES,PIPES,PIPE_STATIC_DESCRIBE]
FROM MeasureTable_SingleKey
|> STATIC_DESCRIBE
|> SELECT key
--
QueryStmt
+-output_column_list=
| +-MeasureTable_SingleKey.key#1 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[MeasureTable_SingleKey.key#1]
    +-input_scan=
      +-StaticDescribeScan
        +-column_list=[MeasureTable_SingleKey.key#1]
        +-describe_text=
        |   """
        |   NameList:
        |     key INT64 MeasureTable_SingleKey.key#1
        |     country STRING MeasureTable_SingleKey.country#2
        |     quantity INT64 MeasureTable_SingleKey.quantity#3
        |     price INT64 MeasureTable_SingleKey.price#4
        |     measure_count_star MEASURE<INT64> MeasureTable_SingleKey.measure_count_star#5
        |     measure_count_star_per_key MEASURE<INT64> MeasureTable_SingleKey.measure_count_star_per_key#6
        |     measure_count_distinct_key MEASURE<INT64> MeasureTable_SingleKey.measure_count_distinct_key#7
        |     measure_count_key_per_key MEASURE<INT64> MeasureTable_SingleKey.measure_count_key_per_key#8
        |     measure_sum_quantity MEASURE<INT64> MeasureTable_SingleKey.measure_sum_quantity#9
        |     measure_sum_price MEASURE<INT64> MeasureTable_SingleKey.measure_sum_price#10
        |     measure_sum_price_times_quantity MEASURE<INT64> MeasureTable_SingleKey.measure_sum_price_times_quantity#11
        |     measure_ratio_price_to_quantity MEASURE<DOUBLE> MeasureTable_SingleKey.measure_ratio_price_to_quantity#12
        |     measure_ratio_price_to_quantity_per_key MEASURE<DOUBLE> MeasureTable_SingleKey.measure_ratio_price_to_quantity_per_key#13
        |     measure_complex_ratio_metric MEASURE<DOUBLE> MeasureTable_SingleKey.measure_complex_ratio_metric#14
        |   NameScope:
        |     Names:
        |       country -> STRING (MeasureTable_SingleKey.country#2) (implicit)
        |       key -> INT64 (MeasureTable_SingleKey.key#1) (implicit)
        |       measure_complex_ratio_metric -> MEASURE<DOUBLE> (MeasureTable_SingleKey.measure_complex_ratio_metric#14) (implicit)
        |       measure_count_distinct_key -> MEASURE<INT64> (MeasureTable_SingleKey.measure_count_distinct_key#7) (implicit)
        |       measure_count_key_per_key -> MEASURE<INT64> (MeasureTable_SingleKey.measure_count_key_per_key#8) (implicit)
        |       measure_count_star -> MEASURE<INT64> (MeasureTable_SingleKey.measure_count_star#5) (implicit)
        |       measure_count_star_per_key -> MEASURE<INT64> (MeasureTable_SingleKey.measure_count_star_per_key#6) (implicit)
        |       measure_ratio_price_to_quantity -> MEASURE<DOUBLE> (MeasureTable_SingleKey.measure_ratio_price_to_quantity#12) (implicit)
        |       measure_ratio_price_to_quantity_per_key -> MEASURE<DOUBLE> (MeasureTable_SingleKey.measure_ratio_price_to_quantity_per_key#13) (implicit)
        |       measure_sum_price -> MEASURE<INT64> (MeasureTable_SingleKey.measure_sum_price#10) (implicit)
        |       measure_sum_price_times_quantity -> MEASURE<INT64> (MeasureTable_SingleKey.measure_sum_price_times_quantity#11) (implicit)
        |       measure_sum_quantity -> MEASURE<INT64> (MeasureTable_SingleKey.measure_sum_quantity#9) (implicit)
        |       price -> INT64 (MeasureTable_SingleKey.price#4) (implicit)
        |       quantity -> INT64 (MeasureTable_SingleKey.quantity#3) (implicit)
        |     Range variables:
        |       MeasureTable_SingleKey -> RANGE_VARIABLE<key,country,quantity,price,measure_count_star,measure_count_star_per_key,measure_count_distinct_key,measure_count_key_per_key,measure_sum_quantity,measure_sum_price,measure_sum_price_times_quantity,measure_ratio_price_to_quantity,measure_ratio_price_to_quantity_per_key,measure_complex_ratio_metric>
        |   """
        +-input_scan=
          +-TableScan(column_list=[MeasureTable_SingleKey.key#1], table=MeasureTable_SingleKey, column_index_list=[0])

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_singlekey_2.a_1 AS key
FROM
  (
    SELECT
      MeasureTable_SingleKey.key AS a_1
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_2;
==

SELECT
  country,
  AGG(measure_count_key_per_key)
FROM MeasureTable_SingleKey
GROUP BY country
--
QueryStmt
+-output_column_list=
| +-$groupby.country#16 AS country [STRING]
| +-$aggregate.$agg1#15 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
        +-input_scan=
        | +-TableScan(column_list=MeasureTable_SingleKey.[country#2, measure_count_key_per_key#8], table=MeasureTable_SingleKey, column_index_list=[1, 7])
        +-group_by_list=
        | +-country#16 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
        +-aggregate_list=
          +-$agg1#15 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_count_key_per_key#8)

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_singlekey_3.a_1 AS country,
  AGG(measuretable_singlekey_3.a_2) AS a_5
FROM
  (
    SELECT
      MeasureTable_SingleKey.country AS a_1,
      MeasureTable_SingleKey.measure_count_key_per_key AS a_2
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_3
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.country#16 AS country [STRING]
| +-$aggregate.$agg1#15 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
        +-expr_list=
        | +-$agg1#15 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#20)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.country#16, $aggregate.constituent_aggregate_1#20]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_SingleKey.[key#17, country#2, measure_count_key_per_key#8, struct_for_measure_measure_count_key_per_key#18]
            |   +-expr_list=
            |   | +-struct_for_measure_measure_count_key_per_key#18 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<key INT64>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<key INT64>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#17)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#17)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_SingleKey.[key#17, country#2, measure_count_key_per_key#8], table=MeasureTable_SingleKey, column_index_list=[0, 1, 7])
            +-group_by_list=
            | +-country#16 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
            +-aggregate_list=
              +-constituent_aggregate_1#20 :=
                +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
                  +-Literal(type=INT64, value=1)
                  +-group_by_list=
                    +-$groupbymod#19 :=
                      +-GetStructField
                        +-type=INT64
                        +-expr=
                        | +-GetStructField
                        |   +-type=STRUCT<key INT64>
                        |   +-expr=
                        |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_count_key_per_key#18)
                        |   +-field_idx=0
                        +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_9.a_7 AS country,
  aggregatescan_9.a_8 AS a_10
FROM
  (
    SELECT
      projectscan_6.a_2 AS a_7,
      COUNT(1
        GROUP BY projectscan_6.a_5.referenced_columns.key) AS a_8
    FROM
      (
        SELECT
          measuretable_singlekey_4.a_1 AS a_1,
          measuretable_singlekey_4.a_2 AS a_2,
          measuretable_singlekey_4.a_3 AS a_3,
          STRUCT< referenced_columns STRUCT< key INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< key INT64 >
            (measuretable_singlekey_4.a_1), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.country AS a_2,
              MeasureTable_SingleKey.measure_count_key_per_key AS a_3
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_4
      ) AS projectscan_6
    GROUP BY 1
  ) AS aggregatescan_9;
==

SELECT
  country,
  AGG(measure_sum_price_times_quantity)
FROM MeasureTable_SingleKey
GROUP BY country
--
QueryStmt
+-output_column_list=
| +-$groupby.country#16 AS country [STRING]
| +-$aggregate.$agg1#15 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
        +-input_scan=
        | +-TableScan(column_list=MeasureTable_SingleKey.[country#2, measure_sum_price_times_quantity#11], table=MeasureTable_SingleKey, column_index_list=[1, 10])
        +-group_by_list=
        | +-country#16 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
        +-aggregate_list=
          +-$agg1#15 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price_times_quantity#11)

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_singlekey_3.a_1 AS country,
  AGG(measuretable_singlekey_3.a_2) AS a_5
FROM
  (
    SELECT
      MeasureTable_SingleKey.country AS a_1,
      MeasureTable_SingleKey.measure_sum_price_times_quantity AS a_2
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_3
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.country#16 AS country [STRING]
| +-$aggregate.$agg1#15 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
        +-expr_list=
        | +-$agg1#15 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#21)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.country#16, $aggregate.constituent_aggregate_1#21]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_SingleKey.[key#17, country#2, quantity#19, price#18, measure_sum_price_times_quantity#11, struct_for_measure_measure_sum_price_times_quantity#20]
            |   +-expr_list=
            |   | +-struct_for_measure_measure_sum_price_times_quantity#20 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<price INT64, quantity INT64>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#18)
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#19)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#17)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_SingleKey.[key#17, country#2, quantity#19, price#18, measure_sum_price_times_quantity#11], table=MeasureTable_SingleKey, column_index_list=[0, 1, 2, 3, 10])
            +-group_by_list=
            | +-country#16 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
            +-aggregate_list=
              +-constituent_aggregate_1#21 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#22)
                  +-group_by_list=
                  | +-grain_lock_key#23 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_sum_price_times_quantity#20)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#22 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-FunctionCall(ZetaSQL:$multiply(INT64, INT64) -> INT64)
                          +-GetStructField
                          | +-type=INT64
                          | +-expr=
                          | | +-GetStructField
                          | |   +-type=STRUCT<price INT64, quantity INT64>
                          | |   +-expr=
                          | |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_sum_price_times_quantity#20)
                          | |   +-field_idx=0
                          | +-field_idx=0
                          +-GetStructField
                            +-type=INT64
                            +-expr=
                            | +-GetStructField
                            |   +-type=STRUCT<price INT64, quantity INT64>
                            |   +-expr=
                            |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_sum_price_times_quantity#20)
                            |   +-field_idx=0
                            +-field_idx=1
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_11.a_9 AS country,
  aggregatescan_11.a_10 AS a_12
FROM
  (
    SELECT
      projectscan_8.a_2 AS a_9,
      SUM(ANY_VALUE((projectscan_8.a_7.referenced_columns.price) * (projectscan_8.a_7.referenced_columns.quantity))
        GROUP BY projectscan_8.a_7.key_columns) AS a_10
    FROM
      (
        SELECT
          measuretable_singlekey_6.a_1 AS a_1,
          measuretable_singlekey_6.a_2 AS a_2,
          measuretable_singlekey_6.a_3 AS a_3,
          measuretable_singlekey_6.a_4 AS a_4,
          measuretable_singlekey_6.a_5 AS a_5,
          STRUCT< referenced_columns STRUCT< price INT64, quantity INT64 >, key_columns STRUCT< key INT64 > > (STRUCT<
            price INT64, quantity INT64 > (measuretable_singlekey_6.a_4, measuretable_singlekey_6.a_3), STRUCT< key INT64 >
            (measuretable_singlekey_6.a_1)) AS a_7
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.country AS a_2,
              MeasureTable_SingleKey.quantity AS a_3,
              MeasureTable_SingleKey.price AS a_4,
              MeasureTable_SingleKey.measure_sum_price_times_quantity AS a_5
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_6
      ) AS projectscan_8
    GROUP BY 1
  ) AS aggregatescan_11;
==

SELECT
  country,
  AGG(measure_sum_price_times_quantity)
FROM MeasureTable_TwoKeys
GROUP BY country
--
QueryStmt
+-output_column_list=
| +-$groupby.country#15 AS country [STRING]
| +-$aggregate.$agg1#14 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#15, $aggregate.$agg1#14]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.country#15, $aggregate.$agg1#14]
        +-input_scan=
        | +-TableScan(column_list=MeasureTable_TwoKeys.[country#3, measure_sum_price_times_quantity#11], table=MeasureTable_TwoKeys, column_index_list=[2, 10])
        +-group_by_list=
        | +-country#15 := ColumnRef(type=STRING, column=MeasureTable_TwoKeys.country#3)
        +-aggregate_list=
          +-$agg1#14 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_TwoKeys.measure_sum_price_times_quantity#11)

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_twokeys_3.a_1 AS country,
  AGG(measuretable_twokeys_3.a_2) AS a_5
FROM
  (
    SELECT
      MeasureTable_TwoKeys.country AS a_1,
      MeasureTable_TwoKeys.measure_sum_price_times_quantity AS a_2
    FROM
      MeasureTable_TwoKeys
  ) AS measuretable_twokeys_3
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.country#15 AS country [STRING]
| +-$aggregate.$agg1#14 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#15, $aggregate.$agg1#14]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.country#15, $aggregate.$agg1#14]
        +-expr_list=
        | +-$agg1#14 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#21)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.country#15, $aggregate.constituent_aggregate_1#21]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_TwoKeys.[key1#16, key2#17, country#3, quantity#19, price#18, measure_sum_price_times_quantity#11, struct_for_measure_measure_sum_price_times_quantity#20]
            |   +-expr_list=
            |   | +-struct_for_measure_measure_sum_price_times_quantity#20 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key1 INT64, key2 INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<price INT64, quantity INT64>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_TwoKeys.price#18)
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_TwoKeys.quantity#19)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key1 INT64, key2 INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_TwoKeys.key1#16)
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_TwoKeys.key2#17)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_TwoKeys.[key1#16, key2#17, country#3, quantity#19, price#18, measure_sum_price_times_quantity#11], table=MeasureTable_TwoKeys, column_index_list=[0, 1, 2, 3, 4, 10])
            +-group_by_list=
            | +-country#15 := ColumnRef(type=STRING, column=MeasureTable_TwoKeys.country#3)
            +-aggregate_list=
              +-constituent_aggregate_1#21 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#22)
                  +-group_by_list=
                  | +-grain_lock_key#23 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key1 INT64, key2 INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key1 INT64, key2 INT64>>, column=MeasureTable_TwoKeys.struct_for_measure_measure_sum_price_times_quantity#20)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#22 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-FunctionCall(ZetaSQL:$multiply(INT64, INT64) -> INT64)
                          +-GetStructField
                          | +-type=INT64
                          | +-expr=
                          | | +-GetStructField
                          | |   +-type=STRUCT<price INT64, quantity INT64>
                          | |   +-expr=
                          | |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key1 INT64, key2 INT64>>, column=MeasureTable_TwoKeys.struct_for_measure_measure_sum_price_times_quantity#20)
                          | |   +-field_idx=0
                          | +-field_idx=0
                          +-GetStructField
                            +-type=INT64
                            +-expr=
                            | +-GetStructField
                            |   +-type=STRUCT<price INT64, quantity INT64>
                            |   +-expr=
                            |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key1 INT64, key2 INT64>>, column=MeasureTable_TwoKeys.struct_for_measure_measure_sum_price_times_quantity#20)
                            |   +-field_idx=0
                            +-field_idx=1
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_12.a_10 AS country,
  aggregatescan_12.a_11 AS a_13
FROM
  (
    SELECT
      projectscan_9.a_3 AS a_10,
      SUM(ANY_VALUE((projectscan_9.a_8.referenced_columns.price) * (projectscan_9.a_8.referenced_columns.quantity))
        GROUP BY projectscan_9.a_8.key_columns) AS a_11
    FROM
      (
        SELECT
          measuretable_twokeys_7.a_1 AS a_1,
          measuretable_twokeys_7.a_2 AS a_2,
          measuretable_twokeys_7.a_3 AS a_3,
          measuretable_twokeys_7.a_4 AS a_4,
          measuretable_twokeys_7.a_5 AS a_5,
          measuretable_twokeys_7.a_6 AS a_6,
          STRUCT< referenced_columns STRUCT< price INT64, quantity INT64 >, key_columns STRUCT< key1 INT64, key2 INT64 >
          > (STRUCT< price INT64, quantity INT64 > (measuretable_twokeys_7.a_5, measuretable_twokeys_7.a_4), STRUCT<
            key1 INT64, key2 INT64 > (measuretable_twokeys_7.a_1, measuretable_twokeys_7.a_2)) AS a_8
        FROM
          (
            SELECT
              MeasureTable_TwoKeys.key1 AS a_1,
              MeasureTable_TwoKeys.key2 AS a_2,
              MeasureTable_TwoKeys.country AS a_3,
              MeasureTable_TwoKeys.quantity AS a_4,
              MeasureTable_TwoKeys.price AS a_5,
              MeasureTable_TwoKeys.measure_sum_price_times_quantity AS a_6
            FROM
              MeasureTable_TwoKeys
          ) AS measuretable_twokeys_7
      ) AS projectscan_9
    GROUP BY 1
  ) AS aggregatescan_12;
==

# Ratio metric
SELECT
  country,
  AGG(measure_ratio_price_to_quantity)
FROM MeasureTable_SingleKey
GROUP BY country
--
QueryStmt
+-output_column_list=
| +-$groupby.country#16 AS country [STRING]
| +-$aggregate.$agg1#15 AS `$col2` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
        +-input_scan=
        | +-TableScan(column_list=MeasureTable_SingleKey.[country#2, measure_ratio_price_to_quantity#12], table=MeasureTable_SingleKey, column_index_list=[1, 11])
        +-group_by_list=
        | +-country#16 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
        +-aggregate_list=
          +-$agg1#15 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<DOUBLE>) -> DOUBLE)
              +-ColumnRef(type=MEASURE<DOUBLE>, column=MeasureTable_SingleKey.measure_ratio_price_to_quantity#12)

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_singlekey_3.a_1 AS country,
  AGG(measuretable_singlekey_3.a_2) AS a_5
FROM
  (
    SELECT
      MeasureTable_SingleKey.country AS a_1,
      MeasureTable_SingleKey.measure_ratio_price_to_quantity AS a_2
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_3
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.country#16 AS country [STRING]
| +-$aggregate.$agg1#15 AS `$col2` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
        +-expr_list=
        | +-$agg1#15 :=
        |   +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
        |     +-Cast(INT64 -> DOUBLE)
        |     | +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#21)
        |     +-Cast(INT64 -> DOUBLE)
        |       +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_2#22)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.country#16, $aggregate.constituent_aggregate_1#21, $aggregate.constituent_aggregate_2#22]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_SingleKey.[key#17, country#2, quantity#19, price#18, measure_ratio_price_to_quantity#12, struct_for_measure_measure_ratio_price_to_quantity#20]
            |   +-expr_list=
            |   | +-struct_for_measure_measure_ratio_price_to_quantity#20 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<price INT64, quantity INT64>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#18)
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#19)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#17)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_SingleKey.[key#17, country#2, quantity#19, price#18, measure_ratio_price_to_quantity#12], table=MeasureTable_SingleKey, column_index_list=[0, 1, 2, 3, 11])
            +-group_by_list=
            | +-country#16 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
            +-aggregate_list=
              +-constituent_aggregate_1#21 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#23)
              |   +-group_by_list=
              |   | +-grain_lock_key#24 :=
              |   |   +-GetStructField
              |   |     +-type=STRUCT<key INT64>
              |   |     +-expr=
              |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_ratio_price_to_quantity#20)
              |   |     +-field_idx=1
              |   +-group_by_aggregate_list=
              |     +-$any_value_grain_lock_0#23 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-GetStructField
              |           +-type=INT64
              |           +-expr=
              |           | +-GetStructField
              |           |   +-type=STRUCT<price INT64, quantity INT64>
              |           |   +-expr=
              |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_ratio_price_to_quantity#20)
              |           |   +-field_idx=0
              |           +-field_idx=0
              +-constituent_aggregate_2#22 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#25)
                  +-group_by_list=
                  | +-grain_lock_key#26 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_ratio_price_to_quantity#20)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#25 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-GetStructField
                          +-type=INT64
                          +-expr=
                          | +-GetStructField
                          |   +-type=STRUCT<price INT64, quantity INT64>
                          |   +-expr=
                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_ratio_price_to_quantity#20)
                          |   +-field_idx=0
                          +-field_idx=1
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_12.a_9 AS country,
  CAST(aggregatescan_12.a_10 AS DOUBLE) / CAST(aggregatescan_12.a_11 AS DOUBLE) AS a_13
FROM
  (
    SELECT
      projectscan_8.a_2 AS a_9,
      SUM(ANY_VALUE(projectscan_8.a_7.referenced_columns.price)
        GROUP BY projectscan_8.a_7.key_columns) AS a_10,
      SUM(ANY_VALUE(projectscan_8.a_7.referenced_columns.quantity)
        GROUP BY projectscan_8.a_7.key_columns) AS a_11
    FROM
      (
        SELECT
          measuretable_singlekey_6.a_1 AS a_1,
          measuretable_singlekey_6.a_2 AS a_2,
          measuretable_singlekey_6.a_3 AS a_3,
          measuretable_singlekey_6.a_4 AS a_4,
          measuretable_singlekey_6.a_5 AS a_5,
          STRUCT< referenced_columns STRUCT< price INT64, quantity INT64 >, key_columns STRUCT< key INT64 > > (STRUCT<
            price INT64, quantity INT64 > (measuretable_singlekey_6.a_4, measuretable_singlekey_6.a_3), STRUCT< key INT64 >
            (measuretable_singlekey_6.a_1)) AS a_7
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.country AS a_2,
              MeasureTable_SingleKey.quantity AS a_3,
              MeasureTable_SingleKey.price AS a_4,
              MeasureTable_SingleKey.measure_ratio_price_to_quantity AS a_5
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_6
      ) AS projectscan_8
    GROUP BY 1
  ) AS aggregatescan_12;
==

# Ratio metric
SELECT
  country,
  AGG(measure_ratio_price_to_quantity)
FROM MeasureTable_TwoKeys
GROUP BY country
--
QueryStmt
+-output_column_list=
| +-$groupby.country#15 AS country [STRING]
| +-$aggregate.$agg1#14 AS `$col2` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#15, $aggregate.$agg1#14]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.country#15, $aggregate.$agg1#14]
        +-input_scan=
        | +-TableScan(column_list=MeasureTable_TwoKeys.[country#3, measure_ratio_price_to_quantity#12], table=MeasureTable_TwoKeys, column_index_list=[2, 11])
        +-group_by_list=
        | +-country#15 := ColumnRef(type=STRING, column=MeasureTable_TwoKeys.country#3)
        +-aggregate_list=
          +-$agg1#14 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<DOUBLE>) -> DOUBLE)
              +-ColumnRef(type=MEASURE<DOUBLE>, column=MeasureTable_TwoKeys.measure_ratio_price_to_quantity#12)

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_twokeys_3.a_1 AS country,
  AGG(measuretable_twokeys_3.a_2) AS a_5
FROM
  (
    SELECT
      MeasureTable_TwoKeys.country AS a_1,
      MeasureTable_TwoKeys.measure_ratio_price_to_quantity AS a_2
    FROM
      MeasureTable_TwoKeys
  ) AS measuretable_twokeys_3
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.country#15 AS country [STRING]
| +-$aggregate.$agg1#14 AS `$col2` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#15, $aggregate.$agg1#14]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.country#15, $aggregate.$agg1#14]
        +-expr_list=
        | +-$agg1#14 :=
        |   +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
        |     +-Cast(INT64 -> DOUBLE)
        |     | +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#21)
        |     +-Cast(INT64 -> DOUBLE)
        |       +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_2#22)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.country#15, $aggregate.constituent_aggregate_1#21, $aggregate.constituent_aggregate_2#22]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_TwoKeys.[key1#16, key2#17, country#3, quantity#19, price#18, measure_ratio_price_to_quantity#12, struct_for_measure_measure_ratio_price_to_quantity#20]
            |   +-expr_list=
            |   | +-struct_for_measure_measure_ratio_price_to_quantity#20 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key1 INT64, key2 INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<price INT64, quantity INT64>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_TwoKeys.price#18)
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_TwoKeys.quantity#19)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key1 INT64, key2 INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_TwoKeys.key1#16)
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_TwoKeys.key2#17)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_TwoKeys.[key1#16, key2#17, country#3, quantity#19, price#18, measure_ratio_price_to_quantity#12], table=MeasureTable_TwoKeys, column_index_list=[0, 1, 2, 3, 4, 11])
            +-group_by_list=
            | +-country#15 := ColumnRef(type=STRING, column=MeasureTable_TwoKeys.country#3)
            +-aggregate_list=
              +-constituent_aggregate_1#21 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#23)
              |   +-group_by_list=
              |   | +-grain_lock_key#24 :=
              |   |   +-GetStructField
              |   |     +-type=STRUCT<key1 INT64, key2 INT64>
              |   |     +-expr=
              |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key1 INT64, key2 INT64>>, column=MeasureTable_TwoKeys.struct_for_measure_measure_ratio_price_to_quantity#20)
              |   |     +-field_idx=1
              |   +-group_by_aggregate_list=
              |     +-$any_value_grain_lock_0#23 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-GetStructField
              |           +-type=INT64
              |           +-expr=
              |           | +-GetStructField
              |           |   +-type=STRUCT<price INT64, quantity INT64>
              |           |   +-expr=
              |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key1 INT64, key2 INT64>>, column=MeasureTable_TwoKeys.struct_for_measure_measure_ratio_price_to_quantity#20)
              |           |   +-field_idx=0
              |           +-field_idx=0
              +-constituent_aggregate_2#22 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#25)
                  +-group_by_list=
                  | +-grain_lock_key#26 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key1 INT64, key2 INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key1 INT64, key2 INT64>>, column=MeasureTable_TwoKeys.struct_for_measure_measure_ratio_price_to_quantity#20)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#25 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-GetStructField
                          +-type=INT64
                          +-expr=
                          | +-GetStructField
                          |   +-type=STRUCT<price INT64, quantity INT64>
                          |   +-expr=
                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key1 INT64, key2 INT64>>, column=MeasureTable_TwoKeys.struct_for_measure_measure_ratio_price_to_quantity#20)
                          |   +-field_idx=0
                          +-field_idx=1
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_13.a_10 AS country,
  CAST(aggregatescan_13.a_11 AS DOUBLE) / CAST(aggregatescan_13.a_12 AS DOUBLE) AS a_14
FROM
  (
    SELECT
      projectscan_9.a_3 AS a_10,
      SUM(ANY_VALUE(projectscan_9.a_8.referenced_columns.price)
        GROUP BY projectscan_9.a_8.key_columns) AS a_11,
      SUM(ANY_VALUE(projectscan_9.a_8.referenced_columns.quantity)
        GROUP BY projectscan_9.a_8.key_columns) AS a_12
    FROM
      (
        SELECT
          measuretable_twokeys_7.a_1 AS a_1,
          measuretable_twokeys_7.a_2 AS a_2,
          measuretable_twokeys_7.a_3 AS a_3,
          measuretable_twokeys_7.a_4 AS a_4,
          measuretable_twokeys_7.a_5 AS a_5,
          measuretable_twokeys_7.a_6 AS a_6,
          STRUCT< referenced_columns STRUCT< price INT64, quantity INT64 >, key_columns STRUCT< key1 INT64, key2 INT64 >
          > (STRUCT< price INT64, quantity INT64 > (measuretable_twokeys_7.a_5, measuretable_twokeys_7.a_4), STRUCT<
            key1 INT64, key2 INT64 > (measuretable_twokeys_7.a_1, measuretable_twokeys_7.a_2)) AS a_8
        FROM
          (
            SELECT
              MeasureTable_TwoKeys.key1 AS a_1,
              MeasureTable_TwoKeys.key2 AS a_2,
              MeasureTable_TwoKeys.country AS a_3,
              MeasureTable_TwoKeys.quantity AS a_4,
              MeasureTable_TwoKeys.price AS a_5,
              MeasureTable_TwoKeys.measure_ratio_price_to_quantity AS a_6
            FROM
              MeasureTable_TwoKeys
          ) AS measuretable_twokeys_7
      ) AS projectscan_9
    GROUP BY 1
  ) AS aggregatescan_13;
==

# Ratio of multi-level aggregate expressions
SELECT
  country,
  AGG(measure_ratio_price_to_quantity_per_key)
FROM MeasureTable_SingleKey
GROUP BY country
--
QueryStmt
+-output_column_list=
| +-$groupby.country#16 AS country [STRING]
| +-$aggregate.$agg1#15 AS `$col2` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
        +-input_scan=
        | +-TableScan(column_list=MeasureTable_SingleKey.[country#2, measure_ratio_price_to_quantity_per_key#13], table=MeasureTable_SingleKey, column_index_list=[1, 12])
        +-group_by_list=
        | +-country#16 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
        +-aggregate_list=
          +-$agg1#15 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<DOUBLE>) -> DOUBLE)
              +-ColumnRef(type=MEASURE<DOUBLE>, column=MeasureTable_SingleKey.measure_ratio_price_to_quantity_per_key#13)

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_singlekey_3.a_1 AS country,
  AGG(measuretable_singlekey_3.a_2) AS a_5
FROM
  (
    SELECT
      MeasureTable_SingleKey.country AS a_1,
      MeasureTable_SingleKey.measure_ratio_price_to_quantity_per_key AS a_2
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_3
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.country#16 AS country [STRING]
| +-$aggregate.$agg1#15 AS `$col2` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
        +-expr_list=
        | +-$agg1#15 :=
        |   +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
        |     +-Cast(INT64 -> DOUBLE)
        |     | +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#25)
        |     +-Cast(INT64 -> DOUBLE)
        |       +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_2#26)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.country#16, $aggregate.constituent_aggregate_1#25, $aggregate.constituent_aggregate_2#26]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_SingleKey.[key#17, country#2, quantity#19, price#18, measure_ratio_price_to_quantity_per_key#13, struct_for_measure_measure_ratio_price_to_quantity_per_key#20]
            |   +-expr_list=
            |   | +-struct_for_measure_measure_ratio_price_to_quantity_per_key#20 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<key INT64, price INT64, quantity INT64>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<key INT64, price INT64, quantity INT64>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#17)
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#18)
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#19)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#17)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_SingleKey.[key#17, country#2, quantity#19, price#18, measure_ratio_price_to_quantity_per_key#13], table=MeasureTable_SingleKey, column_index_list=[0, 1, 2, 3, 12])
            +-group_by_list=
            | +-country#16 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
            +-aggregate_list=
              +-constituent_aggregate_1#25 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$agg1#22)
              |   +-group_by_list=
              |   | +-$groupbymod#21 :=
              |   |   +-GetStructField
              |   |     +-type=INT64
              |   |     +-expr=
              |   |     | +-GetStructField
              |   |     |   +-type=STRUCT<key INT64, price INT64, quantity INT64>
              |   |     |   +-expr=
              |   |     |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_ratio_price_to_quantity_per_key#20)
              |   |     |   +-field_idx=0
              |   |     +-field_idx=0
              |   +-group_by_aggregate_list=
              |     +-$agg1#22 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#27)
              |         +-group_by_list=
              |         | +-grain_lock_key#28 :=
              |         |   +-GetStructField
              |         |     +-type=STRUCT<key INT64>
              |         |     +-expr=
              |         |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_ratio_price_to_quantity_per_key#20)
              |         |     +-field_idx=1
              |         +-group_by_aggregate_list=
              |           +-$any_value_grain_lock_0#27 :=
              |             +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |               +-GetStructField
              |                 +-type=INT64
              |                 +-expr=
              |                 | +-GetStructField
              |                 |   +-type=STRUCT<key INT64, price INT64, quantity INT64>
              |                 |   +-expr=
              |                 |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_ratio_price_to_quantity_per_key#20)
              |                 |   +-field_idx=0
              |                 +-field_idx=1
              +-constituent_aggregate_2#26 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$agg1#24)
                  +-group_by_list=
                  | +-$groupbymod#23 :=
                  |   +-GetStructField
                  |     +-type=INT64
                  |     +-expr=
                  |     | +-GetStructField
                  |     |   +-type=STRUCT<key INT64, price INT64, quantity INT64>
                  |     |   +-expr=
                  |     |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_ratio_price_to_quantity_per_key#20)
                  |     |   +-field_idx=0
                  |     +-field_idx=0
                  +-group_by_aggregate_list=
                    +-$agg1#24 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#29)
                        +-group_by_list=
                        | +-grain_lock_key#30 :=
                        |   +-GetStructField
                        |     +-type=STRUCT<key INT64>
                        |     +-expr=
                        |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_ratio_price_to_quantity_per_key#20)
                        |     +-field_idx=1
                        +-group_by_aggregate_list=
                          +-$any_value_grain_lock_0#29 :=
                            +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                              +-GetStructField
                                +-type=INT64
                                +-expr=
                                | +-GetStructField
                                |   +-type=STRUCT<key INT64, price INT64, quantity INT64>
                                |   +-expr=
                                |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_ratio_price_to_quantity_per_key#20)
                                |   +-field_idx=0
                                +-field_idx=2
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_12.a_9 AS country,
  CAST(aggregatescan_12.a_10 AS DOUBLE) / CAST(aggregatescan_12.a_11 AS DOUBLE) AS a_13
FROM
  (
    SELECT
      projectscan_8.a_2 AS a_9,
      SUM(ANY_VALUE(ANY_VALUE(projectscan_8.a_7.referenced_columns.price)
          GROUP BY projectscan_8.a_7.key_columns)
        GROUP BY projectscan_8.a_7.referenced_columns.key) AS a_10,
      SUM(ANY_VALUE(ANY_VALUE(projectscan_8.a_7.referenced_columns.quantity)
          GROUP BY projectscan_8.a_7.key_columns)
        GROUP BY projectscan_8.a_7.referenced_columns.key) AS a_11
    FROM
      (
        SELECT
          measuretable_singlekey_6.a_1 AS a_1,
          measuretable_singlekey_6.a_2 AS a_2,
          measuretable_singlekey_6.a_3 AS a_3,
          measuretable_singlekey_6.a_4 AS a_4,
          measuretable_singlekey_6.a_5 AS a_5,
          STRUCT< referenced_columns STRUCT< key INT64, price INT64, quantity INT64 >, key_columns STRUCT< key INT64 >
          > (STRUCT< key INT64, price INT64, quantity INT64 > (measuretable_singlekey_6.a_1, measuretable_singlekey_6.a_4,
              measuretable_singlekey_6.a_3), STRUCT< key INT64 > (measuretable_singlekey_6.a_1)) AS a_7
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.country AS a_2,
              MeasureTable_SingleKey.quantity AS a_3,
              MeasureTable_SingleKey.price AS a_4,
              MeasureTable_SingleKey.measure_ratio_price_to_quantity_per_key AS a_5
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_6
      ) AS projectscan_8
    GROUP BY 1
  ) AS aggregatescan_12;
==

# Ratio of complex multi-level aggregate expressions
SELECT
  country,
  AGG(measure_complex_ratio_metric)
FROM MeasureTable_SingleKey
GROUP BY country
--
QueryStmt
+-output_column_list=
| +-$groupby.country#16 AS country [STRING]
| +-$aggregate.$agg1#15 AS `$col2` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
        +-input_scan=
        | +-TableScan(column_list=MeasureTable_SingleKey.[country#2, measure_complex_ratio_metric#14], table=MeasureTable_SingleKey, column_index_list=[1, 13])
        +-group_by_list=
        | +-country#16 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
        +-aggregate_list=
          +-$agg1#15 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<DOUBLE>) -> DOUBLE)
              +-ColumnRef(type=MEASURE<DOUBLE>, column=MeasureTable_SingleKey.measure_complex_ratio_metric#14)

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_singlekey_3.a_1 AS country,
  AGG(measuretable_singlekey_3.a_2) AS a_5
FROM
  (
    SELECT
      MeasureTable_SingleKey.country AS a_1,
      MeasureTable_SingleKey.measure_complex_ratio_metric AS a_2
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_3
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.country#16 AS country [STRING]
| +-$aggregate.$agg1#15 AS `$col2` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
        +-expr_list=
        | +-$agg1#15 :=
        |   +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
        |     +-ColumnRef(type=DOUBLE, column=$aggregate.constituent_aggregate_1#26)
        |     +-ColumnRef(type=DOUBLE, column=$aggregate.constituent_aggregate_2#27)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.country#16, $aggregate.constituent_aggregate_1#26, $aggregate.constituent_aggregate_2#27]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_SingleKey.[key#17, country#2, price#18, measure_complex_ratio_metric#14, struct_for_measure_measure_complex_ratio_metric#19]
            |   +-expr_list=
            |   | +-struct_for_measure_measure_complex_ratio_metric#19 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<key INT64, price INT64>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#17)
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#18)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#17)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_SingleKey.[key#17, country#2, price#18, measure_complex_ratio_metric#14], table=MeasureTable_SingleKey, column_index_list=[0, 1, 3, 13])
            +-group_by_list=
            | +-country#16 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
            +-aggregate_list=
              +-constituent_aggregate_1#26 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
              |   +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
              |     +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#21)
              |     +-Cast(INT64 -> DOUBLE)
              |       +-ColumnRef(type=INT64, column=$aggregate.$agg2#22)
              |   +-group_by_list=
              |   | +-$groupbymod#20 :=
              |   |   +-GetStructField
              |   |     +-type=INT64
              |   |     +-expr=
              |   |     | +-GetStructField
              |   |     |   +-type=STRUCT<key INT64, price INT64>
              |   |     |   +-expr=
              |   |     |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_complex_ratio_metric#19)
              |   |     |   +-field_idx=0
              |   |     +-field_idx=0
              |   +-group_by_aggregate_list=
              |     +-$agg1#21 :=
              |     | +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
              |     |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#28)
              |     |   +-group_by_list=
              |     |   | +-grain_lock_key#29 :=
              |     |   |   +-GetStructField
              |     |   |     +-type=STRUCT<key INT64>
              |     |   |     +-expr=
              |     |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_complex_ratio_metric#19)
              |     |   |     +-field_idx=1
              |     |   +-group_by_aggregate_list=
              |     |     +-$any_value_grain_lock_0#28 :=
              |     |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |     |         +-GetStructField
              |     |           +-type=INT64
              |     |           +-expr=
              |     |           | +-GetStructField
              |     |           |   +-type=STRUCT<key INT64, price INT64>
              |     |           |   +-expr=
              |     |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_complex_ratio_metric#19)
              |     |           |   +-field_idx=0
              |     |           +-field_idx=1
              |     +-$agg2#22 :=
              |       +-AggregateFunctionCall(ZetaSQL:min(INT64) -> INT64)
              |         +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#30)
              |         +-group_by_list=
              |         | +-grain_lock_key#31 :=
              |         |   +-GetStructField
              |         |     +-type=STRUCT<key INT64>
              |         |     +-expr=
              |         |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_complex_ratio_metric#19)
              |         |     +-field_idx=1
              |         +-group_by_aggregate_list=
              |           +-$any_value_grain_lock_0#30 :=
              |             +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |               +-GetStructField
              |                 +-type=INT64
              |                 +-expr=
              |                 | +-GetStructField
              |                 |   +-type=STRUCT<key INT64, price INT64>
              |                 |   +-expr=
              |                 |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_complex_ratio_metric#19)
              |                 |   +-field_idx=0
              |                 +-field_idx=1
              +-constituent_aggregate_2#27 :=
                +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
                  +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
                    +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#24)
                    +-Cast(INT64 -> DOUBLE)
                      +-ColumnRef(type=INT64, column=$aggregate.$agg2#25)
                  +-group_by_list=
                  | +-$groupbymod#23 :=
                  |   +-GetStructField
                  |     +-type=INT64
                  |     +-expr=
                  |     | +-GetStructField
                  |     |   +-type=STRUCT<key INT64, price INT64>
                  |     |   +-expr=
                  |     |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_complex_ratio_metric#19)
                  |     |   +-field_idx=0
                  |     +-field_idx=0
                  +-group_by_aggregate_list=
                    +-$agg1#24 :=
                    | +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
                    |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#32)
                    |   +-group_by_list=
                    |   | +-grain_lock_key#33 :=
                    |   |   +-GetStructField
                    |   |     +-type=STRUCT<key INT64>
                    |   |     +-expr=
                    |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_complex_ratio_metric#19)
                    |   |     +-field_idx=1
                    |   +-group_by_aggregate_list=
                    |     +-$any_value_grain_lock_0#32 :=
                    |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                    |         +-GetStructField
                    |           +-type=INT64
                    |           +-expr=
                    |           | +-GetStructField
                    |           |   +-type=STRUCT<key INT64, price INT64>
                    |           |   +-expr=
                    |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_complex_ratio_metric#19)
                    |           |   +-field_idx=0
                    |           +-field_idx=1
                    +-$agg2#25 :=
                      +-AggregateFunctionCall(ZetaSQL:max(INT64) -> INT64)
                        +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#34)
                        +-group_by_list=
                        | +-grain_lock_key#35 :=
                        |   +-GetStructField
                        |     +-type=STRUCT<key INT64>
                        |     +-expr=
                        |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_complex_ratio_metric#19)
                        |     +-field_idx=1
                        +-group_by_aggregate_list=
                          +-$any_value_grain_lock_0#34 :=
                            +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                              +-GetStructField
                                +-type=INT64
                                +-expr=
                                | +-GetStructField
                                |   +-type=STRUCT<key INT64, price INT64>
                                |   +-expr=
                                |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_complex_ratio_metric#19)
                                |   +-field_idx=0
                                +-field_idx=1
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_11.a_8 AS country,
  (aggregatescan_11.a_9) / (aggregatescan_11.a_10) AS a_12
FROM
  (
    SELECT
      projectscan_7.a_2 AS a_8,
      SUM((AVG(ANY_VALUE(projectscan_7.a_6.referenced_columns.price)
          GROUP BY projectscan_7.a_6.key_columns)) + CAST(MIN(ANY_VALUE(projectscan_7.a_6.referenced_columns.price)
          GROUP BY projectscan_7.a_6.key_columns) AS DOUBLE)
        GROUP BY projectscan_7.a_6.referenced_columns.key) AS a_9,
      SUM((AVG(ANY_VALUE(projectscan_7.a_6.referenced_columns.price)
          GROUP BY projectscan_7.a_6.key_columns)) + CAST(MAX(ANY_VALUE(projectscan_7.a_6.referenced_columns.price)
          GROUP BY projectscan_7.a_6.key_columns) AS DOUBLE)
        GROUP BY projectscan_7.a_6.referenced_columns.key) AS a_10
    FROM
      (
        SELECT
          measuretable_singlekey_5.a_1 AS a_1,
          measuretable_singlekey_5.a_2 AS a_2,
          measuretable_singlekey_5.a_3 AS a_3,
          measuretable_singlekey_5.a_4 AS a_4,
          STRUCT< referenced_columns STRUCT< key INT64, price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT<
            key INT64, price INT64 > (measuretable_singlekey_5.a_1, measuretable_singlekey_5.a_3), STRUCT< key INT64 >
            (measuretable_singlekey_5.a_1)) AS a_6
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.country AS a_2,
              MeasureTable_SingleKey.price AS a_3,
              MeasureTable_SingleKey.measure_complex_ratio_metric AS a_4
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_5
      ) AS projectscan_7
    GROUP BY 1
  ) AS aggregatescan_11;
==

# Measures can propagate through inner joins.
SELECT
  T1.country,
  AGG(T1.measure_sum_quantity)
FROM MeasureTable_SingleKey AS T1
INNER JOIN MeasureTable_SingleKey AS T2 USING (key)
GROUP BY T1.country;
--
QueryStmt
+-output_column_list=
| +-$groupby.country#30 AS country [STRING]
| +-$aggregate.$agg1#29 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#30, $aggregate.$agg1#29]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.country#30, $aggregate.$agg1#29]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=MeasureTable_SingleKey.[key#1, country#2, measure_sum_quantity#9, key#15]
        |   +-left_scan=
        |   | +-TableScan(column_list=MeasureTable_SingleKey.[key#1, country#2, measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[0, 1, 8], alias="T1")
        |   +-right_scan=
        |   | +-TableScan(column_list=[MeasureTable_SingleKey.key#15], table=MeasureTable_SingleKey, column_index_list=[0], alias="T2")
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
        |   |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#15)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-country#30 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
        +-aggregate_list=
          +-$agg1#29 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_quantity#9)

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_singlekey_4.a_2 AS country,
  AGG(measuretable_singlekey_4.a_3) AS a_8
FROM
  (
    SELECT
      MeasureTable_SingleKey.key AS a_1,
      MeasureTable_SingleKey.country AS a_2,
      MeasureTable_SingleKey.measure_sum_quantity AS a_3
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_4
  INNER JOIN
  (
    SELECT
      measuretable_singlekey_6.a_5 AS a_1
    FROM
      (
        SELECT
          MeasureTable_SingleKey.key AS a_5
        FROM
          MeasureTable_SingleKey
      ) AS measuretable_singlekey_6
  ) AS measuretable_singlekey_6
  USING(a_1)
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.country#30 AS country [STRING]
| +-$aggregate.$agg1#29 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#30, $aggregate.$agg1#29]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.country#30, $aggregate.$agg1#29]
        +-expr_list=
        | +-$agg1#29 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#33)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.country#30, $aggregate.constituent_aggregate_1#33]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=MeasureTable_SingleKey.[key#1, country#2, measure_sum_quantity#9, key#15, struct_for_measure_measure_sum_quantity#32]
            |   +-left_scan=
            |   | +-ProjectScan
            |   |   +-column_list=MeasureTable_SingleKey.[key#1, country#2, quantity#31, measure_sum_quantity#9, struct_for_measure_measure_sum_quantity#32]
            |   |   +-expr_list=
            |   |   | +-struct_for_measure_measure_sum_quantity#32 :=
            |   |   |   +-MakeStruct
            |   |   |     +-type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>
            |   |   |     +-field_list=
            |   |   |       +-MakeStruct
            |   |   |       | +-type=STRUCT<quantity INT64>
            |   |   |       | +-field_list=
            |   |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#31)
            |   |   |       +-MakeStruct
            |   |   |         +-type=STRUCT<key INT64>
            |   |   |         +-field_list=
            |   |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
            |   |   +-input_scan=
            |   |     +-TableScan(column_list=MeasureTable_SingleKey.[key#1, country#2, quantity#31, measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[0, 1, 2, 8], alias="T1")
            |   +-right_scan=
            |   | +-TableScan(column_list=[MeasureTable_SingleKey.key#15], table=MeasureTable_SingleKey, column_index_list=[0], alias="T2")
            |   +-join_expr=
            |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |   |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
            |   |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#15)
            |   +-has_using=TRUE
            +-group_by_list=
            | +-country#30 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
            +-aggregate_list=
              +-constituent_aggregate_1#33 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#34)
                  +-group_by_list=
                  | +-grain_lock_key#35 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_sum_quantity#32)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#34 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-GetStructField
                          +-type=INT64
                          +-expr=
                          | +-GetStructField
                          |   +-type=STRUCT<quantity INT64>
                          |   +-expr=
                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_sum_quantity#32)
                          |   +-field_idx=0
                          +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_12.a_10 AS country,
  aggregatescan_12.a_11 AS a_13
FROM
  (
    SELECT
      projectscan_7.a_2 AS a_10,
      SUM(ANY_VALUE(projectscan_7.a_6.referenced_columns.quantity)
        GROUP BY projectscan_7.a_6.key_columns) AS a_11
    FROM
      (
        SELECT
          measuretable_singlekey_5.a_1 AS a_1,
          measuretable_singlekey_5.a_2 AS a_2,
          measuretable_singlekey_5.a_3 AS a_3,
          measuretable_singlekey_5.a_4 AS a_4,
          STRUCT< referenced_columns STRUCT< quantity INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< quantity INT64 >
            (measuretable_singlekey_5.a_3), STRUCT< key INT64 > (measuretable_singlekey_5.a_1)) AS a_6
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.country AS a_2,
              MeasureTable_SingleKey.quantity AS a_3,
              MeasureTable_SingleKey.measure_sum_quantity AS a_4
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_5
      ) AS projectscan_7
      INNER JOIN
      (
        SELECT
          measuretable_singlekey_9.a_8 AS a_1
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_8
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_9
      ) AS measuretable_singlekey_9
      USING(a_1)
    GROUP BY 1
  ) AS aggregatescan_12;
==

# Measures can propagate through cross / comma joins.
SELECT
  T1.country,
  AGG(T1.measure_sum_quantity)
FROM MeasureTable_SingleKey AS T1
{{,|CROSS JOIN}} MeasureTable_SingleKey AS T2
GROUP BY T1.country;
--
QueryStmt
+-output_column_list=
| +-$groupby.country#30 AS country [STRING]
| +-$aggregate.$agg1#29 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#30, $aggregate.$agg1#29]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.country#30, $aggregate.$agg1#29]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=MeasureTable_SingleKey.[country#2, measure_sum_quantity#9]
        |   +-left_scan=
        |   | +-TableScan(column_list=MeasureTable_SingleKey.[country#2, measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[1, 8], alias="T1")
        |   +-right_scan=
        |     +-TableScan(table=MeasureTable_SingleKey, alias="T2")
        +-group_by_list=
        | +-country#30 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
        +-aggregate_list=
          +-$agg1#29 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_quantity#9)

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_singlekey_3.a_1 AS country,
  AGG(measuretable_singlekey_3.a_2) AS a_6
FROM
  (
    SELECT
      MeasureTable_SingleKey.country AS a_1,
      MeasureTable_SingleKey.measure_sum_quantity AS a_2
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_3
  CROSS JOIN
  (
    SELECT
      NULL
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_4
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.country#30 AS country [STRING]
| +-$aggregate.$agg1#29 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#30, $aggregate.$agg1#29]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.country#30, $aggregate.$agg1#29]
        +-expr_list=
        | +-$agg1#29 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#34)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.country#30, $aggregate.constituent_aggregate_1#34]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=MeasureTable_SingleKey.[country#2, measure_sum_quantity#9, struct_for_measure_measure_sum_quantity#33]
            |   +-left_scan=
            |   | +-ProjectScan
            |   |   +-column_list=MeasureTable_SingleKey.[key#31, country#2, quantity#32, measure_sum_quantity#9, struct_for_measure_measure_sum_quantity#33]
            |   |   +-expr_list=
            |   |   | +-struct_for_measure_measure_sum_quantity#33 :=
            |   |   |   +-MakeStruct
            |   |   |     +-type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>
            |   |   |     +-field_list=
            |   |   |       +-MakeStruct
            |   |   |       | +-type=STRUCT<quantity INT64>
            |   |   |       | +-field_list=
            |   |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#32)
            |   |   |       +-MakeStruct
            |   |   |         +-type=STRUCT<key INT64>
            |   |   |         +-field_list=
            |   |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#31)
            |   |   +-input_scan=
            |   |     +-TableScan(column_list=MeasureTable_SingleKey.[key#31, country#2, quantity#32, measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[0, 1, 2, 8], alias="T1")
            |   +-right_scan=
            |     +-TableScan(table=MeasureTable_SingleKey, alias="T2")
            +-group_by_list=
            | +-country#30 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
            +-aggregate_list=
              +-constituent_aggregate_1#34 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#35)
                  +-group_by_list=
                  | +-grain_lock_key#36 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_sum_quantity#33)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#35 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-GetStructField
                          +-type=INT64
                          +-expr=
                          | +-GetStructField
                          |   +-type=STRUCT<quantity INT64>
                          |   +-expr=
                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_sum_quantity#33)
                          |   +-field_idx=0
                          +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_11.a_9 AS country,
  aggregatescan_11.a_10 AS a_12
FROM
  (
    SELECT
      projectscan_7.a_2 AS a_9,
      SUM(ANY_VALUE(projectscan_7.a_6.referenced_columns.quantity)
        GROUP BY projectscan_7.a_6.key_columns) AS a_10
    FROM
      (
        SELECT
          measuretable_singlekey_5.a_1 AS a_1,
          measuretable_singlekey_5.a_2 AS a_2,
          measuretable_singlekey_5.a_3 AS a_3,
          measuretable_singlekey_5.a_4 AS a_4,
          STRUCT< referenced_columns STRUCT< quantity INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< quantity INT64 >
            (measuretable_singlekey_5.a_3), STRUCT< key INT64 > (measuretable_singlekey_5.a_1)) AS a_6
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.country AS a_2,
              MeasureTable_SingleKey.quantity AS a_3,
              MeasureTable_SingleKey.measure_sum_quantity AS a_4
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_5
      ) AS projectscan_7
      CROSS JOIN
      (
        SELECT
          NULL
        FROM
          MeasureTable_SingleKey
      ) AS measuretable_singlekey_8
    GROUP BY 1
  ) AS aggregatescan_11;
==

# Measures can propagate past ArrayScans.
SELECT 1 FROM (
  SELECT *
  FROM UNNEST(ARRAY(SELECT measure_sum_quantity FROM MeasureTable_SingleKey))
)
--
ERROR: Cannot use array subquery with column of type MEASURE<INT64> [at 3:15]
  FROM UNNEST(ARRAY(SELECT measure_sum_quantity FROM MeasureTable_SingleKey))
              ^
==

# Measures can propagate past FilterScan, OrderByScan and LimitOffsetScan.
SELECT AGG(measure_sum_quantity) FROM (
  SELECT measure_sum_quantity
  FROM MeasureTable_SingleKey
  WHERE true
  ORDER BY key
  LIMIT 2
)
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#15 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#15]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#15]
        +-input_scan=
        | +-LimitOffsetScan
        |   +-column_list=[MeasureTable_SingleKey.measure_sum_quantity#9]
        |   +-input_scan=
        |   | +-OrderByScan
        |   |   +-column_list=[MeasureTable_SingleKey.measure_sum_quantity#9]
        |   |   +-is_ordered=TRUE
        |   |   +-input_scan=
        |   |   | +-FilterScan
        |   |   |   +-column_list=MeasureTable_SingleKey.[key#1, measure_sum_quantity#9]
        |   |   |   +-input_scan=
        |   |   |   | +-TableScan(column_list=MeasureTable_SingleKey.[key#1, measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[0, 8])
        |   |   |   +-filter_expr=
        |   |   |     +-Literal(type=BOOL, value=true)
        |   |   +-order_by_item_list=
        |   |     +-OrderByItem
        |   |       +-column_ref=
        |   |         +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
        |   +-limit=
        |     +-Literal(type=INT64, value=2)
        +-aggregate_list=
          +-$agg1#15 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_quantity#9)

[SQLBUILDER_OUTPUT]
SELECT
  AGG(limitoffsetscan_4.a_2) AS a_5
FROM
  (
    SELECT
      filterscan_3.a_2 AS a_2
    FROM
      (
        SELECT
          MeasureTable_SingleKey.key AS a_1,
          MeasureTable_SingleKey.measure_sum_quantity AS a_2
        FROM
          MeasureTable_SingleKey
        WHERE
          true
      ) AS filterscan_3
    ORDER BY filterscan_3.a_1
    LIMIT 2
  ) AS limitoffsetscan_4;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#15 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#15]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#15]
        +-expr_list=
        | +-$agg1#15 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#18)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$aggregate.constituent_aggregate_1#18]
            +-input_scan=
            | +-LimitOffsetScan
            |   +-column_list=MeasureTable_SingleKey.[measure_sum_quantity#9, struct_for_measure_measure_sum_quantity#17]
            |   +-input_scan=
            |   | +-OrderByScan
            |   |   +-column_list=MeasureTable_SingleKey.[measure_sum_quantity#9, struct_for_measure_measure_sum_quantity#17]
            |   |   +-is_ordered=TRUE
            |   |   +-input_scan=
            |   |   | +-FilterScan
            |   |   |   +-column_list=MeasureTable_SingleKey.[key#1, measure_sum_quantity#9, struct_for_measure_measure_sum_quantity#17]
            |   |   |   +-input_scan=
            |   |   |   | +-ProjectScan
            |   |   |   |   +-column_list=MeasureTable_SingleKey.[key#1, quantity#16, measure_sum_quantity#9, struct_for_measure_measure_sum_quantity#17]
            |   |   |   |   +-expr_list=
            |   |   |   |   | +-struct_for_measure_measure_sum_quantity#17 :=
            |   |   |   |   |   +-MakeStruct
            |   |   |   |   |     +-type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>
            |   |   |   |   |     +-field_list=
            |   |   |   |   |       +-MakeStruct
            |   |   |   |   |       | +-type=STRUCT<quantity INT64>
            |   |   |   |   |       | +-field_list=
            |   |   |   |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#16)
            |   |   |   |   |       +-MakeStruct
            |   |   |   |   |         +-type=STRUCT<key INT64>
            |   |   |   |   |         +-field_list=
            |   |   |   |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
            |   |   |   |   +-input_scan=
            |   |   |   |     +-TableScan(column_list=MeasureTable_SingleKey.[key#1, quantity#16, measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[0, 2, 8])
            |   |   |   +-filter_expr=
            |   |   |     +-Literal(type=BOOL, value=true)
            |   |   +-order_by_item_list=
            |   |     +-OrderByItem
            |   |       +-column_ref=
            |   |         +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
            |   +-limit=
            |     +-Literal(type=INT64, value=2)
            +-aggregate_list=
              +-constituent_aggregate_1#18 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#19)
                  +-group_by_list=
                  | +-grain_lock_key#20 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_sum_quantity#17)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#19 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-GetStructField
                          +-type=INT64
                          +-expr=
                          | +-GetStructField
                          |   +-type=STRUCT<quantity INT64>
                          |   +-expr=
                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_sum_quantity#17)
                          |   +-field_idx=0
                          +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_10.a_9 AS a_11
FROM
  (
    SELECT
      SUM(ANY_VALUE(limitoffsetscan_8.a_5.referenced_columns.quantity)
        GROUP BY limitoffsetscan_8.a_5.key_columns) AS a_9
    FROM
      (
        SELECT
          filterscan_7.a_3 AS a_3,
          filterscan_7.a_5 AS a_5
        FROM
          (
            SELECT
              projectscan_6.a_1 AS a_1,
              projectscan_6.a_3 AS a_3,
              projectscan_6.a_5 AS a_5
            FROM
              (
                SELECT
                  measuretable_singlekey_4.a_1 AS a_1,
                  measuretable_singlekey_4.a_2 AS a_2,
                  measuretable_singlekey_4.a_3 AS a_3,
                  STRUCT< referenced_columns STRUCT< quantity INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< quantity INT64 >
                    (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
                FROM
                  (
                    SELECT
                      MeasureTable_SingleKey.key AS a_1,
                      MeasureTable_SingleKey.quantity AS a_2,
                      MeasureTable_SingleKey.measure_sum_quantity AS a_3
                    FROM
                      MeasureTable_SingleKey
                  ) AS measuretable_singlekey_4
              ) AS projectscan_6
            WHERE
              true
          ) AS filterscan_7
        ORDER BY filterscan_7.a_1
        LIMIT 2
      ) AS limitoffsetscan_8
  ) AS aggregatescan_10;
==

# The rewritten tree should NOT project a STRUCT for measure_sum_quantity since
# it is not invoked.
WITH t AS (
  SELECT measure_sum_price, measure_sum_quantity FROM MeasureTable_SingleKey
)
SELECT AGG(measure_sum_price) FROM (SELECT * FROM t)
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#17 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$aggregate.$agg1#17]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, measure_sum_quantity#9]
    |       +-input_scan=
    |         +-TableScan(column_list=MeasureTable_SingleKey.[measure_sum_quantity#9, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[8, 9])
    +-query=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#17]
        +-input_scan=
          +-AggregateScan
            +-column_list=[$aggregate.$agg1#17]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=t.[measure_sum_price#15, measure_sum_quantity#16]
            |   +-input_scan=
            |     +-WithRefScan(column_list=t.[measure_sum_price#15, measure_sum_quantity#16], with_query_name="t")
            +-aggregate_list=
              +-$agg1#17 :=
                +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
                  +-ColumnRef(type=MEASURE<INT64>, column=t.measure_sum_price#15)

[SQLBUILDER_OUTPUT]
WITH
  t AS (
    SELECT
      measuretable_singlekey_3.a_2 AS a_2,
      measuretable_singlekey_3.a_1 AS a_1
    FROM
      (
        SELECT
          MeasureTable_SingleKey.measure_sum_quantity AS a_1,
          MeasureTable_SingleKey.measure_sum_price AS a_2
        FROM
          MeasureTable_SingleKey
      ) AS measuretable_singlekey_3
  )
SELECT
  AGG(projectscan_5.a_2) AS a_6
FROM
  (
    SELECT
      withrefscan_4.a_2 AS a_2,
      withrefscan_4.a_1 AS a_1
    FROM
      t AS withrefscan_4
  ) AS projectscan_5;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#17 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$aggregate.$agg1#17]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, measure_sum_quantity#9, struct_for_measure_measure_sum_price#20]
    |       +-input_scan=
    |         +-ProjectScan
    |           +-column_list=MeasureTable_SingleKey.[key#18, price#19, measure_sum_quantity#9, measure_sum_price#10, struct_for_measure_measure_sum_price#20]
    |           +-expr_list=
    |           | +-struct_for_measure_measure_sum_price#20 :=
    |           |   +-MakeStruct
    |           |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
    |           |     +-field_list=
    |           |       +-MakeStruct
    |           |       | +-type=STRUCT<price INT64>
    |           |       | +-field_list=
    |           |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#19)
    |           |       +-MakeStruct
    |           |         +-type=STRUCT<key INT64>
    |           |         +-field_list=
    |           |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#18)
    |           +-input_scan=
    |             +-TableScan(column_list=MeasureTable_SingleKey.[key#18, price#19, measure_sum_quantity#9, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 3, 8, 9])
    +-query=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#17]
        +-input_scan=
          +-ProjectScan
            +-column_list=[$aggregate.$agg1#17]
            +-expr_list=
            | +-$agg1#17 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#22)
            +-input_scan=
              +-AggregateScan
                +-column_list=[$aggregate.constituent_aggregate_1#22]
                +-input_scan=
                | +-ProjectScan
                |   +-column_list=t.[measure_sum_price#15, measure_sum_quantity#16, struct_for_measure_measure_sum_price#21]
                |   +-input_scan=
                |     +-WithRefScan(column_list=t.[measure_sum_price#15, measure_sum_quantity#16, struct_for_measure_measure_sum_price#21], with_query_name="t")
                +-aggregate_list=
                  +-constituent_aggregate_1#22 :=
                    +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                      +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#23)
                      +-group_by_list=
                      | +-grain_lock_key#24 :=
                      |   +-GetStructField
                      |     +-type=STRUCT<key INT64>
                      |     +-expr=
                      |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=t.struct_for_measure_measure_sum_price#21)
                      |     +-field_idx=1
                      +-group_by_aggregate_list=
                        +-$any_value_grain_lock_0#23 :=
                          +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                            +-GetStructField
                              +-type=INT64
                              +-expr=
                              | +-GetStructField
                              |   +-type=STRUCT<price INT64>
                              |   +-expr=
                              |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=t.struct_for_measure_measure_sum_price#21)
                              |   +-field_idx=0
                              +-field_idx=0
[SQLBUILDER_OUTPUT]
WITH
  t AS (
    SELECT
      projectscan_7.a_4 AS a_4,
      projectscan_7.a_3 AS a_3,
      projectscan_7.a_6 AS a_6
    FROM
      (
        SELECT
          measuretable_singlekey_5.a_1 AS a_1,
          measuretable_singlekey_5.a_2 AS a_2,
          measuretable_singlekey_5.a_3 AS a_3,
          measuretable_singlekey_5.a_4 AS a_4,
          STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
            (measuretable_singlekey_5.a_2), STRUCT< key INT64 > (measuretable_singlekey_5.a_1)) AS a_6
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.price AS a_2,
              MeasureTable_SingleKey.measure_sum_quantity AS a_3,
              MeasureTable_SingleKey.measure_sum_price AS a_4
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_5
      ) AS projectscan_7
  )
SELECT
  aggregatescan_11.a_10 AS a_12
FROM
  (
    SELECT
      SUM(ANY_VALUE(projectscan_9.a_6.referenced_columns.price)
        GROUP BY projectscan_9.a_6.key_columns) AS a_10
    FROM
      (
        SELECT
          withrefscan_8.a_4 AS a_4,
          withrefscan_8.a_3 AS a_3,
          withrefscan_8.a_6 AS a_6
        FROM
          t AS withrefscan_8
      ) AS projectscan_9
  ) AS aggregatescan_11;
==

# The rewritten tree should NOT project STRUCTs for measures that are not
# invoked.
WITH t AS (
  SELECT * FROM MeasureTable_SingleKey
)
SELECT AGG(measure_sum_quantity) FROM t
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#29 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$aggregate.$agg1#29]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=MeasureTable_SingleKey.[key#1, country#2, quantity#3, price#4, measure_count_star#5, measure_count_star_per_key#6, measure_count_distinct_key#7, measure_count_key_per_key#8, measure_sum_quantity#9, measure_sum_price#10, measure_sum_price_times_quantity#11, measure_ratio_price_to_quantity#12, measure_ratio_price_to_quantity_per_key#13, measure_complex_ratio_metric#14]
    |       +-input_scan=
    |         +-TableScan(column_list=MeasureTable_SingleKey.[key#1, country#2, quantity#3, price#4, measure_count_star#5, measure_count_star_per_key#6, measure_count_distinct_key#7, measure_count_key_per_key#8, measure_sum_quantity#9, measure_sum_price#10, measure_sum_price_times_quantity#11, measure_ratio_price_to_quantity#12, measure_ratio_price_to_quantity_per_key#13, measure_complex_ratio_metric#14], table=MeasureTable_SingleKey, column_index_list=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])
    +-query=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#29]
        +-input_scan=
          +-AggregateScan
            +-column_list=[$aggregate.$agg1#29]
            +-input_scan=
            | +-WithRefScan(column_list=t.[key#15, country#16, quantity#17, price#18, measure_count_star#19, measure_count_star_per_key#20, measure_count_distinct_key#21, measure_count_key_per_key#22, measure_sum_quantity#23, measure_sum_price#24, measure_sum_price_times_quantity#25, measure_ratio_price_to_quantity#26, measure_ratio_price_to_quantity_per_key#27, measure_complex_ratio_metric#28], with_query_name="t")
            +-aggregate_list=
              +-$agg1#29 :=
                +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
                  +-ColumnRef(type=MEASURE<INT64>, column=t.measure_sum_quantity#23)

[SQLBUILDER_OUTPUT]
WITH
  t AS (
    SELECT
      MeasureTable_SingleKey.key AS a_1,
      MeasureTable_SingleKey.country AS a_2,
      MeasureTable_SingleKey.quantity AS a_3,
      MeasureTable_SingleKey.price AS a_4,
      MeasureTable_SingleKey.measure_count_star AS a_5,
      MeasureTable_SingleKey.measure_count_star_per_key AS a_6,
      MeasureTable_SingleKey.measure_count_distinct_key AS a_7,
      MeasureTable_SingleKey.measure_count_key_per_key AS a_8,
      MeasureTable_SingleKey.measure_sum_quantity AS a_9,
      MeasureTable_SingleKey.measure_sum_price AS a_10,
      MeasureTable_SingleKey.measure_sum_price_times_quantity AS a_11,
      MeasureTable_SingleKey.measure_ratio_price_to_quantity AS a_12,
      MeasureTable_SingleKey.measure_ratio_price_to_quantity_per_key AS a_13,
      MeasureTable_SingleKey.measure_complex_ratio_metric AS a_14
    FROM
      MeasureTable_SingleKey
  )
SELECT
  AGG(withrefscan_15.a_9) AS a_16
FROM
  t AS withrefscan_15;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#29 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$aggregate.$agg1#29]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=MeasureTable_SingleKey.[key#1, country#2, quantity#3, price#4, measure_count_star#5, measure_count_star_per_key#6, measure_count_distinct_key#7, measure_count_key_per_key#8, measure_sum_quantity#9, measure_sum_price#10, measure_sum_price_times_quantity#11, measure_ratio_price_to_quantity#12, measure_ratio_price_to_quantity_per_key#13, measure_complex_ratio_metric#14, struct_for_measure_measure_sum_quantity#30]
    |       +-input_scan=
    |         +-ProjectScan
    |           +-column_list=MeasureTable_SingleKey.[key#1, country#2, quantity#3, price#4, measure_count_star#5, measure_count_star_per_key#6, measure_count_distinct_key#7, measure_count_key_per_key#8, measure_sum_quantity#9, measure_sum_price#10, measure_sum_price_times_quantity#11, measure_ratio_price_to_quantity#12, measure_ratio_price_to_quantity_per_key#13, measure_complex_ratio_metric#14, struct_for_measure_measure_sum_quantity#30]
    |           +-expr_list=
    |           | +-struct_for_measure_measure_sum_quantity#30 :=
    |           |   +-MakeStruct
    |           |     +-type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>
    |           |     +-field_list=
    |           |       +-MakeStruct
    |           |       | +-type=STRUCT<quantity INT64>
    |           |       | +-field_list=
    |           |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#3)
    |           |       +-MakeStruct
    |           |         +-type=STRUCT<key INT64>
    |           |         +-field_list=
    |           |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
    |           +-input_scan=
    |             +-TableScan(column_list=MeasureTable_SingleKey.[key#1, country#2, quantity#3, price#4, measure_count_star#5, measure_count_star_per_key#6, measure_count_distinct_key#7, measure_count_key_per_key#8, measure_sum_quantity#9, measure_sum_price#10, measure_sum_price_times_quantity#11, measure_ratio_price_to_quantity#12, measure_ratio_price_to_quantity_per_key#13, measure_complex_ratio_metric#14], table=MeasureTable_SingleKey, column_index_list=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])
    +-query=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#29]
        +-input_scan=
          +-ProjectScan
            +-column_list=[$aggregate.$agg1#29]
            +-expr_list=
            | +-$agg1#29 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#32)
            +-input_scan=
              +-AggregateScan
                +-column_list=[$aggregate.constituent_aggregate_1#32]
                +-input_scan=
                | +-WithRefScan(column_list=t.[key#15, country#16, quantity#17, price#18, measure_count_star#19, measure_count_star_per_key#20, measure_count_distinct_key#21, measure_count_key_per_key#22, measure_sum_quantity#23, measure_sum_price#24, measure_sum_price_times_quantity#25, measure_ratio_price_to_quantity#26, measure_ratio_price_to_quantity_per_key#27, measure_complex_ratio_metric#28, struct_for_measure_measure_sum_quantity#31], with_query_name="t")
                +-aggregate_list=
                  +-constituent_aggregate_1#32 :=
                    +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                      +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#33)
                      +-group_by_list=
                      | +-grain_lock_key#34 :=
                      |   +-GetStructField
                      |     +-type=STRUCT<key INT64>
                      |     +-expr=
                      |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=t.struct_for_measure_measure_sum_quantity#31)
                      |     +-field_idx=1
                      +-group_by_aggregate_list=
                        +-$any_value_grain_lock_0#33 :=
                          +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                            +-GetStructField
                              +-type=INT64
                              +-expr=
                              | +-GetStructField
                              |   +-type=STRUCT<quantity INT64>
                              |   +-expr=
                              |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=t.struct_for_measure_measure_sum_quantity#31)
                              |   +-field_idx=0
                              +-field_idx=0
[SQLBUILDER_OUTPUT]
WITH
  t AS (
    SELECT
      measuretable_singlekey_15.a_1 AS a_1,
      measuretable_singlekey_15.a_2 AS a_2,
      measuretable_singlekey_15.a_3 AS a_3,
      measuretable_singlekey_15.a_4 AS a_4,
      measuretable_singlekey_15.a_5 AS a_5,
      measuretable_singlekey_15.a_6 AS a_6,
      measuretable_singlekey_15.a_7 AS a_7,
      measuretable_singlekey_15.a_8 AS a_8,
      measuretable_singlekey_15.a_9 AS a_9,
      measuretable_singlekey_15.a_10 AS a_10,
      measuretable_singlekey_15.a_11 AS a_11,
      measuretable_singlekey_15.a_12 AS a_12,
      measuretable_singlekey_15.a_13 AS a_13,
      measuretable_singlekey_15.a_14 AS a_14,
      STRUCT< referenced_columns STRUCT< quantity INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< quantity INT64 >
        (measuretable_singlekey_15.a_3), STRUCT< key INT64 > (measuretable_singlekey_15.a_1)) AS a_16
    FROM
      (
        SELECT
          MeasureTable_SingleKey.key AS a_1,
          MeasureTable_SingleKey.country AS a_2,
          MeasureTable_SingleKey.quantity AS a_3,
          MeasureTable_SingleKey.price AS a_4,
          MeasureTable_SingleKey.measure_count_star AS a_5,
          MeasureTable_SingleKey.measure_count_star_per_key AS a_6,
          MeasureTable_SingleKey.measure_count_distinct_key AS a_7,
          MeasureTable_SingleKey.measure_count_key_per_key AS a_8,
          MeasureTable_SingleKey.measure_sum_quantity AS a_9,
          MeasureTable_SingleKey.measure_sum_price AS a_10,
          MeasureTable_SingleKey.measure_sum_price_times_quantity AS a_11,
          MeasureTable_SingleKey.measure_ratio_price_to_quantity AS a_12,
          MeasureTable_SingleKey.measure_ratio_price_to_quantity_per_key AS a_13,
          MeasureTable_SingleKey.measure_complex_ratio_metric AS a_14
        FROM
          MeasureTable_SingleKey
      ) AS measuretable_singlekey_15
  )
SELECT
  aggregatescan_19.a_18 AS a_20
FROM
  (
    SELECT
      SUM(ANY_VALUE(withrefscan_17.a_16.referenced_columns.quantity)
        GROUP BY withrefscan_17.a_16.key_columns) AS a_18
    FROM
      t AS withrefscan_17
  ) AS aggregatescan_19;
==

# Aggregate 2 measures from different tables.
SELECT
  AGG(T1.measure_sum_price),
  AGG(T2.measure_sum_price)
FROM MeasureTable_SingleKey AS T1, MeasureTable_SingleKey AS T2;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#29 AS `$col1` [INT64]
| +-$aggregate.$agg2#30 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#29, $agg2#30]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#29, $agg2#30]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, measure_sum_price#24]
        |   +-left_scan=
        |   | +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[9], alias="T1")
        |   +-right_scan=
        |     +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_price#24], table=MeasureTable_SingleKey, column_index_list=[9], alias="T2")
        +-aggregate_list=
          +-$agg1#29 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)
          +-$agg2#30 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#24)

[SQLBUILDER_OUTPUT]
SELECT
  AGG(measuretable_singlekey_2.a_1) AS a_5,
  AGG(measuretable_singlekey_4.a_3) AS a_6
FROM
  (
    SELECT
      MeasureTable_SingleKey.measure_sum_price AS a_1
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_2
  CROSS JOIN
  (
    SELECT
      MeasureTable_SingleKey.measure_sum_price AS a_3
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_4;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#29 AS `$col1` [INT64]
| +-$aggregate.$agg2#30 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#29, $agg2#30]
    +-input_scan=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#29, $agg2#30]
        +-expr_list=
        | +-$agg1#29 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#37)
        | +-$agg2#30 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#40)
        +-input_scan=
          +-AggregateScan
            +-column_list=$aggregate.[constituent_aggregate_1#37, constituent_aggregate_1#40]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, measure_sum_price#24, struct_for_measure_measure_sum_price#34, struct_for_measure_measure_sum_price#36]
            |   +-left_scan=
            |   | +-ProjectScan
            |   |   +-column_list=MeasureTable_SingleKey.[key#31, price#33, measure_sum_price#10, struct_for_measure_measure_sum_price#34]
            |   |   +-expr_list=
            |   |   | +-struct_for_measure_measure_sum_price#34 :=
            |   |   |   +-MakeStruct
            |   |   |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
            |   |   |     +-field_list=
            |   |   |       +-MakeStruct
            |   |   |       | +-type=STRUCT<price INT64>
            |   |   |       | +-field_list=
            |   |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#33)
            |   |   |       +-MakeStruct
            |   |   |         +-type=STRUCT<key INT64>
            |   |   |         +-field_list=
            |   |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#31)
            |   |   +-input_scan=
            |   |     +-TableScan(column_list=MeasureTable_SingleKey.[key#31, price#33, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 3, 9], alias="T1")
            |   +-right_scan=
            |     +-ProjectScan
            |       +-column_list=MeasureTable_SingleKey.[key#32, price#35, measure_sum_price#24, struct_for_measure_measure_sum_price#36]
            |       +-expr_list=
            |       | +-struct_for_measure_measure_sum_price#36 :=
            |       |   +-MakeStruct
            |       |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
            |       |     +-field_list=
            |       |       +-MakeStruct
            |       |       | +-type=STRUCT<price INT64>
            |       |       | +-field_list=
            |       |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#35)
            |       |       +-MakeStruct
            |       |         +-type=STRUCT<key INT64>
            |       |         +-field_list=
            |       |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#32)
            |       +-input_scan=
            |         +-TableScan(column_list=MeasureTable_SingleKey.[key#32, price#35, measure_sum_price#24], table=MeasureTable_SingleKey, column_index_list=[0, 3, 9], alias="T2")
            +-aggregate_list=
              +-constituent_aggregate_1#37 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#38)
              |   +-group_by_list=
              |   | +-grain_lock_key#39 :=
              |   |   +-GetStructField
              |   |     +-type=STRUCT<key INT64>
              |   |     +-expr=
              |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_sum_price#34)
              |   |     +-field_idx=1
              |   +-group_by_aggregate_list=
              |     +-$any_value_grain_lock_0#38 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-GetStructField
              |           +-type=INT64
              |           +-expr=
              |           | +-GetStructField
              |           |   +-type=STRUCT<price INT64>
              |           |   +-expr=
              |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_sum_price#34)
              |           |   +-field_idx=0
              |           +-field_idx=0
              +-constituent_aggregate_1#40 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#41)
                  +-group_by_list=
                  | +-grain_lock_key#42 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_sum_price#36)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#41 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-GetStructField
                          +-type=INT64
                          +-expr=
                          | +-GetStructField
                          |   +-type=STRUCT<price INT64>
                          |   +-expr=
                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_sum_price#36)
                          |   +-field_idx=0
                          +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_15.a_13 AS a_16,
  aggregatescan_15.a_14 AS a_17
FROM
  (
    SELECT
      SUM(ANY_VALUE(projectscan_6.a_5.referenced_columns.price)
        GROUP BY projectscan_6.a_5.key_columns) AS a_13,
      SUM(ANY_VALUE(projectscan_12.a_11.referenced_columns.price)
        GROUP BY projectscan_12.a_11.key_columns) AS a_14
    FROM
      (
        SELECT
          measuretable_singlekey_4.a_1 AS a_1,
          measuretable_singlekey_4.a_2 AS a_2,
          measuretable_singlekey_4.a_3 AS a_3,
          STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
            (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.price AS a_2,
              MeasureTable_SingleKey.measure_sum_price AS a_3
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_4
      ) AS projectscan_6
      CROSS JOIN
      (
        SELECT
          measuretable_singlekey_10.a_7 AS a_7,
          measuretable_singlekey_10.a_8 AS a_8,
          measuretable_singlekey_10.a_9 AS a_9,
          STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
            (measuretable_singlekey_10.a_8), STRUCT< key INT64 > (measuretable_singlekey_10.a_7)) AS a_11
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_7,
              MeasureTable_SingleKey.price AS a_8,
              MeasureTable_SingleKey.measure_sum_price AS a_9
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_10
      ) AS projectscan_12
  ) AS aggregatescan_15;
==

# Aggregate single measure propagating through a self-join across a with scan.
# Note that the rewritten AST has both WithRefScans project the STRUCT, even
# though only 1 of the projected STRUCTs is used. This is because the base
# WithScan now projects the STRUCT, so all corresponding WithRefScans must
# now project it as well.
WITH WithTable as (
  SELECT measure_sum_price FROM MeasureTable_SingleKey
)
SELECT
  AGG(T1.measure_sum_price)
FROM WithTable AS T1, WithTable AS T2;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#17 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$aggregate.$agg1#17]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="WithTable"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[MeasureTable_SingleKey.measure_sum_price#10]
    |       +-input_scan=
    |         +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[9])
    +-query=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#17]
        +-input_scan=
          +-AggregateScan
            +-column_list=[$aggregate.$agg1#17]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=WithTable.[measure_sum_price#15, measure_sum_price#16]
            |   +-left_scan=
            |   | +-WithRefScan(column_list=[WithTable.measure_sum_price#15], with_query_name="WithTable")
            |   +-right_scan=
            |     +-WithRefScan(column_list=[WithTable.measure_sum_price#16], with_query_name="WithTable")
            +-aggregate_list=
              +-$agg1#17 :=
                +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
                  +-ColumnRef(type=MEASURE<INT64>, column=WithTable.measure_sum_price#15)

[SQLBUILDER_OUTPUT]
WITH
  WithTable AS (
    SELECT
      MeasureTable_SingleKey.measure_sum_price AS a_1
    FROM
      MeasureTable_SingleKey
  )
SELECT
  AGG(withrefscan_2.a_1) AS a_4
FROM
  (
    SELECT
      withrefscan_2.a_1 AS a_1
    FROM
      WithTable AS withrefscan_2
  ) AS withrefscan_2
  CROSS JOIN
  (
    SELECT
      withrefscan_3.a_1 AS a_1
    FROM
      WithTable AS withrefscan_3
  ) AS withrefscan_3;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#17 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$aggregate.$agg1#17]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="WithTable"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, struct_for_measure_measure_sum_price#20]
    |       +-input_scan=
    |         +-ProjectScan
    |           +-column_list=MeasureTable_SingleKey.[key#18, price#19, measure_sum_price#10, struct_for_measure_measure_sum_price#20]
    |           +-expr_list=
    |           | +-struct_for_measure_measure_sum_price#20 :=
    |           |   +-MakeStruct
    |           |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
    |           |     +-field_list=
    |           |       +-MakeStruct
    |           |       | +-type=STRUCT<price INT64>
    |           |       | +-field_list=
    |           |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#19)
    |           |       +-MakeStruct
    |           |         +-type=STRUCT<key INT64>
    |           |         +-field_list=
    |           |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#18)
    |           +-input_scan=
    |             +-TableScan(column_list=MeasureTable_SingleKey.[key#18, price#19, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 3, 9])
    +-query=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#17]
        +-input_scan=
          +-ProjectScan
            +-column_list=[$aggregate.$agg1#17]
            +-expr_list=
            | +-$agg1#17 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#23)
            +-input_scan=
              +-AggregateScan
                +-column_list=[$aggregate.constituent_aggregate_1#23]
                +-input_scan=
                | +-JoinScan
                |   +-column_list=WithTable.[measure_sum_price#15, measure_sum_price#16, struct_for_measure_measure_sum_price#21, struct_for_measure_measure_sum_price#22]
                |   +-left_scan=
                |   | +-WithRefScan(column_list=WithTable.[measure_sum_price#15, struct_for_measure_measure_sum_price#21], with_query_name="WithTable")
                |   +-right_scan=
                |     +-WithRefScan(column_list=WithTable.[measure_sum_price#16, struct_for_measure_measure_sum_price#22], with_query_name="WithTable")
                +-aggregate_list=
                  +-constituent_aggregate_1#23 :=
                    +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                      +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#24)
                      +-group_by_list=
                      | +-grain_lock_key#25 :=
                      |   +-GetStructField
                      |     +-type=STRUCT<key INT64>
                      |     +-expr=
                      |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measure_measure_sum_price#21)
                      |     +-field_idx=1
                      +-group_by_aggregate_list=
                        +-$any_value_grain_lock_0#24 :=
                          +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                            +-GetStructField
                              +-type=INT64
                              +-expr=
                              | +-GetStructField
                              |   +-type=STRUCT<price INT64>
                              |   +-expr=
                              |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measure_measure_sum_price#21)
                              |   +-field_idx=0
                              +-field_idx=0
[SQLBUILDER_OUTPUT]
WITH
  WithTable AS (
    SELECT
      projectscan_6.a_3 AS a_3,
      projectscan_6.a_5 AS a_5
    FROM
      (
        SELECT
          measuretable_singlekey_4.a_1 AS a_1,
          measuretable_singlekey_4.a_2 AS a_2,
          measuretable_singlekey_4.a_3 AS a_3,
          STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
            (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.price AS a_2,
              MeasureTable_SingleKey.measure_sum_price AS a_3
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_4
      ) AS projectscan_6
  )
SELECT
  aggregatescan_10.a_9 AS a_11
FROM
  (
    SELECT
      SUM(ANY_VALUE(withrefscan_7.a_5.referenced_columns.price)
        GROUP BY withrefscan_7.a_5.key_columns) AS a_9
    FROM
      (
        SELECT
          withrefscan_7.a_3 AS a_3,
          withrefscan_7.a_5 AS a_5
        FROM
          WithTable AS withrefscan_7
      ) AS withrefscan_7
      CROSS JOIN
      (
        SELECT
          withrefscan_8.a_3 AS a_3,
          withrefscan_8.a_5 AS a_5
        FROM
          WithTable AS withrefscan_8
      ) AS withrefscan_8
  ) AS aggregatescan_10;
==

# Aggregate measures propagating through a self-join across a with scan.
WITH WithTable as (
  SELECT measure_sum_price FROM MeasureTable_SingleKey
)
SELECT
  AGG(T1.measure_sum_price), AGG(T2.measure_sum_price)
FROM WithTable AS T1, WithTable AS T2;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#17 AS `$col1` [INT64]
| +-$aggregate.$agg2#18 AS `$col2` [INT64]
+-query=
  +-WithScan
    +-column_list=$aggregate.[$agg1#17, $agg2#18]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="WithTable"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[MeasureTable_SingleKey.measure_sum_price#10]
    |       +-input_scan=
    |         +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[9])
    +-query=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#17, $agg2#18]
        +-input_scan=
          +-AggregateScan
            +-column_list=$aggregate.[$agg1#17, $agg2#18]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=WithTable.[measure_sum_price#15, measure_sum_price#16]
            |   +-left_scan=
            |   | +-WithRefScan(column_list=[WithTable.measure_sum_price#15], with_query_name="WithTable")
            |   +-right_scan=
            |     +-WithRefScan(column_list=[WithTable.measure_sum_price#16], with_query_name="WithTable")
            +-aggregate_list=
              +-$agg1#17 :=
              | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              |   +-ColumnRef(type=MEASURE<INT64>, column=WithTable.measure_sum_price#15)
              +-$agg2#18 :=
                +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
                  +-ColumnRef(type=MEASURE<INT64>, column=WithTable.measure_sum_price#16)

[SQLBUILDER_OUTPUT]
WITH
  WithTable AS (
    SELECT
      MeasureTable_SingleKey.measure_sum_price AS a_1
    FROM
      MeasureTable_SingleKey
  )
SELECT
  AGG(withrefscan_2.a_1) AS a_4,
  AGG(withrefscan_3.a_1) AS a_5
FROM
  (
    SELECT
      withrefscan_2.a_1 AS a_1
    FROM
      WithTable AS withrefscan_2
  ) AS withrefscan_2
  CROSS JOIN
  (
    SELECT
      withrefscan_3.a_1 AS a_1
    FROM
      WithTable AS withrefscan_3
  ) AS withrefscan_3;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#17 AS `$col1` [INT64]
| +-$aggregate.$agg2#18 AS `$col2` [INT64]
+-query=
  +-WithScan
    +-column_list=$aggregate.[$agg1#17, $agg2#18]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="WithTable"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, struct_for_measure_measure_sum_price#21]
    |       +-input_scan=
    |         +-ProjectScan
    |           +-column_list=MeasureTable_SingleKey.[key#19, price#20, measure_sum_price#10, struct_for_measure_measure_sum_price#21]
    |           +-expr_list=
    |           | +-struct_for_measure_measure_sum_price#21 :=
    |           |   +-MakeStruct
    |           |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
    |           |     +-field_list=
    |           |       +-MakeStruct
    |           |       | +-type=STRUCT<price INT64>
    |           |       | +-field_list=
    |           |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#20)
    |           |       +-MakeStruct
    |           |         +-type=STRUCT<key INT64>
    |           |         +-field_list=
    |           |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#19)
    |           +-input_scan=
    |             +-TableScan(column_list=MeasureTable_SingleKey.[key#19, price#20, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 3, 9])
    +-query=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#17, $agg2#18]
        +-input_scan=
          +-ProjectScan
            +-column_list=$aggregate.[$agg1#17, $agg2#18]
            +-expr_list=
            | +-$agg1#17 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#24)
            | +-$agg2#18 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#27)
            +-input_scan=
              +-AggregateScan
                +-column_list=$aggregate.[constituent_aggregate_1#24, constituent_aggregate_1#27]
                +-input_scan=
                | +-JoinScan
                |   +-column_list=WithTable.[measure_sum_price#15, measure_sum_price#16, struct_for_measure_measure_sum_price#22, struct_for_measure_measure_sum_price#23]
                |   +-left_scan=
                |   | +-WithRefScan(column_list=WithTable.[measure_sum_price#15, struct_for_measure_measure_sum_price#22], with_query_name="WithTable")
                |   +-right_scan=
                |     +-WithRefScan(column_list=WithTable.[measure_sum_price#16, struct_for_measure_measure_sum_price#23], with_query_name="WithTable")
                +-aggregate_list=
                  +-constituent_aggregate_1#24 :=
                  | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#25)
                  |   +-group_by_list=
                  |   | +-grain_lock_key#26 :=
                  |   |   +-GetStructField
                  |   |     +-type=STRUCT<key INT64>
                  |   |     +-expr=
                  |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measure_measure_sum_price#22)
                  |   |     +-field_idx=1
                  |   +-group_by_aggregate_list=
                  |     +-$any_value_grain_lock_0#25 :=
                  |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                  |         +-GetStructField
                  |           +-type=INT64
                  |           +-expr=
                  |           | +-GetStructField
                  |           |   +-type=STRUCT<price INT64>
                  |           |   +-expr=
                  |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measure_measure_sum_price#22)
                  |           |   +-field_idx=0
                  |           +-field_idx=0
                  +-constituent_aggregate_1#27 :=
                    +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                      +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#28)
                      +-group_by_list=
                      | +-grain_lock_key#29 :=
                      |   +-GetStructField
                      |     +-type=STRUCT<key INT64>
                      |     +-expr=
                      |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measure_measure_sum_price#23)
                      |     +-field_idx=1
                      +-group_by_aggregate_list=
                        +-$any_value_grain_lock_0#28 :=
                          +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                            +-GetStructField
                              +-type=INT64
                              +-expr=
                              | +-GetStructField
                              |   +-type=STRUCT<price INT64>
                              |   +-expr=
                              |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measure_measure_sum_price#23)
                              |   +-field_idx=0
                              +-field_idx=0
[SQLBUILDER_OUTPUT]
WITH
  WithTable AS (
    SELECT
      projectscan_6.a_3 AS a_3,
      projectscan_6.a_5 AS a_5
    FROM
      (
        SELECT
          measuretable_singlekey_4.a_1 AS a_1,
          measuretable_singlekey_4.a_2 AS a_2,
          measuretable_singlekey_4.a_3 AS a_3,
          STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
            (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.price AS a_2,
              MeasureTable_SingleKey.measure_sum_price AS a_3
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_4
      ) AS projectscan_6
  )
SELECT
  aggregatescan_11.a_9 AS a_12,
  aggregatescan_11.a_10 AS a_13
FROM
  (
    SELECT
      SUM(ANY_VALUE(withrefscan_7.a_5.referenced_columns.price)
        GROUP BY withrefscan_7.a_5.key_columns) AS a_9,
      SUM(ANY_VALUE(withrefscan_8.a_5.referenced_columns.price)
        GROUP BY withrefscan_8.a_5.key_columns) AS a_10
    FROM
      (
        SELECT
          withrefscan_7.a_3 AS a_3,
          withrefscan_7.a_5 AS a_5
        FROM
          WithTable AS withrefscan_7
      ) AS withrefscan_7
      CROSS JOIN
      (
        SELECT
          withrefscan_8.a_3 AS a_3,
          withrefscan_8.a_5 AS a_5
        FROM
          WithTable AS withrefscan_8
      ) AS withrefscan_8
  ) AS aggregatescan_11;
==

# Aggregate measures propagating through a self-join across a with scan.
WITH WithTable as (
  SELECT measure_sum_price, measure_sum_quantity FROM MeasureTable_SingleKey
)
SELECT
  AGG(T1.measure_sum_price), AGG(T2.measure_sum_quantity)
FROM WithTable AS T1, WithTable AS T2;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#19 AS `$col1` [INT64]
| +-$aggregate.$agg2#20 AS `$col2` [INT64]
+-query=
  +-WithScan
    +-column_list=$aggregate.[$agg1#19, $agg2#20]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="WithTable"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, measure_sum_quantity#9]
    |       +-input_scan=
    |         +-TableScan(column_list=MeasureTable_SingleKey.[measure_sum_quantity#9, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[8, 9])
    +-query=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#19, $agg2#20]
        +-input_scan=
          +-AggregateScan
            +-column_list=$aggregate.[$agg1#19, $agg2#20]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=WithTable.[measure_sum_price#15, measure_sum_quantity#16, measure_sum_price#17, measure_sum_quantity#18]
            |   +-left_scan=
            |   | +-WithRefScan(column_list=WithTable.[measure_sum_price#15, measure_sum_quantity#16], with_query_name="WithTable")
            |   +-right_scan=
            |     +-WithRefScan(column_list=WithTable.[measure_sum_price#17, measure_sum_quantity#18], with_query_name="WithTable")
            +-aggregate_list=
              +-$agg1#19 :=
              | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              |   +-ColumnRef(type=MEASURE<INT64>, column=WithTable.measure_sum_price#15)
              +-$agg2#20 :=
                +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
                  +-ColumnRef(type=MEASURE<INT64>, column=WithTable.measure_sum_quantity#18)

[SQLBUILDER_OUTPUT]
WITH
  WithTable AS (
    SELECT
      measuretable_singlekey_3.a_2 AS a_2,
      measuretable_singlekey_3.a_1 AS a_1
    FROM
      (
        SELECT
          MeasureTable_SingleKey.measure_sum_quantity AS a_1,
          MeasureTable_SingleKey.measure_sum_price AS a_2
        FROM
          MeasureTable_SingleKey
      ) AS measuretable_singlekey_3
  )
SELECT
  AGG(withrefscan_4.a_2) AS a_6,
  AGG(withrefscan_5.a_1) AS a_7
FROM
  (
    SELECT
      withrefscan_4.a_2 AS a_2,
      withrefscan_4.a_1 AS a_1
    FROM
      WithTable AS withrefscan_4
  ) AS withrefscan_4
  CROSS JOIN
  (
    SELECT
      withrefscan_5.a_2 AS a_2,
      withrefscan_5.a_1 AS a_1
    FROM
      WithTable AS withrefscan_5
  ) AS withrefscan_5;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#19 AS `$col1` [INT64]
| +-$aggregate.$agg2#20 AS `$col2` [INT64]
+-query=
  +-WithScan
    +-column_list=$aggregate.[$agg1#19, $agg2#20]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="WithTable"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, measure_sum_quantity#9, struct_for_measure_measure_sum_price#23, struct_for_measure_measure_sum_quantity#25]
    |       +-input_scan=
    |         +-ProjectScan
    |           +-column_list=MeasureTable_SingleKey.[key#21, quantity#24, price#22, measure_sum_quantity#9, measure_sum_price#10, struct_for_measure_measure_sum_price#23, struct_for_measure_measure_sum_quantity#25]
    |           +-expr_list=
    |           | +-struct_for_measure_measure_sum_price#23 :=
    |           | | +-MakeStruct
    |           | |   +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
    |           | |   +-field_list=
    |           | |     +-MakeStruct
    |           | |     | +-type=STRUCT<price INT64>
    |           | |     | +-field_list=
    |           | |     |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#22)
    |           | |     +-MakeStruct
    |           | |       +-type=STRUCT<key INT64>
    |           | |       +-field_list=
    |           | |         +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#21)
    |           | +-struct_for_measure_measure_sum_quantity#25 :=
    |           |   +-MakeStruct
    |           |     +-type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>
    |           |     +-field_list=
    |           |       +-MakeStruct
    |           |       | +-type=STRUCT<quantity INT64>
    |           |       | +-field_list=
    |           |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#24)
    |           |       +-MakeStruct
    |           |         +-type=STRUCT<key INT64>
    |           |         +-field_list=
    |           |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#21)
    |           +-input_scan=
    |             +-TableScan(column_list=MeasureTable_SingleKey.[key#21, quantity#24, price#22, measure_sum_quantity#9, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 2, 3, 8, 9])
    +-query=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#19, $agg2#20]
        +-input_scan=
          +-ProjectScan
            +-column_list=$aggregate.[$agg1#19, $agg2#20]
            +-expr_list=
            | +-$agg1#19 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#30)
            | +-$agg2#20 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#33)
            +-input_scan=
              +-AggregateScan
                +-column_list=$aggregate.[constituent_aggregate_1#30, constituent_aggregate_1#33]
                +-input_scan=
                | +-JoinScan
                |   +-column_list=WithTable.[measure_sum_price#15, measure_sum_quantity#16, measure_sum_price#17, measure_sum_quantity#18, struct_for_measure_measure_sum_price#26, struct_for_measure_measure_sum_quantity#28, struct_for_measure_measure_sum_price#27, struct_for_measure_measure_sum_quantity#29]
                |   +-left_scan=
                |   | +-WithRefScan(column_list=WithTable.[measure_sum_price#15, measure_sum_quantity#16, struct_for_measure_measure_sum_price#26, struct_for_measure_measure_sum_quantity#28], with_query_name="WithTable")
                |   +-right_scan=
                |     +-WithRefScan(column_list=WithTable.[measure_sum_price#17, measure_sum_quantity#18, struct_for_measure_measure_sum_price#27, struct_for_measure_measure_sum_quantity#29], with_query_name="WithTable")
                +-aggregate_list=
                  +-constituent_aggregate_1#30 :=
                  | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#31)
                  |   +-group_by_list=
                  |   | +-grain_lock_key#32 :=
                  |   |   +-GetStructField
                  |   |     +-type=STRUCT<key INT64>
                  |   |     +-expr=
                  |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measure_measure_sum_price#26)
                  |   |     +-field_idx=1
                  |   +-group_by_aggregate_list=
                  |     +-$any_value_grain_lock_0#31 :=
                  |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                  |         +-GetStructField
                  |           +-type=INT64
                  |           +-expr=
                  |           | +-GetStructField
                  |           |   +-type=STRUCT<price INT64>
                  |           |   +-expr=
                  |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measure_measure_sum_price#26)
                  |           |   +-field_idx=0
                  |           +-field_idx=0
                  +-constituent_aggregate_1#33 :=
                    +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                      +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#34)
                      +-group_by_list=
                      | +-grain_lock_key#35 :=
                      |   +-GetStructField
                      |     +-type=STRUCT<key INT64>
                      |     +-expr=
                      |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measure_measure_sum_quantity#29)
                      |     +-field_idx=1
                      +-group_by_aggregate_list=
                        +-$any_value_grain_lock_0#34 :=
                          +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                            +-GetStructField
                              +-type=INT64
                              +-expr=
                              | +-GetStructField
                              |   +-type=STRUCT<quantity INT64>
                              |   +-expr=
                              |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measure_measure_sum_quantity#29)
                              |   +-field_idx=0
                              +-field_idx=0
[SQLBUILDER_OUTPUT]
WITH
  WithTable AS (
    SELECT
      projectscan_9.a_5 AS a_5,
      projectscan_9.a_4 AS a_4,
      projectscan_9.a_7 AS a_7,
      projectscan_9.a_8 AS a_8
    FROM
      (
        SELECT
          measuretable_singlekey_6.a_1 AS a_1,
          measuretable_singlekey_6.a_2 AS a_2,
          measuretable_singlekey_6.a_3 AS a_3,
          measuretable_singlekey_6.a_4 AS a_4,
          measuretable_singlekey_6.a_5 AS a_5,
          STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
            (measuretable_singlekey_6.a_3), STRUCT< key INT64 > (measuretable_singlekey_6.a_1)) AS a_7,
          STRUCT< referenced_columns STRUCT< quantity INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< quantity INT64 >
            (measuretable_singlekey_6.a_2), STRUCT< key INT64 > (measuretable_singlekey_6.a_1)) AS a_8
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.quantity AS a_2,
              MeasureTable_SingleKey.price AS a_3,
              MeasureTable_SingleKey.measure_sum_quantity AS a_4,
              MeasureTable_SingleKey.measure_sum_price AS a_5
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_6
      ) AS projectscan_9
  )
SELECT
  aggregatescan_14.a_12 AS a_15,
  aggregatescan_14.a_13 AS a_16
FROM
  (
    SELECT
      SUM(ANY_VALUE(withrefscan_10.a_7.referenced_columns.price)
        GROUP BY withrefscan_10.a_7.key_columns) AS a_12,
      SUM(ANY_VALUE(withrefscan_11.a_8.referenced_columns.quantity)
        GROUP BY withrefscan_11.a_8.key_columns) AS a_13
    FROM
      (
        SELECT
          withrefscan_10.a_5 AS a_5,
          withrefscan_10.a_4 AS a_4,
          withrefscan_10.a_7 AS a_7,
          withrefscan_10.a_8 AS a_8
        FROM
          WithTable AS withrefscan_10
      ) AS withrefscan_10
      CROSS JOIN
      (
        SELECT
          withrefscan_11.a_5 AS a_5,
          withrefscan_11.a_4 AS a_4,
          withrefscan_11.a_7 AS a_7,
          withrefscan_11.a_8 AS a_8
        FROM
          WithTable AS withrefscan_11
      ) AS withrefscan_11
  ) AS aggregatescan_14;
==

# Aggregate measures propagating through a self-join where the tables have
# different column names.
SELECT
  AGG(T1.measure_sum_price),
  AGG(T2.measure_count_star_different_name)
FROM MeasureTable_SingleKey AS T1, MeasureTable_DifferentNames AS T2;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#20 AS `$col1` [INT64]
| +-$aggregate.$agg2#21 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#20, $agg2#21]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#20, $agg2#21]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[MeasureTable_SingleKey.measure_sum_price#10, MeasureTable_DifferentNames.measure_count_star_different_name#19]
        |   +-left_scan=
        |   | +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[9], alias="T1")
        |   +-right_scan=
        |     +-TableScan(column_list=[MeasureTable_DifferentNames.measure_count_star_different_name#19], table=MeasureTable_DifferentNames, column_index_list=[4], alias="T2")
        +-aggregate_list=
          +-$agg1#20 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)
          +-$agg2#21 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_DifferentNames.measure_count_star_different_name#19)

[SQLBUILDER_OUTPUT]
SELECT
  AGG(measuretable_singlekey_2.a_1) AS a_5,
  AGG(measuretable_differentnames_4.a_3) AS a_6
FROM
  (
    SELECT
      MeasureTable_SingleKey.measure_sum_price AS a_1
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_2
  CROSS JOIN
  (
    SELECT
      MeasureTable_DifferentNames.measure_count_star_different_name AS a_3
    FROM
      MeasureTable_DifferentNames
  ) AS measuretable_differentnames_4;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#20 AS `$col1` [INT64]
| +-$aggregate.$agg2#21 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#20, $agg2#21]
    +-input_scan=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#20, $agg2#21]
        +-expr_list=
        | +-$agg1#20 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#27)
        | +-$agg2#21 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#30)
        +-input_scan=
          +-AggregateScan
            +-column_list=$aggregate.[constituent_aggregate_1#27, constituent_aggregate_1#30]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[MeasureTable_SingleKey.measure_sum_price#10, MeasureTable_DifferentNames.measure_count_star_different_name#19, MeasureTable_SingleKey.struct_for_measure_measure_sum_price#25, MeasureTable_DifferentNames.struct_for_measure_measure_count_star_different_name#26]
            |   +-left_scan=
            |   | +-ProjectScan
            |   |   +-column_list=MeasureTable_SingleKey.[key#22, price#24, measure_sum_price#10, struct_for_measure_measure_sum_price#25]
            |   |   +-expr_list=
            |   |   | +-struct_for_measure_measure_sum_price#25 :=
            |   |   |   +-MakeStruct
            |   |   |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
            |   |   |     +-field_list=
            |   |   |       +-MakeStruct
            |   |   |       | +-type=STRUCT<price INT64>
            |   |   |       | +-field_list=
            |   |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#24)
            |   |   |       +-MakeStruct
            |   |   |         +-type=STRUCT<key INT64>
            |   |   |         +-field_list=
            |   |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#22)
            |   |   +-input_scan=
            |   |     +-TableScan(column_list=MeasureTable_SingleKey.[key#22, price#24, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 3, 9], alias="T1")
            |   +-right_scan=
            |     +-ProjectScan
            |       +-column_list=MeasureTable_DifferentNames.[key_different_name#23, measure_count_star_different_name#19, struct_for_measure_measure_count_star_different_name#26]
            |       +-expr_list=
            |       | +-struct_for_measure_measure_count_star_different_name#26 :=
            |       |   +-MakeStruct
            |       |     +-type=STRUCT<referenced_columns STRUCT<>, key_columns STRUCT<key_different_name INT64>>
            |       |     +-field_list=
            |       |       +-MakeStruct(type=STRUCT<>)
            |       |       +-MakeStruct
            |       |         +-type=STRUCT<key_different_name INT64>
            |       |         +-field_list=
            |       |           +-ColumnRef(type=INT64, column=MeasureTable_DifferentNames.key_different_name#23)
            |       +-input_scan=
            |         +-TableScan(column_list=MeasureTable_DifferentNames.[key_different_name#23, measure_count_star_different_name#19], table=MeasureTable_DifferentNames, column_index_list=[0, 4], alias="T2")
            +-aggregate_list=
              +-constituent_aggregate_1#27 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#28)
              |   +-group_by_list=
              |   | +-grain_lock_key#29 :=
              |   |   +-GetStructField
              |   |     +-type=STRUCT<key INT64>
              |   |     +-expr=
              |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_sum_price#25)
              |   |     +-field_idx=1
              |   +-group_by_aggregate_list=
              |     +-$any_value_grain_lock_0#28 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-GetStructField
              |           +-type=INT64
              |           +-expr=
              |           | +-GetStructField
              |           |   +-type=STRUCT<price INT64>
              |           |   +-expr=
              |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_sum_price#25)
              |           |   +-field_idx=0
              |           +-field_idx=0
              +-constituent_aggregate_1#30 :=
                +-AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
                  +-group_by_list=
                    +-grain_lock_key#31 :=
                      +-GetStructField
                        +-type=STRUCT<key_different_name INT64>
                        +-expr=
                        | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<>, key_columns STRUCT<key_different_name INT64>>, column=MeasureTable_DifferentNames.struct_for_measure_measure_count_star_different_name#26)
                        +-field_idx=1
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_14.a_12 AS a_15,
  aggregatescan_14.a_13 AS a_16
FROM
  (
    SELECT
      SUM(ANY_VALUE(projectscan_6.a_5.referenced_columns.price)
        GROUP BY projectscan_6.a_5.key_columns) AS a_12,
      COUNT(*
        GROUP BY projectscan_11.a_10.key_columns) AS a_13
    FROM
      (
        SELECT
          measuretable_singlekey_4.a_1 AS a_1,
          measuretable_singlekey_4.a_2 AS a_2,
          measuretable_singlekey_4.a_3 AS a_3,
          STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
            (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.price AS a_2,
              MeasureTable_SingleKey.measure_sum_price AS a_3
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_4
      ) AS projectscan_6
      CROSS JOIN
      (
        SELECT
          measuretable_differentnames_9.a_7 AS a_7,
          measuretable_differentnames_9.a_8 AS a_8,
          STRUCT< referenced_columns STRUCT< >, key_columns STRUCT< key_different_name INT64 > > (STRUCT< > (),
            STRUCT< key_different_name INT64 > (measuretable_differentnames_9.a_7)) AS a_10
        FROM
          (
            SELECT
              MeasureTable_DifferentNames.key_different_name AS a_7,
              MeasureTable_DifferentNames.measure_count_star_different_name AS a_8
            FROM
              MeasureTable_DifferentNames
          ) AS measuretable_differentnames_9
      ) AS projectscan_11
  ) AS aggregatescan_14;
==

# Complex measure propagation scenario.
WITH WithTable AS (
  SELECT
    measure_sum_price,
    measure_sum_quantity,
    measure_ratio_price_to_quantity
  FROM MeasureTable_SingleKey
), WithTableSelfCrossJoin AS (
  SELECT
    W1.measure_sum_price AS measure_sum_price_1,
    W1.measure_sum_quantity AS measure_sum_quantity_1,
    W2.measure_ratio_price_to_quantity AS measure_ratio_price_to_quantity_2
  FROM WithTable AS W1, WithTable AS W2
)
SELECT
  AGG(T1.measure_sum_price),
  AGG(T2.measure_sum_quantity_1),
  AGG(T2.measure_ratio_price_to_quantity_2)
FROM WithTable AS T1, WithTableSelfCrossJoin AS T2;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#27 AS `$col1` [INT64]
| +-$aggregate.$agg2#28 AS `$col2` [INT64]
| +-$aggregate.$agg3#29 AS `$col3` [DOUBLE]
+-query=
  +-WithScan
    +-column_list=$aggregate.[$agg1#27, $agg2#28, $agg3#29]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="WithTable"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, measure_sum_quantity#9, measure_ratio_price_to_quantity#12]
    | |     +-input_scan=
    | |       +-TableScan(column_list=MeasureTable_SingleKey.[measure_sum_quantity#9, measure_sum_price#10, measure_ratio_price_to_quantity#12], table=MeasureTable_SingleKey, column_index_list=[8, 9, 11])
    | +-WithEntry
    |   +-with_query_name="WithTableSelfCrossJoin"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=WithTable.[measure_sum_price#15, measure_sum_quantity#16, measure_ratio_price_to_quantity#20]
    |       +-input_scan=
    |         +-JoinScan
    |           +-column_list=WithTable.[measure_sum_price#15, measure_sum_quantity#16, measure_ratio_price_to_quantity#17, measure_sum_price#18, measure_sum_quantity#19, measure_ratio_price_to_quantity#20]
    |           +-left_scan=
    |           | +-WithRefScan(column_list=WithTable.[measure_sum_price#15, measure_sum_quantity#16, measure_ratio_price_to_quantity#17], with_query_name="WithTable")
    |           +-right_scan=
    |             +-WithRefScan(column_list=WithTable.[measure_sum_price#18, measure_sum_quantity#19, measure_ratio_price_to_quantity#20], with_query_name="WithTable")
    +-query=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#27, $agg2#28, $agg3#29]
        +-input_scan=
          +-AggregateScan
            +-column_list=$aggregate.[$agg1#27, $agg2#28, $agg3#29]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[WithTable.measure_sum_price#21, WithTable.measure_sum_quantity#22, WithTable.measure_ratio_price_to_quantity#23, WithTableSelfCrossJoin.measure_sum_price_1#24, WithTableSelfCrossJoin.measure_sum_quantity_1#25, WithTableSelfCrossJoin.measure_ratio_price_to_quantity_2#26]
            |   +-left_scan=
            |   | +-WithRefScan(column_list=WithTable.[measure_sum_price#21, measure_sum_quantity#22, measure_ratio_price_to_quantity#23], with_query_name="WithTable")
            |   +-right_scan=
            |     +-WithRefScan(column_list=WithTableSelfCrossJoin.[measure_sum_price_1#24, measure_sum_quantity_1#25, measure_ratio_price_to_quantity_2#26], with_query_name="WithTableSelfCrossJoin")
            +-aggregate_list=
              +-$agg1#27 :=
              | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              |   +-ColumnRef(type=MEASURE<INT64>, column=WithTable.measure_sum_price#21)
              +-$agg2#28 :=
              | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              |   +-ColumnRef(type=MEASURE<INT64>, column=WithTableSelfCrossJoin.measure_sum_quantity_1#25)
              +-$agg3#29 :=
                +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<DOUBLE>) -> DOUBLE)
                  +-ColumnRef(type=MEASURE<DOUBLE>, column=WithTableSelfCrossJoin.measure_ratio_price_to_quantity_2#26)

[SQLBUILDER_OUTPUT]
WITH
  WithTable AS (
    SELECT
      measuretable_singlekey_4.a_2 AS a_2,
      measuretable_singlekey_4.a_1 AS a_1,
      measuretable_singlekey_4.a_3 AS a_3
    FROM
      (
        SELECT
          MeasureTable_SingleKey.measure_sum_quantity AS a_1,
          MeasureTable_SingleKey.measure_sum_price AS a_2,
          MeasureTable_SingleKey.measure_ratio_price_to_quantity AS a_3
        FROM
          MeasureTable_SingleKey
      ) AS measuretable_singlekey_4
  ),
  WithTableSelfCrossJoin AS (
    SELECT
      withrefscan_5.a_2 AS a_2,
      withrefscan_5.a_1 AS a_1,
      withrefscan_6.a_3 AS a_3
    FROM
      (
        SELECT
          withrefscan_5.a_2 AS a_2,
          withrefscan_5.a_1 AS a_1,
          withrefscan_5.a_3 AS a_3
        FROM
          WithTable AS withrefscan_5
      ) AS withrefscan_5
      CROSS JOIN
      (
        SELECT
          withrefscan_6.a_2 AS a_2,
          withrefscan_6.a_1 AS a_1,
          withrefscan_6.a_3 AS a_3
        FROM
          WithTable AS withrefscan_6
      ) AS withrefscan_6
  )
SELECT
  AGG(withrefscan_7.a_2) AS a_9,
  AGG(withrefscan_8.a_1) AS a_10,
  AGG(withrefscan_8.a_3) AS a_11
FROM
  (
    SELECT
      withrefscan_7.a_2 AS a_2,
      withrefscan_7.a_1 AS a_1,
      withrefscan_7.a_3 AS a_3
    FROM
      WithTable AS withrefscan_7
  ) AS withrefscan_7
  CROSS JOIN
  (
    SELECT
      withrefscan_8.a_2 AS a_2,
      withrefscan_8.a_1 AS a_1,
      withrefscan_8.a_3 AS a_3
    FROM
      WithTableSelfCrossJoin AS withrefscan_8
  ) AS withrefscan_8;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#27 AS `$col1` [INT64]
| +-$aggregate.$agg2#28 AS `$col2` [INT64]
| +-$aggregate.$agg3#29 AS `$col3` [DOUBLE]
+-query=
  +-WithScan
    +-column_list=$aggregate.[$agg1#27, $agg2#28, $agg3#29]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="WithTable"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, measure_sum_quantity#9, measure_ratio_price_to_quantity#12, struct_for_measure_measure_sum_price#34, struct_for_measure_measure_sum_quantity#35, struct_for_measure_measure_ratio_price_to_quantity#33]
    | |     +-input_scan=
    | |       +-ProjectScan
    | |         +-column_list=MeasureTable_SingleKey.[key#30, quantity#32, price#31, measure_sum_quantity#9, measure_sum_price#10, measure_ratio_price_to_quantity#12, struct_for_measure_measure_ratio_price_to_quantity#33, struct_for_measure_measure_sum_price#34, struct_for_measure_measure_sum_quantity#35]
    | |         +-expr_list=
    | |         | +-struct_for_measure_measure_ratio_price_to_quantity#33 :=
    | |         | | +-MakeStruct
    | |         | |   +-type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>
    | |         | |   +-field_list=
    | |         | |     +-MakeStruct
    | |         | |     | +-type=STRUCT<price INT64, quantity INT64>
    | |         | |     | +-field_list=
    | |         | |     |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#31)
    | |         | |     |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#32)
    | |         | |     +-MakeStruct
    | |         | |       +-type=STRUCT<key INT64>
    | |         | |       +-field_list=
    | |         | |         +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#30)
    | |         | +-struct_for_measure_measure_sum_price#34 :=
    | |         | | +-MakeStruct
    | |         | |   +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
    | |         | |   +-field_list=
    | |         | |     +-MakeStruct
    | |         | |     | +-type=STRUCT<price INT64>
    | |         | |     | +-field_list=
    | |         | |     |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#31)
    | |         | |     +-MakeStruct
    | |         | |       +-type=STRUCT<key INT64>
    | |         | |       +-field_list=
    | |         | |         +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#30)
    | |         | +-struct_for_measure_measure_sum_quantity#35 :=
    | |         |   +-MakeStruct
    | |         |     +-type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>
    | |         |     +-field_list=
    | |         |       +-MakeStruct
    | |         |       | +-type=STRUCT<quantity INT64>
    | |         |       | +-field_list=
    | |         |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#32)
    | |         |       +-MakeStruct
    | |         |         +-type=STRUCT<key INT64>
    | |         |         +-field_list=
    | |         |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#30)
    | |         +-input_scan=
    | |           +-TableScan(column_list=MeasureTable_SingleKey.[key#30, quantity#32, price#31, measure_sum_quantity#9, measure_sum_price#10, measure_ratio_price_to_quantity#12], table=MeasureTable_SingleKey, column_index_list=[0, 2, 3, 8, 9, 11])
    | +-WithEntry
    |   +-with_query_name="WithTableSelfCrossJoin"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=WithTable.[measure_sum_price#15, measure_sum_quantity#16, measure_ratio_price_to_quantity#20, struct_for_measure_measure_sum_price#40, struct_for_measure_measure_sum_quantity#44, struct_for_measure_measure_ratio_price_to_quantity#37]
    |       +-input_scan=
    |         +-JoinScan
    |           +-column_list=WithTable.[measure_sum_price#15, measure_sum_quantity#16, measure_ratio_price_to_quantity#17, measure_sum_price#18, measure_sum_quantity#19, measure_ratio_price_to_quantity#20, struct_for_measure_measure_sum_price#40, struct_for_measure_measure_sum_quantity#44, struct_for_measure_measure_ratio_price_to_quantity#36, struct_for_measure_measure_sum_price#41, struct_for_measure_measure_sum_quantity#45, struct_for_measure_measure_ratio_price_to_quantity#37]
    |           +-left_scan=
    |           | +-WithRefScan(column_list=WithTable.[measure_sum_price#15, measure_sum_quantity#16, measure_ratio_price_to_quantity#17, struct_for_measure_measure_sum_price#40, struct_for_measure_measure_sum_quantity#44, struct_for_measure_measure_ratio_price_to_quantity#36], with_query_name="WithTable")
    |           +-right_scan=
    |             +-WithRefScan(column_list=WithTable.[measure_sum_price#18, measure_sum_quantity#19, measure_ratio_price_to_quantity#20, struct_for_measure_measure_sum_price#41, struct_for_measure_measure_sum_quantity#45, struct_for_measure_measure_ratio_price_to_quantity#37], with_query_name="WithTable")
    +-query=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#27, $agg2#28, $agg3#29]
        +-input_scan=
          +-ProjectScan
            +-column_list=$aggregate.[$agg1#27, $agg2#28, $agg3#29]
            +-expr_list=
            | +-$agg1#27 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#48)
            | +-$agg2#28 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#51)
            | +-$agg3#29 :=
            |   +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
            |     +-Cast(INT64 -> DOUBLE)
            |     | +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#54)
            |     +-Cast(INT64 -> DOUBLE)
            |       +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_2#55)
            +-input_scan=
              +-AggregateScan
                +-column_list=$aggregate.[constituent_aggregate_1#48, constituent_aggregate_1#51, constituent_aggregate_1#54, constituent_aggregate_2#55]
                +-input_scan=
                | +-JoinScan
                |   +-column_list=[WithTable.measure_sum_price#21, WithTable.measure_sum_quantity#22, WithTable.measure_ratio_price_to_quantity#23, WithTableSelfCrossJoin.measure_sum_price_1#24, WithTableSelfCrossJoin.measure_sum_quantity_1#25, WithTableSelfCrossJoin.measure_ratio_price_to_quantity_2#26, WithTable.struct_for_measure_measure_sum_price#42, WithTable.struct_for_measure_measure_sum_quantity#46, WithTable.struct_for_measure_measure_ratio_price_to_quantity#38, WithTableSelfCrossJoin.struct_for_measure_measure_sum_price_1#43, WithTableSelfCrossJoin.struct_for_measure_measure_sum_quantity_1#47, WithTableSelfCrossJoin.struct_for_measure_measure_ratio_price_to_quantity_2#39]
                |   +-left_scan=
                |   | +-WithRefScan(column_list=WithTable.[measure_sum_price#21, measure_sum_quantity#22, measure_ratio_price_to_quantity#23, struct_for_measure_measure_sum_price#42, struct_for_measure_measure_sum_quantity#46, struct_for_measure_measure_ratio_price_to_quantity#38], with_query_name="WithTable")
                |   +-right_scan=
                |     +-WithRefScan(column_list=WithTableSelfCrossJoin.[measure_sum_price_1#24, measure_sum_quantity_1#25, measure_ratio_price_to_quantity_2#26, struct_for_measure_measure_sum_price_1#43, struct_for_measure_measure_sum_quantity_1#47, struct_for_measure_measure_ratio_price_to_quantity_2#39], with_query_name="WithTableSelfCrossJoin")
                +-aggregate_list=
                  +-constituent_aggregate_1#48 :=
                  | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#49)
                  |   +-group_by_list=
                  |   | +-grain_lock_key#50 :=
                  |   |   +-GetStructField
                  |   |     +-type=STRUCT<key INT64>
                  |   |     +-expr=
                  |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measure_measure_sum_price#42)
                  |   |     +-field_idx=1
                  |   +-group_by_aggregate_list=
                  |     +-$any_value_grain_lock_0#49 :=
                  |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                  |         +-GetStructField
                  |           +-type=INT64
                  |           +-expr=
                  |           | +-GetStructField
                  |           |   +-type=STRUCT<price INT64>
                  |           |   +-expr=
                  |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measure_measure_sum_price#42)
                  |           |   +-field_idx=0
                  |           +-field_idx=0
                  +-constituent_aggregate_1#51 :=
                  | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#52)
                  |   +-group_by_list=
                  |   | +-grain_lock_key#53 :=
                  |   |   +-GetStructField
                  |   |     +-type=STRUCT<key INT64>
                  |   |     +-expr=
                  |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTableSelfCrossJoin.struct_for_measure_measure_sum_quantity_1#47)
                  |   |     +-field_idx=1
                  |   +-group_by_aggregate_list=
                  |     +-$any_value_grain_lock_0#52 :=
                  |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                  |         +-GetStructField
                  |           +-type=INT64
                  |           +-expr=
                  |           | +-GetStructField
                  |           |   +-type=STRUCT<quantity INT64>
                  |           |   +-expr=
                  |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTableSelfCrossJoin.struct_for_measure_measure_sum_quantity_1#47)
                  |           |   +-field_idx=0
                  |           +-field_idx=0
                  +-constituent_aggregate_1#54 :=
                  | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#56)
                  |   +-group_by_list=
                  |   | +-grain_lock_key#57 :=
                  |   |   +-GetStructField
                  |   |     +-type=STRUCT<key INT64>
                  |   |     +-expr=
                  |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTableSelfCrossJoin.struct_for_measure_measure_ratio_price_to_quantity_2#39)
                  |   |     +-field_idx=1
                  |   +-group_by_aggregate_list=
                  |     +-$any_value_grain_lock_0#56 :=
                  |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                  |         +-GetStructField
                  |           +-type=INT64
                  |           +-expr=
                  |           | +-GetStructField
                  |           |   +-type=STRUCT<price INT64, quantity INT64>
                  |           |   +-expr=
                  |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTableSelfCrossJoin.struct_for_measure_measure_ratio_price_to_quantity_2#39)
                  |           |   +-field_idx=0
                  |           +-field_idx=0
                  +-constituent_aggregate_2#55 :=
                    +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                      +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#58)
                      +-group_by_list=
                      | +-grain_lock_key#59 :=
                      |   +-GetStructField
                      |     +-type=STRUCT<key INT64>
                      |     +-expr=
                      |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTableSelfCrossJoin.struct_for_measure_measure_ratio_price_to_quantity_2#39)
                      |     +-field_idx=1
                      +-group_by_aggregate_list=
                        +-$any_value_grain_lock_0#58 :=
                          +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                            +-GetStructField
                              +-type=INT64
                              +-expr=
                              | +-GetStructField
                              |   +-type=STRUCT<price INT64, quantity INT64>
                              |   +-expr=
                              |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTableSelfCrossJoin.struct_for_measure_measure_ratio_price_to_quantity_2#39)
                              |   +-field_idx=0
                              +-field_idx=1
[SQLBUILDER_OUTPUT]
WITH
  WithTable AS (
    SELECT
      projectscan_11.a_5 AS a_5,
      projectscan_11.a_4 AS a_4,
      projectscan_11.a_6 AS a_6,
      projectscan_11.a_9 AS a_9,
      projectscan_11.a_10 AS a_10,
      projectscan_11.a_8 AS a_8
    FROM
      (
        SELECT
          measuretable_singlekey_7.a_1 AS a_1,
          measuretable_singlekey_7.a_2 AS a_2,
          measuretable_singlekey_7.a_3 AS a_3,
          measuretable_singlekey_7.a_4 AS a_4,
          measuretable_singlekey_7.a_5 AS a_5,
          measuretable_singlekey_7.a_6 AS a_6,
          STRUCT< referenced_columns STRUCT< price INT64, quantity INT64 >, key_columns STRUCT< key INT64 > > (STRUCT<
            price INT64, quantity INT64 > (measuretable_singlekey_7.a_3, measuretable_singlekey_7.a_2), STRUCT< key INT64 >
            (measuretable_singlekey_7.a_1)) AS a_8,
          STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
            (measuretable_singlekey_7.a_3), STRUCT< key INT64 > (measuretable_singlekey_7.a_1)) AS a_9,
          STRUCT< referenced_columns STRUCT< quantity INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< quantity INT64 >
            (measuretable_singlekey_7.a_2), STRUCT< key INT64 > (measuretable_singlekey_7.a_1)) AS a_10
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.quantity AS a_2,
              MeasureTable_SingleKey.price AS a_3,
              MeasureTable_SingleKey.measure_sum_quantity AS a_4,
              MeasureTable_SingleKey.measure_sum_price AS a_5,
              MeasureTable_SingleKey.measure_ratio_price_to_quantity AS a_6
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_7
      ) AS projectscan_11
  ),
  WithTableSelfCrossJoin AS (
    SELECT
      withrefscan_12.a_5 AS a_5,
      withrefscan_12.a_4 AS a_4,
      withrefscan_13.a_6 AS a_6,
      withrefscan_12.a_9 AS a_9,
      withrefscan_12.a_10 AS a_10,
      withrefscan_13.a_8 AS a_8
    FROM
      (
        SELECT
          withrefscan_12.a_5 AS a_5,
          withrefscan_12.a_4 AS a_4,
          withrefscan_12.a_6 AS a_6,
          withrefscan_12.a_9 AS a_9,
          withrefscan_12.a_10 AS a_10,
          withrefscan_12.a_8 AS a_8
        FROM
          WithTable AS withrefscan_12
      ) AS withrefscan_12
      CROSS JOIN
      (
        SELECT
          withrefscan_13.a_5 AS a_5,
          withrefscan_13.a_4 AS a_4,
          withrefscan_13.a_6 AS a_6,
          withrefscan_13.a_9 AS a_9,
          withrefscan_13.a_10 AS a_10,
          withrefscan_13.a_8 AS a_8
        FROM
          WithTable AS withrefscan_13
      ) AS withrefscan_13
  )
SELECT
  aggregatescan_20.a_16 AS a_21,
  aggregatescan_20.a_17 AS a_22,
  CAST(aggregatescan_20.a_18 AS DOUBLE) / CAST(aggregatescan_20.a_19 AS DOUBLE) AS a_23
FROM
  (
    SELECT
      SUM(ANY_VALUE(withrefscan_14.a_9.referenced_columns.price)
        GROUP BY withrefscan_14.a_9.key_columns) AS a_16,
      SUM(ANY_VALUE(withrefscan_15.a_10.referenced_columns.quantity)
        GROUP BY withrefscan_15.a_10.key_columns) AS a_17,
      SUM(ANY_VALUE(withrefscan_15.a_8.referenced_columns.price)
        GROUP BY withrefscan_15.a_8.key_columns) AS a_18,
      SUM(ANY_VALUE(withrefscan_15.a_8.referenced_columns.quantity)
        GROUP BY withrefscan_15.a_8.key_columns) AS a_19
    FROM
      (
        SELECT
          withrefscan_14.a_5 AS a_5,
          withrefscan_14.a_4 AS a_4,
          withrefscan_14.a_6 AS a_6,
          withrefscan_14.a_9 AS a_9,
          withrefscan_14.a_10 AS a_10,
          withrefscan_14.a_8 AS a_8
        FROM
          WithTable AS withrefscan_14
      ) AS withrefscan_14
      CROSS JOIN
      (
        SELECT
          withrefscan_15.a_5 AS a_5,
          withrefscan_15.a_4 AS a_4,
          withrefscan_15.a_6 AS a_6,
          withrefscan_15.a_9 AS a_9,
          withrefscan_15.a_10 AS a_10,
          withrefscan_15.a_8 AS a_8
        FROM
          WithTableSelfCrossJoin AS withrefscan_15
      ) AS withrefscan_15
  ) AS aggregatescan_20;
==

# Measures can propagate through PIPE IF, and Subpipeline Scans
# Disable SQLBuilder because the reconstructed syntax uses SELECT AS STRUCT
# which does not support MEASURE
[language_features=ENABLE_MEASURES,MULTILEVEL_AGGREGATION,SQL_GRAPH,GROUP_BY_STRUCT,PIPES,PIPE_IF]
[no_run_sqlbuilder]
[no_enable_literal_replacement]
# Literal replacement doesn't work because parameters don't work as constants
# in the IF conditions yet.
FROM MeasureTable_SingleKey
|> IF true THEN (|> SELECT measure_sum_quantity)
|> AGGREGATE AGG(measure_sum_quantity) as col
--
QueryStmt
+-output_column_list=
| +-$aggregate.col#15 AS col [INT64]
+-query=
  +-AggregateScan
    +-column_list=[$aggregate.col#15]
    +-input_scan=
    | +-PipeIfScan
    |   +-column_list=[MeasureTable_SingleKey.measure_sum_quantity#9]
    |   +-input_scan=
    |   | +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[8])
    |   +-selected_case=0
    |   +-if_case_list=
    |     +-PipeIfCase
    |       +-condition=
    |       | +-Literal(type=BOOL, value=true)
    |       +-subpipeline_sql="(|> SELECT measure_sum_quantity)"
    |       +-subpipeline=
    |         +-Subpipeline
    |           +-scan=
    |             +-ProjectScan
    |               +-column_list=[MeasureTable_SingleKey.measure_sum_quantity#9]
    |               +-input_scan=
    |                 +-SubpipelineInputScan(column_list=[MeasureTable_SingleKey.measure_sum_quantity#9])
    +-aggregate_list=
      +-col#15 :=
        +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_quantity#9)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.col#15 AS col [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.col#15]
    +-expr_list=
    | +-col#15 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#19)
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.constituent_aggregate_1#19]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=MeasureTable_SingleKey.[measure_sum_quantity#9, struct_for_measure_measure_sum_quantity#18]
        |   +-input_scan=
        |     +-ProjectScan
        |       +-column_list=MeasureTable_SingleKey.[key#16, quantity#17, measure_sum_quantity#9, struct_for_measure_measure_sum_quantity#18]
        |       +-expr_list=
        |       | +-struct_for_measure_measure_sum_quantity#18 :=
        |       |   +-MakeStruct
        |       |     +-type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>
        |       |     +-field_list=
        |       |       +-MakeStruct
        |       |       | +-type=STRUCT<quantity INT64>
        |       |       | +-field_list=
        |       |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#17)
        |       |       +-MakeStruct
        |       |         +-type=STRUCT<key INT64>
        |       |         +-field_list=
        |       |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#16)
        |       +-input_scan=
        |         +-TableScan(column_list=MeasureTable_SingleKey.[key#16, quantity#17, measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[0, 2, 8])
        +-aggregate_list=
          +-constituent_aggregate_1#19 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#20)
              +-group_by_list=
              | +-grain_lock_key#21 :=
              |   +-GetStructField
              |     +-type=STRUCT<key INT64>
              |     +-expr=
              |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_sum_quantity#18)
              |     +-field_idx=1
              +-group_by_aggregate_list=
                +-$any_value_grain_lock_0#20 :=
                  +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                    +-GetStructField
                      +-type=INT64
                      +-expr=
                      | +-GetStructField
                      |   +-type=STRUCT<quantity INT64>
                      |   +-expr=
                      |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_sum_quantity#18)
                      |   +-field_idx=0
                      +-field_idx=0
==

# PIPE LOG is allowed to propagate measures, but measures aren't currently
# a type that can be returned. Update this test case if that changes.
[language_features=ENABLE_MEASURES,MULTILEVEL_AGGREGATION,SQL_GRAPH,GROUP_BY_STRUCT,PIPES,PIPE_LOG]
FROM MeasureTable_SingleKey
|> LOG
|> AGGREGATE AGG(measure_sum_quantity) as col
--
ERROR: Returning expressions of type MEASURE is not allowed [at 2:1]
|> LOG
^
==

# Measures can propagate through PIPE STATIC DESCRIBE
[language_features=ENABLE_MEASURES,MULTILEVEL_AGGREGATION,SQL_GRAPH,GROUP_BY_STRUCT,PIPES,PIPE_STATIC_DESCRIBE]
FROM MeasureTable_SingleKey
|> STATIC_DESCRIBE
|> AGGREGATE AGG(measure_sum_quantity) as col
--
QueryStmt
+-output_column_list=
| +-$aggregate.col#15 AS col [INT64]
+-query=
  +-AggregateScan
    +-column_list=[$aggregate.col#15]
    +-input_scan=
    | +-StaticDescribeScan
    |   +-column_list=[MeasureTable_SingleKey.measure_sum_quantity#9]
    |   +-describe_text=
    |   |   """
    |   |   NameList:
    |   |     key INT64 MeasureTable_SingleKey.key#1
    |   |     country STRING MeasureTable_SingleKey.country#2
    |   |     quantity INT64 MeasureTable_SingleKey.quantity#3
    |   |     price INT64 MeasureTable_SingleKey.price#4
    |   |     measure_count_star MEASURE<INT64> MeasureTable_SingleKey.measure_count_star#5
    |   |     measure_count_star_per_key MEASURE<INT64> MeasureTable_SingleKey.measure_count_star_per_key#6
    |   |     measure_count_distinct_key MEASURE<INT64> MeasureTable_SingleKey.measure_count_distinct_key#7
    |   |     measure_count_key_per_key MEASURE<INT64> MeasureTable_SingleKey.measure_count_key_per_key#8
    |   |     measure_sum_quantity MEASURE<INT64> MeasureTable_SingleKey.measure_sum_quantity#9
    |   |     measure_sum_price MEASURE<INT64> MeasureTable_SingleKey.measure_sum_price#10
    |   |     measure_sum_price_times_quantity MEASURE<INT64> MeasureTable_SingleKey.measure_sum_price_times_quantity#11
    |   |     measure_ratio_price_to_quantity MEASURE<DOUBLE> MeasureTable_SingleKey.measure_ratio_price_to_quantity#12
    |   |     measure_ratio_price_to_quantity_per_key MEASURE<DOUBLE> MeasureTable_SingleKey.measure_ratio_price_to_quantity_per_key#13
    |   |     measure_complex_ratio_metric MEASURE<DOUBLE> MeasureTable_SingleKey.measure_complex_ratio_metric#14
    |   |   NameScope:
    |   |     Names:
    |   |       country -> STRING (MeasureTable_SingleKey.country#2) (implicit)
    |   |       key -> INT64 (MeasureTable_SingleKey.key#1) (implicit)
    |   |       measure_complex_ratio_metric -> MEASURE<DOUBLE> (MeasureTable_SingleKey.measure_complex_ratio_metric#14) (implicit)
    |   |       measure_count_distinct_key -> MEASURE<INT64> (MeasureTable_SingleKey.measure_count_distinct_key#7) (implicit)
    |   |       measure_count_key_per_key -> MEASURE<INT64> (MeasureTable_SingleKey.measure_count_key_per_key#8) (implicit)
    |   |       measure_count_star -> MEASURE<INT64> (MeasureTable_SingleKey.measure_count_star#5) (implicit)
    |   |       measure_count_star_per_key -> MEASURE<INT64> (MeasureTable_SingleKey.measure_count_star_per_key#6) (implicit)
    |   |       measure_ratio_price_to_quantity -> MEASURE<DOUBLE> (MeasureTable_SingleKey.measure_ratio_price_to_quantity#12) (implicit)
    |   |       measure_ratio_price_to_quantity_per_key -> MEASURE<DOUBLE> (MeasureTable_SingleKey.measure_ratio_price_to_quantity_per_key#13) (implicit)
    |   |       measure_sum_price -> MEASURE<INT64> (MeasureTable_SingleKey.measure_sum_price#10) (implicit)
    |   |       measure_sum_price_times_quantity -> MEASURE<INT64> (MeasureTable_SingleKey.measure_sum_price_times_quantity#11) (implicit)
    |   |       measure_sum_quantity -> MEASURE<INT64> (MeasureTable_SingleKey.measure_sum_quantity#9) (implicit)
    |   |       price -> INT64 (MeasureTable_SingleKey.price#4) (implicit)
    |   |       quantity -> INT64 (MeasureTable_SingleKey.quantity#3) (implicit)
    |   |     Range variables:
    |   |       MeasureTable_SingleKey -> RANGE_VARIABLE<key,country,quantity,price,measure_count_star,measure_count_star_per_key,measure_count_distinct_key,measure_count_key_per_key,measure_sum_quantity,measure_sum_price,measure_sum_price_times_quantity,measure_ratio_price_to_quantity,measure_ratio_price_to_quantity_per_key,measure_complex_ratio_metric>
    |   |   """
    |   +-input_scan=
    |     +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[8])
    +-aggregate_list=
      +-col#15 :=
        +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_quantity#9)

[SQLBUILDER_OUTPUT]
SELECT
  AGG(measuretable_singlekey_2.a_1) AS col
FROM
  (
    SELECT
      MeasureTable_SingleKey.measure_sum_quantity AS a_1
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_2;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.col#15 AS col [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.col#15]
    +-expr_list=
    | +-col#15 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#19)
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.constituent_aggregate_1#19]
        +-input_scan=
        | +-StaticDescribeScan
        |   +-column_list=MeasureTable_SingleKey.[measure_sum_quantity#9, struct_for_measure_measure_sum_quantity#18]
        |   +-describe_text=
        |   |   """
        |   |   NameList:
        |   |     key INT64 MeasureTable_SingleKey.key#1
        |   |     country STRING MeasureTable_SingleKey.country#2
        |   |     quantity INT64 MeasureTable_SingleKey.quantity#3
        |   |     price INT64 MeasureTable_SingleKey.price#4
        |   |     measure_count_star MEASURE<INT64> MeasureTable_SingleKey.measure_count_star#5
        |   |     measure_count_star_per_key MEASURE<INT64> MeasureTable_SingleKey.measure_count_star_per_key#6
        |   |     measure_count_distinct_key MEASURE<INT64> MeasureTable_SingleKey.measure_count_distinct_key#7
        |   |     measure_count_key_per_key MEASURE<INT64> MeasureTable_SingleKey.measure_count_key_per_key#8
        |   |     measure_sum_quantity MEASURE<INT64> MeasureTable_SingleKey.measure_sum_quantity#9
        |   |     measure_sum_price MEASURE<INT64> MeasureTable_SingleKey.measure_sum_price#10
        |   |     measure_sum_price_times_quantity MEASURE<INT64> MeasureTable_SingleKey.measure_sum_price_times_quantity#11
        |   |     measure_ratio_price_to_quantity MEASURE<DOUBLE> MeasureTable_SingleKey.measure_ratio_price_to_quantity#12
        |   |     measure_ratio_price_to_quantity_per_key MEASURE<DOUBLE> MeasureTable_SingleKey.measure_ratio_price_to_quantity_per_key#13
        |   |     measure_complex_ratio_metric MEASURE<DOUBLE> MeasureTable_SingleKey.measure_complex_ratio_metric#14
        |   |   NameScope:
        |   |     Names:
        |   |       country -> STRING (MeasureTable_SingleKey.country#2) (implicit)
        |   |       key -> INT64 (MeasureTable_SingleKey.key#1) (implicit)
        |   |       measure_complex_ratio_metric -> MEASURE<DOUBLE> (MeasureTable_SingleKey.measure_complex_ratio_metric#14) (implicit)
        |   |       measure_count_distinct_key -> MEASURE<INT64> (MeasureTable_SingleKey.measure_count_distinct_key#7) (implicit)
        |   |       measure_count_key_per_key -> MEASURE<INT64> (MeasureTable_SingleKey.measure_count_key_per_key#8) (implicit)
        |   |       measure_count_star -> MEASURE<INT64> (MeasureTable_SingleKey.measure_count_star#5) (implicit)
        |   |       measure_count_star_per_key -> MEASURE<INT64> (MeasureTable_SingleKey.measure_count_star_per_key#6) (implicit)
        |   |       measure_ratio_price_to_quantity -> MEASURE<DOUBLE> (MeasureTable_SingleKey.measure_ratio_price_to_quantity#12) (implicit)
        |   |       measure_ratio_price_to_quantity_per_key -> MEASURE<DOUBLE> (MeasureTable_SingleKey.measure_ratio_price_to_quantity_per_key#13) (implicit)
        |   |       measure_sum_price -> MEASURE<INT64> (MeasureTable_SingleKey.measure_sum_price#10) (implicit)
        |   |       measure_sum_price_times_quantity -> MEASURE<INT64> (MeasureTable_SingleKey.measure_sum_price_times_quantity#11) (implicit)
        |   |       measure_sum_quantity -> MEASURE<INT64> (MeasureTable_SingleKey.measure_sum_quantity#9) (implicit)
        |   |       price -> INT64 (MeasureTable_SingleKey.price#4) (implicit)
        |   |       quantity -> INT64 (MeasureTable_SingleKey.quantity#3) (implicit)
        |   |     Range variables:
        |   |       MeasureTable_SingleKey -> RANGE_VARIABLE<key,country,quantity,price,measure_count_star,measure_count_star_per_key,measure_count_distinct_key,measure_count_key_per_key,measure_sum_quantity,measure_sum_price,measure_sum_price_times_quantity,measure_ratio_price_to_quantity,measure_ratio_price_to_quantity_per_key,measure_complex_ratio_metric>
        |   |   """
        |   +-input_scan=
        |     +-ProjectScan
        |       +-column_list=MeasureTable_SingleKey.[key#16, quantity#17, measure_sum_quantity#9, struct_for_measure_measure_sum_quantity#18]
        |       +-expr_list=
        |       | +-struct_for_measure_measure_sum_quantity#18 :=
        |       |   +-MakeStruct
        |       |     +-type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>
        |       |     +-field_list=
        |       |       +-MakeStruct
        |       |       | +-type=STRUCT<quantity INT64>
        |       |       | +-field_list=
        |       |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#17)
        |       |       +-MakeStruct
        |       |         +-type=STRUCT<key INT64>
        |       |         +-field_list=
        |       |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#16)
        |       +-input_scan=
        |         +-TableScan(column_list=MeasureTable_SingleKey.[key#16, quantity#17, measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[0, 2, 8])
        +-aggregate_list=
          +-constituent_aggregate_1#19 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#20)
              +-group_by_list=
              | +-grain_lock_key#21 :=
              |   +-GetStructField
              |     +-type=STRUCT<key INT64>
              |     +-expr=
              |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_sum_quantity#18)
              |     +-field_idx=1
              +-group_by_aggregate_list=
                +-$any_value_grain_lock_0#20 :=
                  +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                    +-GetStructField
                      +-type=INT64
                      +-expr=
                      | +-GetStructField
                      |   +-type=STRUCT<quantity INT64>
                      |   +-expr=
                      |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_sum_quantity#18)
                      |   +-field_idx=0
                      +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_8.a_7 AS col
FROM
  (
    SELECT
      SUM(ANY_VALUE(projectscan_6.a_5.referenced_columns.quantity)
        GROUP BY projectscan_6.a_5.key_columns) AS a_7
    FROM
      (
        SELECT
          measuretable_singlekey_4.a_1 AS a_1,
          measuretable_singlekey_4.a_2 AS a_2,
          measuretable_singlekey_4.a_3 AS a_3,
          STRUCT< referenced_columns STRUCT< quantity INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< quantity INT64 >
            (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.quantity AS a_2,
              MeasureTable_SingleKey.measure_sum_quantity AS a_3
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_4
      ) AS projectscan_6
  ) AS aggregatescan_8;
==

# Measures can propagate through SampleScan
[language_features=ENABLE_MEASURES,MULTILEVEL_AGGREGATION,SQL_GRAPH,GROUP_BY_STRUCT,TABLESAMPLE]
SELECT AGG(m1) as col from
(SELECT measure_sum_price as m1 FROM MeasureTable_SingleKey TABLESAMPLE BERNOULLI (0 PERCENT))
--
QueryStmt
+-output_column_list=
| +-$aggregate.col#15 AS col [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.col#15]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.col#15]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[MeasureTable_SingleKey.measure_sum_price#10]
        |   +-input_scan=
        |     +-SampleScan
        |       +-column_list=[MeasureTable_SingleKey.measure_sum_price#10]
        |       +-input_scan=
        |       | +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[9])
        |       +-method="bernoulli"
        |       +-size=
        |       | +-Literal(type=INT64, value=0)
        |       +-unit=PERCENT
        +-aggregate_list=
          +-col#15 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)

[SQLBUILDER_OUTPUT]
SELECT
  AGG(projectscan_2.a_1) AS col
FROM
  (
    SELECT
      MeasureTable_SingleKey.measure_sum_price AS a_1
    FROM
      MeasureTable_SingleKey TABLESAMPLE bernoulli(0 PERCENT)
  ) AS projectscan_2;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.col#15 AS col [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.col#15]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$aggregate.col#15]
        +-expr_list=
        | +-col#15 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#19)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$aggregate.constituent_aggregate_1#19]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, struct_for_measure_measure_sum_price#18]
            |   +-input_scan=
            |     +-SampleScan
            |       +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, struct_for_measure_measure_sum_price#18]
            |       +-input_scan=
            |       | +-ProjectScan
            |       |   +-column_list=MeasureTable_SingleKey.[key#16, price#17, measure_sum_price#10, struct_for_measure_measure_sum_price#18]
            |       |   +-expr_list=
            |       |   | +-struct_for_measure_measure_sum_price#18 :=
            |       |   |   +-MakeStruct
            |       |   |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
            |       |   |     +-field_list=
            |       |   |       +-MakeStruct
            |       |   |       | +-type=STRUCT<price INT64>
            |       |   |       | +-field_list=
            |       |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#17)
            |       |   |       +-MakeStruct
            |       |   |         +-type=STRUCT<key INT64>
            |       |   |         +-field_list=
            |       |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#16)
            |       |   +-input_scan=
            |       |     +-TableScan(column_list=MeasureTable_SingleKey.[key#16, price#17, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 3, 9])
            |       +-method="bernoulli"
            |       +-size=
            |       | +-Literal(type=INT64, value=0)
            |       +-unit=PERCENT
            +-aggregate_list=
              +-constituent_aggregate_1#19 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#20)
                  +-group_by_list=
                  | +-grain_lock_key#21 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_sum_price#18)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#20 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-GetStructField
                          +-type=INT64
                          +-expr=
                          | +-GetStructField
                          |   +-type=STRUCT<price INT64>
                          |   +-expr=
                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_sum_price#18)
                          |   +-field_idx=0
                          +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_9.a_8 AS col
FROM
  (
    SELECT
      SUM(ANY_VALUE(projectscan_7.a_5.referenced_columns.price)
        GROUP BY projectscan_7.a_5.key_columns) AS a_8
    FROM
      (
        SELECT
          projectscan_6.a_3 AS a_3,
          projectscan_6.a_5 AS a_5
        FROM
          (
            SELECT
              measuretable_singlekey_4.a_1 AS a_1,
              measuretable_singlekey_4.a_2 AS a_2,
              measuretable_singlekey_4.a_3 AS a_3,
              STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
                (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
            FROM
              (
                SELECT
                  MeasureTable_SingleKey.key AS a_1,
                  MeasureTable_SingleKey.price AS a_2,
                  MeasureTable_SingleKey.measure_sum_price AS a_3
                FROM
                  MeasureTable_SingleKey
              ) AS measuretable_singlekey_4
          ) AS projectscan_6 TABLESAMPLE bernoulli(0 PERCENT)
      ) AS projectscan_7
  ) AS aggregatescan_9;
==

# Measures can propagate through AnalyticScan
[language_features=ENABLE_MEASURES,MULTILEVEL_AGGREGATION,SQL_GRAPH,GROUP_BY_STRUCT,ANALYTIC_FUNCTIONS]
SELECT AGG(m1) as col from
(SELECT measure_sum_price as m1, ANY_VALUE(key) OVER () as analytic_col
FROM MeasureTable_SingleKey)
--
QueryStmt
+-output_column_list=
| +-$aggregate.col#17 AS col [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.col#17]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.col#17]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[MeasureTable_SingleKey.measure_sum_price#10, $analytic.analytic_col#16]
        |   +-input_scan=
        |     +-AnalyticScan
        |       +-column_list=[MeasureTable_SingleKey.key#1, MeasureTable_SingleKey.measure_sum_price#10, $analytic.analytic_col#16]
        |       +-input_scan=
        |       | +-TableScan(column_list=MeasureTable_SingleKey.[key#1, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 9])
        |       +-function_group_list=
        |         +-AnalyticFunctionGroup
        |           +-analytic_function_list=
        |             +-analytic_col#16 :=
        |               +-AnalyticFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
        |                 +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
        |                 +-window_frame=
        |                   +-WindowFrame(frame_unit=ROWS)
        |                     +-start_expr=
        |                     | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
        |                     +-end_expr=
        |                       +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
        +-aggregate_list=
          +-col#17 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)

[SQLBUILDER_OUTPUT]
SELECT
  AGG(projectscan_6.a_2) AS col
FROM
  (
    SELECT
      analyticscan_5.a_2 AS a_2,
      analyticscan_5.a_4 AS a_4
    FROM
      (
        SELECT
          measuretable_singlekey_3.a_1 AS a_1,
          measuretable_singlekey_3.a_2 AS a_2,
          ANY_VALUE(measuretable_singlekey_3.a_1) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS a_4
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.measure_sum_price AS a_2
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_3
      ) AS analyticscan_5
  ) AS projectscan_6;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.col#17 AS col [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.col#17]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$aggregate.col#17]
        +-expr_list=
        | +-col#17 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#20)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$aggregate.constituent_aggregate_1#20]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[MeasureTable_SingleKey.measure_sum_price#10, $analytic.analytic_col#16, MeasureTable_SingleKey.struct_for_measure_measure_sum_price#19]
            |   +-input_scan=
            |     +-AnalyticScan
            |       +-column_list=[MeasureTable_SingleKey.key#1, MeasureTable_SingleKey.measure_sum_price#10, $analytic.analytic_col#16, MeasureTable_SingleKey.struct_for_measure_measure_sum_price#19]
            |       +-input_scan=
            |       | +-ProjectScan
            |       |   +-column_list=MeasureTable_SingleKey.[key#1, price#18, measure_sum_price#10, struct_for_measure_measure_sum_price#19]
            |       |   +-expr_list=
            |       |   | +-struct_for_measure_measure_sum_price#19 :=
            |       |   |   +-MakeStruct
            |       |   |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
            |       |   |     +-field_list=
            |       |   |       +-MakeStruct
            |       |   |       | +-type=STRUCT<price INT64>
            |       |   |       | +-field_list=
            |       |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#18)
            |       |   |       +-MakeStruct
            |       |   |         +-type=STRUCT<key INT64>
            |       |   |         +-field_list=
            |       |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
            |       |   +-input_scan=
            |       |     +-TableScan(column_list=MeasureTable_SingleKey.[key#1, price#18, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 3, 9])
            |       +-function_group_list=
            |         +-AnalyticFunctionGroup
            |           +-analytic_function_list=
            |             +-analytic_col#16 :=
            |               +-AnalyticFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
            |                 +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
            |                 +-window_frame=
            |                   +-WindowFrame(frame_unit=ROWS)
            |                     +-start_expr=
            |                     | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
            |                     +-end_expr=
            |                       +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
            +-aggregate_list=
              +-constituent_aggregate_1#20 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#21)
                  +-group_by_list=
                  | +-grain_lock_key#22 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_sum_price#19)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#21 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-GetStructField
                          +-type=INT64
                          +-expr=
                          | +-GetStructField
                          |   +-type=STRUCT<price INT64>
                          |   +-expr=
                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measure_measure_sum_price#19)
                          |   +-field_idx=0
                          +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_11.a_10 AS col
FROM
  (
    SELECT
      SUM(ANY_VALUE(projectscan_9.a_5.referenced_columns.price)
        GROUP BY projectscan_9.a_5.key_columns) AS a_10
    FROM
      (
        SELECT
          analyticscan_8.a_3 AS a_3,
          analyticscan_8.a_7 AS a_7,
          analyticscan_8.a_5 AS a_5
        FROM
          (
            SELECT
              projectscan_6.a_1 AS a_1,
              projectscan_6.a_3 AS a_3,
              ANY_VALUE(projectscan_6.a_1) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS a_7,
              projectscan_6.a_5 AS a_5
            FROM
              (
                SELECT
                  measuretable_singlekey_4.a_1 AS a_1,
                  measuretable_singlekey_4.a_2 AS a_2,
                  measuretable_singlekey_4.a_3 AS a_3,
                  STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
                    (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
                FROM
                  (
                    SELECT
                      MeasureTable_SingleKey.key AS a_1,
                      MeasureTable_SingleKey.price AS a_2,
                      MeasureTable_SingleKey.measure_sum_price AS a_3
                    FROM
                      MeasureTable_SingleKey
                  ) AS measuretable_singlekey_4
              ) AS projectscan_6
          ) AS analyticscan_8
      ) AS projectscan_9
  ) AS aggregatescan_11;
==

# Measures can propagate through AnalyticScan
[language_features=ENABLE_MEASURES,ANALYTIC_FUNCTIONS]
SELECT 1
FROM (
  SELECT
    measure_sum_quantity,
    SUM(1) OVER ()
  FROM MeasureTable_SingleKey
)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#17 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#17]
    +-expr_list=
    | +-$col1#17 := Literal(type=INT64, value=1)
    +-input_scan=
      +-ProjectScan
        +-column_list=[MeasureTable_SingleKey.measure_sum_quantity#9, $analytic.$analytic1#16]
        +-input_scan=
          +-AnalyticScan
            +-column_list=[MeasureTable_SingleKey.measure_sum_quantity#9, $analytic.$analytic1#16]
            +-input_scan=
            | +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[8])
            +-function_group_list=
              +-AnalyticFunctionGroup
                +-analytic_function_list=
                  +-$analytic1#16 :=
                    +-AnalyticFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                      +-Literal(type=INT64, value=1)
                      +-window_frame=
                        +-WindowFrame(frame_unit=ROWS)
                          +-start_expr=
                          | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                          +-end_expr=
                            +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)

[SQLBUILDER_OUTPUT]
SELECT
  1 AS a_5
FROM
  (
    SELECT
      measuretable_singlekey_2.a_1 AS a_1,
      SUM(1) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS a_3
    FROM
      (
        SELECT
          MeasureTable_SingleKey.measure_sum_quantity AS a_1
        FROM
          MeasureTable_SingleKey
      ) AS measuretable_singlekey_2
  ) AS projectscan_4;
==

# Measures columns can be used as input to pipe TEE
[language_features=ENABLE_MEASURES,MULTILEVEL_AGGREGATION,PIPES,PIPE_TEE]
[supported_statement_kinds=QUERY,GENERALIZED_QUERY]
[no_run_sqlbuilder]
FROM MeasureTable_SingleKey
|> TEE(
    |> SELECT 1 as col
   ), (
    |> SELECT 2 as col
   )
|> SELECT 3 as col

--
GeneralizedQueryStmt
+-output_schema=
| +-OutputSchema
|   +-output_column_list=
|     +-$pipe_select.col#17 AS col [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$pipe_select.col#17]
    +-expr_list=
    | +-col#17 := Literal(type=INT64, value=3)
    +-input_scan=
      +-PipeTeeScan
        +-input_scan=
        | +-TableScan(table=MeasureTable_SingleKey)
        +-subpipeline_list=
          +-GeneralizedQuerySubpipeline
          | +-subpipeline=
          | | +-Subpipeline
          | |   +-scan=
          | |     +-ProjectScan
          | |       +-column_list=[$pipe_select.col#15]
          | |       +-expr_list=
          | |       | +-col#15 := Literal(type=INT64, value=1)
          | |       +-input_scan=
          | |         +-SubpipelineInputScan
          | +-output_schema=
          |   +-OutputSchema
          |     +-output_column_list=
          |       +-$pipe_select.col#15 AS col [INT64]
          +-GeneralizedQuerySubpipeline
            +-subpipeline=
            | +-Subpipeline
            |   +-scan=
            |     +-ProjectScan
            |       +-column_list=[$pipe_select.col#16]
            |       +-expr_list=
            |       | +-col#16 := Literal(type=INT64, value=2)
            |       +-input_scan=
            |         +-SubpipelineInputScan
            +-output_schema=
              +-OutputSchema
                +-output_column_list=
                  +-$pipe_select.col#16 AS col [INT64]


[REWRITTEN AST]
MultiStmt
+-statement_list=
  +-CreateWithEntryStmt
  | +-with_entry=
  |   +-WithEntry
  |     +-with_query_name="$tee_cte_1"
  |     +-with_subquery=
  |       +-TableScan(table=MeasureTable_SingleKey)
  +-QueryStmt
  | +-output_column_list=
  | | +-$pipe_select.col#15 AS col [INT64]
  | +-query=
  |   +-ProjectScan
  |     +-column_list=[$pipe_select.col#15]
  |     +-expr_list=
  |     | +-col#15 := Literal(type=INT64, value=1)
  |     +-input_scan=
  |       +-WithRefScan(with_query_name="$tee_cte_1")
  +-QueryStmt
  | +-output_column_list=
  | | +-$pipe_select.col#16 AS col [INT64]
  | +-query=
  |   +-ProjectScan
  |     +-column_list=[$pipe_select.col#16]
  |     +-expr_list=
  |     | +-col#16 := Literal(type=INT64, value=2)
  |     +-input_scan=
  |       +-WithRefScan(with_query_name="$tee_cte_1")
  +-QueryStmt
    +-output_column_list=
    | +-$pipe_select.col#17 AS col [INT64]
    +-query=
      +-ProjectScan
        +-column_list=[$pipe_select.col#17]
        +-expr_list=
        | +-col#17 := Literal(type=INT64, value=3)
        +-input_scan=
          +-WithRefScan(with_query_name="$tee_cte_1")
==

# Measure columns can be used as input to pipe FORK
[language_features=ENABLE_MEASURES,MULTILEVEL_AGGREGATION,PIPES,PIPE_FORK]
[supported_statement_kinds=QUERY,GENERALIZED_QUERY]
[no_run_sqlbuilder]
FROM MeasureTable_SingleKey
|> FORK(
    |> SELECT 1 as col
   ), (
    |> SELECT 2 as col
   )
--
GeneralizedQueryStmt
+-query=
  +-PipeForkScan
    +-input_scan=
    | +-TableScan(table=MeasureTable_SingleKey)
    +-subpipeline_list=
      +-GeneralizedQuerySubpipeline
      | +-subpipeline=
      | | +-Subpipeline
      | |   +-scan=
      | |     +-ProjectScan
      | |       +-column_list=[$pipe_select.col#15]
      | |       +-expr_list=
      | |       | +-col#15 := Literal(type=INT64, value=1)
      | |       +-input_scan=
      | |         +-SubpipelineInputScan
      | +-output_schema=
      |   +-OutputSchema
      |     +-output_column_list=
      |       +-$pipe_select.col#15 AS col [INT64]
      +-GeneralizedQuerySubpipeline
        +-subpipeline=
        | +-Subpipeline
        |   +-scan=
        |     +-ProjectScan
        |       +-column_list=[$pipe_select.col#16]
        |       +-expr_list=
        |       | +-col#16 := Literal(type=INT64, value=2)
        |       +-input_scan=
        |         +-SubpipelineInputScan
        +-output_schema=
          +-OutputSchema
            +-output_column_list=
              +-$pipe_select.col#16 AS col [INT64]


[REWRITTEN AST]
MultiStmt
+-statement_list=
  +-CreateWithEntryStmt
  | +-with_entry=
  |   +-WithEntry
  |     +-with_query_name="$fork_cte_1"
  |     +-with_subquery=
  |       +-TableScan(table=MeasureTable_SingleKey)
  +-QueryStmt
  | +-output_column_list=
  | | +-$pipe_select.col#15 AS col [INT64]
  | +-query=
  |   +-ProjectScan
  |     +-column_list=[$pipe_select.col#15]
  |     +-expr_list=
  |     | +-col#15 := Literal(type=INT64, value=1)
  |     +-input_scan=
  |       +-WithRefScan(with_query_name="$fork_cte_1")
  +-QueryStmt
    +-output_column_list=
    | +-$pipe_select.col#16 AS col [INT64]
    +-query=
      +-ProjectScan
        +-column_list=[$pipe_select.col#16]
        +-expr_list=
        | +-col#16 := Literal(type=INT64, value=2)
        +-input_scan=
          +-WithRefScan(with_query_name="$fork_cte_1")
==

# Aggregating a MEASURE pseudo column
SELECT AGG(measure_count_star),
FROM MeasureTable_WithPseudoColumns
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#7 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#7]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#7]
        +-input_scan=
        | +-TableScan(column_list=[MeasureTable_WithPseudoColumns.measure_count_star#5], table=MeasureTable_WithPseudoColumns, column_index_list=[4])
        +-aggregate_list=
          +-$agg1#7 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_WithPseudoColumns.measure_count_star#5)

[SQLBUILDER_OUTPUT]
SELECT
  AGG(measuretable_withpseudocolumns_2.a_1) AS a_3
FROM
  (
    SELECT
      MeasureTable_WithPseudoColumns.measure_count_star AS a_1
    FROM
      MeasureTable_WithPseudoColumns
  ) AS measuretable_withpseudocolumns_2;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#7 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#7]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#7]
        +-expr_list=
        | +-$agg1#7 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#10)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$aggregate.constituent_aggregate_1#10]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_WithPseudoColumns.[key#8, measure_count_star#5, struct_for_measure_measure_count_star#9]
            |   +-expr_list=
            |   | +-struct_for_measure_measure_count_star#9 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct(type=STRUCT<>)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_WithPseudoColumns.key#8)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_WithPseudoColumns.[key#8, measure_count_star#5], table=MeasureTable_WithPseudoColumns, column_index_list=[0, 4])
            +-aggregate_list=
              +-constituent_aggregate_1#10 :=
                +-AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
                  +-group_by_list=
                    +-grain_lock_key#11 :=
                      +-GetStructField
                        +-type=STRUCT<key INT64>
                        +-expr=
                        | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithPseudoColumns.struct_for_measure_measure_count_star#9)
                        +-field_idx=1
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_7.a_6 AS a_8
FROM
  (
    SELECT
      COUNT(*
        GROUP BY projectscan_5.a_4.key_columns) AS a_6
    FROM
      (
        SELECT
          measuretable_withpseudocolumns_3.a_1 AS a_1,
          measuretable_withpseudocolumns_3.a_2 AS a_2,
          STRUCT< referenced_columns STRUCT< >, key_columns STRUCT< key INT64 > > (STRUCT< > (), STRUCT< key INT64 >
            (measuretable_withpseudocolumns_3.a_1)) AS a_4
        FROM
          (
            SELECT
              MeasureTable_WithPseudoColumns.key AS a_1,
              MeasureTable_WithPseudoColumns.measure_count_star AS a_2
            FROM
              MeasureTable_WithPseudoColumns
          ) AS measuretable_withpseudocolumns_3
      ) AS projectscan_5
  ) AS aggregatescan_7;
==

# Measures with subqueries in the measure expression
SELECT
  key,
  AGG(measure_with_top_level_subquery),
  AGG(measure_with_simple_subquery_in_aggregate_function),
  AGG(measure_with_aggregate_subquery_in_aggregate_function),
  AGG(measure_with_multiple_subqueries)
FROM MeasureTable_WithSubqueryMeasureExprs
GROUP BY key;
--
QueryStmt
+-output_column_list=
| +-$groupby.key#13 AS key [INT64]
| +-$aggregate.$agg1#9 AS `$col2` [INT64]
| +-$aggregate.$agg2#10 AS `$col3` [INT64]
| +-$aggregate.$agg3#11 AS `$col4` [INT64]
| +-$aggregate.$agg4#12 AS `$col5` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.key#13, $aggregate.$agg1#9, $aggregate.$agg2#10, $aggregate.$agg3#11, $aggregate.$agg4#12]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.key#13, $aggregate.$agg1#9, $aggregate.$agg2#10, $aggregate.$agg3#11, $aggregate.$agg4#12]
        +-input_scan=
        | +-TableScan(column_list=MeasureTable_WithSubqueryMeasureExprs.[key#1, measure_with_top_level_subquery#5, measure_with_simple_subquery_in_aggregate_function#6, measure_with_aggregate_subquery_in_aggregate_function#7, measure_with_multiple_subqueries#8], table=MeasureTable_WithSubqueryMeasureExprs, column_index_list=[0, 4, 5, 6, 7])
        +-group_by_list=
        | +-key#13 := ColumnRef(type=INT64, column=MeasureTable_WithSubqueryMeasureExprs.key#1)
        +-aggregate_list=
          +-$agg1#9 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_WithSubqueryMeasureExprs.measure_with_top_level_subquery#5)
          +-$agg2#10 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_WithSubqueryMeasureExprs.measure_with_simple_subquery_in_aggregate_function#6)
          +-$agg3#11 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_WithSubqueryMeasureExprs.measure_with_aggregate_subquery_in_aggregate_function#7)
          +-$agg4#12 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_WithSubqueryMeasureExprs.measure_with_multiple_subqueries#8)

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_withsubquerymeasureexprs_6.a_1 AS key,
  AGG(measuretable_withsubquerymeasureexprs_6.a_2) AS a_8,
  AGG(measuretable_withsubquerymeasureexprs_6.a_3) AS a_9,
  AGG(measuretable_withsubquerymeasureexprs_6.a_4) AS a_10,
  AGG(measuretable_withsubquerymeasureexprs_6.a_5) AS a_11
FROM
  (
    SELECT
      MeasureTable_WithSubqueryMeasureExprs.key AS a_1,
      MeasureTable_WithSubqueryMeasureExprs.measure_with_top_level_subquery AS a_2,
      MeasureTable_WithSubqueryMeasureExprs.measure_with_simple_subquery_in_aggregate_function AS a_3,
      MeasureTable_WithSubqueryMeasureExprs.measure_with_aggregate_subquery_in_aggregate_function AS a_4,
      MeasureTable_WithSubqueryMeasureExprs.measure_with_multiple_subqueries AS a_5
    FROM
      MeasureTable_WithSubqueryMeasureExprs
  ) AS measuretable_withsubquerymeasureexprs_6
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.key#13 AS key [INT64]
| +-$aggregate.$agg1#9 AS `$col2` [INT64]
| +-$aggregate.$agg2#10 AS `$col3` [INT64]
| +-$aggregate.$agg3#11 AS `$col4` [INT64]
| +-$aggregate.$agg4#12 AS `$col5` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.key#13, $aggregate.$agg1#9, $aggregate.$agg2#10, $aggregate.$agg3#11, $aggregate.$agg4#12]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.key#13, $aggregate.$agg1#9, $aggregate.$agg2#10, $aggregate.$agg3#11, $aggregate.$agg4#12]
        +-expr_list=
        | +-$agg1#9 :=
        | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#21)
        | |   +-SubqueryExpr
        | |     +-type=INT64
        | |     +-subquery_type=SCALAR
        | |     +-subquery=
        | |       +-ProjectScan
        | |         +-column_list=[$aggregate.$agg1#19]
        | |         +-input_scan=
        | |           +-AggregateScan
        | |             +-column_list=[$aggregate.$agg1#19]
        | |             +-input_scan=
        | |             | +-ArrayScan
        | |             |   +-column_list=[$array.$unnest1#20]
        | |             |   +-array_expr_list=
        | |             |   | +-Literal(type=ARRAY<INT64>, value=[1])
        | |             |   +-element_column_list=[$array.$unnest1#20]
        | |             +-aggregate_list=
        | |               +-$agg1#19 :=
        | |                 +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        | |                   +-Literal(type=INT64, value=1)
        | +-$agg2#10 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#25)
        | +-$agg3#11 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#30)
        | +-$agg4#12 :=
        |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |     +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#37)
        |     +-SubqueryExpr
        |       +-type=INT64
        |       +-subquery_type=SCALAR
        |       +-subquery=
        |         +-ProjectScan
        |           +-column_list=[$aggregate.$agg1#35]
        |           +-input_scan=
        |             +-AggregateScan
        |               +-column_list=[$aggregate.$agg1#35]
        |               +-input_scan=
        |               | +-ArrayScan
        |               |   +-column_list=[$array.$unnest2#36]
        |               |   +-array_expr_list=
        |               |   | +-Literal(type=ARRAY<INT64>, value=[1])
        |               |   +-element_column_list=[$array.$unnest2#36]
        |               +-aggregate_list=
        |                 +-$agg1#35 :=
        |                   +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |                     +-Literal(type=INT64, value=1)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.key#13, $aggregate.constituent_aggregate_1#21, $aggregate.constituent_aggregate_1#25, $aggregate.constituent_aggregate_1#30, $aggregate.constituent_aggregate_1#37]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_WithSubqueryMeasureExprs.[key#1, price#14, measure_with_top_level_subquery#5, measure_with_simple_subquery_in_aggregate_function#6, measure_with_aggregate_subquery_in_aggregate_function#7, measure_with_multiple_subqueries#8, struct_for_measure_measure_with_aggregate_subquery_in_aggregate_function#15, struct_for_measure_measure_with_multiple_subqueries#16, struct_for_measure_measure_with_simple_subquery_in_aggregate_function#17, struct_for_measure_measure_with_top_level_subquery#18]
            |   +-expr_list=
            |   | +-struct_for_measure_measure_with_aggregate_subquery_in_aggregate_function#15 :=
            |   | | +-MakeStruct
            |   | |   +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
            |   | |   +-field_list=
            |   | |     +-MakeStruct
            |   | |     | +-type=STRUCT<price INT64>
            |   | |     | +-field_list=
            |   | |     |   +-ColumnRef(type=INT64, column=MeasureTable_WithSubqueryMeasureExprs.price#14)
            |   | |     +-MakeStruct
            |   | |       +-type=STRUCT<key INT64>
            |   | |       +-field_list=
            |   | |         +-ColumnRef(type=INT64, column=MeasureTable_WithSubqueryMeasureExprs.key#1)
            |   | +-struct_for_measure_measure_with_multiple_subqueries#16 :=
            |   | | +-MakeStruct
            |   | |   +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
            |   | |   +-field_list=
            |   | |     +-MakeStruct
            |   | |     | +-type=STRUCT<price INT64>
            |   | |     | +-field_list=
            |   | |     |   +-ColumnRef(type=INT64, column=MeasureTable_WithSubqueryMeasureExprs.price#14)
            |   | |     +-MakeStruct
            |   | |       +-type=STRUCT<key INT64>
            |   | |       +-field_list=
            |   | |         +-ColumnRef(type=INT64, column=MeasureTable_WithSubqueryMeasureExprs.key#1)
            |   | +-struct_for_measure_measure_with_simple_subquery_in_aggregate_function#17 :=
            |   | | +-MakeStruct
            |   | |   +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
            |   | |   +-field_list=
            |   | |     +-MakeStruct
            |   | |     | +-type=STRUCT<price INT64>
            |   | |     | +-field_list=
            |   | |     |   +-ColumnRef(type=INT64, column=MeasureTable_WithSubqueryMeasureExprs.price#14)
            |   | |     +-MakeStruct
            |   | |       +-type=STRUCT<key INT64>
            |   | |       +-field_list=
            |   | |         +-ColumnRef(type=INT64, column=MeasureTable_WithSubqueryMeasureExprs.key#1)
            |   | +-struct_for_measure_measure_with_top_level_subquery#18 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<price INT64>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_WithSubqueryMeasureExprs.price#14)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_WithSubqueryMeasureExprs.key#1)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_WithSubqueryMeasureExprs.[key#1, price#14, measure_with_top_level_subquery#5, measure_with_simple_subquery_in_aggregate_function#6, measure_with_aggregate_subquery_in_aggregate_function#7, measure_with_multiple_subqueries#8], table=MeasureTable_WithSubqueryMeasureExprs, column_index_list=[0, 3, 4, 5, 6, 7])
            +-group_by_list=
            | +-key#13 := ColumnRef(type=INT64, column=MeasureTable_WithSubqueryMeasureExprs.key#1)
            +-aggregate_list=
              +-constituent_aggregate_1#21 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#22)
              |   +-group_by_list=
              |   | +-grain_lock_key#23 :=
              |   |   +-GetStructField
              |   |     +-type=STRUCT<key INT64>
              |   |     +-expr=
              |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measure_measure_with_top_level_subquery#18)
              |   |     +-field_idx=1
              |   +-group_by_aggregate_list=
              |     +-$any_value_grain_lock_0#22 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-GetStructField
              |           +-type=INT64
              |           +-expr=
              |           | +-GetStructField
              |           |   +-type=STRUCT<price INT64>
              |           |   +-expr=
              |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measure_measure_with_top_level_subquery#18)
              |           |   +-field_idx=0
              |           +-field_idx=0
              +-constituent_aggregate_1#25 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#26)
              |   +-group_by_list=
              |   | +-grain_lock_key#27 :=
              |   |   +-GetStructField
              |   |     +-type=STRUCT<key INT64>
              |   |     +-expr=
              |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measure_measure_with_simple_subquery_in_aggregate_function#17)
              |   |     +-field_idx=1
              |   +-group_by_aggregate_list=
              |     +-$any_value_grain_lock_0#26 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-SubqueryExpr
              |           +-type=INT64
              |           +-subquery_type=SCALAR
              |           +-parameter_list=
              |           | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measure_measure_with_simple_subquery_in_aggregate_function#17)
              |           +-subquery=
              |             +-ProjectScan
              |               +-column_list=[$expr_subquery.price#24]
              |               +-expr_list=
              |               | +-price#24 :=
              |               |   +-GetStructField
              |               |     +-type=INT64
              |               |     +-expr=
              |               |     | +-GetStructField
              |               |     |   +-type=STRUCT<price INT64>
              |               |     |   +-expr=
              |               |     |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measure_measure_with_simple_subquery_in_aggregate_function#17, is_correlated=TRUE)
              |               |     |   +-field_idx=0
              |               |     +-field_idx=0
              |               +-input_scan=
              |                 +-SingleRowScan
              +-constituent_aggregate_1#30 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#31)
              |   +-group_by_list=
              |   | +-grain_lock_key#32 :=
              |   |   +-GetStructField
              |   |     +-type=STRUCT<key INT64>
              |   |     +-expr=
              |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measure_measure_with_aggregate_subquery_in_aggregate_function#15)
              |   |     +-field_idx=1
              |   +-group_by_aggregate_list=
              |     +-$any_value_grain_lock_0#31 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-SubqueryExpr
              |           +-type=INT64
              |           +-subquery_type=SCALAR
              |           +-parameter_list=
              |           | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measure_measure_with_aggregate_subquery_in_aggregate_function#15)
              |           +-subquery=
              |             +-ProjectScan
              |               +-column_list=[$aggregate.$agg1#28]
              |               +-input_scan=
              |                 +-AggregateScan
              |                   +-column_list=[$aggregate.$agg1#28]
              |                   +-input_scan=
              |                   | +-ArrayScan
              |                   |   +-column_list=[$array.$unnest1#29]
              |                   |   +-array_expr_list=
              |                   |   | +-Literal(type=ARRAY<INT64>, value=[1])
              |                   |   +-element_column_list=[$array.$unnest1#29]
              |                   +-aggregate_list=
              |                     +-$agg1#28 :=
              |                       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |                         +-GetStructField
              |                           +-type=INT64
              |                           +-expr=
              |                           | +-GetStructField
              |                           |   +-type=STRUCT<price INT64>
              |                           |   +-expr=
              |                           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measure_measure_with_aggregate_subquery_in_aggregate_function#15, is_correlated=TRUE)
              |                           |   +-field_idx=0
              |                           +-field_idx=0
              +-constituent_aggregate_1#37 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#38)
                  +-group_by_list=
                  | +-grain_lock_key#39 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measure_measure_with_multiple_subqueries#16)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#38 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-SubqueryExpr
                          +-type=INT64
                          +-subquery_type=SCALAR
                          +-parameter_list=
                          | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measure_measure_with_multiple_subqueries#16)
                          +-subquery=
                            +-ProjectScan
                              +-column_list=[$aggregate.$agg1#33]
                              +-input_scan=
                                +-AggregateScan
                                  +-column_list=[$aggregate.$agg1#33]
                                  +-input_scan=
                                  | +-ArrayScan
                                  |   +-column_list=[$array.$unnest1#34]
                                  |   +-array_expr_list=
                                  |   | +-Literal(type=ARRAY<INT64>, value=[1])
                                  |   +-element_column_list=[$array.$unnest1#34]
                                  +-aggregate_list=
                                    +-$agg1#33 :=
                                      +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                                        +-GetStructField
                                          +-type=INT64
                                          +-expr=
                                          | +-GetStructField
                                          |   +-type=STRUCT<price INT64>
                                          |   +-expr=
                                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measure_measure_with_multiple_subqueries#16, is_correlated=TRUE)
                                          |   +-field_idx=0
                                          +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_23.a_18 AS key,
  (aggregatescan_23.a_19) + (
    SELECT
      SUM(1) AS a_26
    FROM
      UNNEST(ARRAY< INT64 >[1]) AS a_25
  ) AS a_24,
  aggregatescan_23.a_20 AS a_27,
  aggregatescan_23.a_21 AS a_28,
  (aggregatescan_23.a_22) + (
    SELECT
      SUM(1) AS a_31
    FROM
      UNNEST(ARRAY< INT64 >[1]) AS a_30
  ) AS a_29
FROM
  (
    SELECT
      projectscan_12.a_1 AS a_18,
      SUM(ANY_VALUE(projectscan_12.a_11.referenced_columns.price)
        GROUP BY projectscan_12.a_11.key_columns) AS a_19,
      SUM(ANY_VALUE((
            SELECT
              projectscan_12.a_10.referenced_columns.price AS a_13
          ))
        GROUP BY projectscan_12.a_10.key_columns) AS a_20,
      SUM(ANY_VALUE((
            SELECT
              SUM(projectscan_12.a_8.referenced_columns.price) AS a_15
            FROM
              UNNEST(ARRAY< INT64 >[1]) AS a_14
          ))
        GROUP BY projectscan_12.a_8.key_columns) AS a_21,
      SUM(ANY_VALUE((
            SELECT
              SUM(projectscan_12.a_9.referenced_columns.price) AS a_17
            FROM
              UNNEST(ARRAY< INT64 >[1]) AS a_16
          ))
        GROUP BY projectscan_12.a_9.key_columns) AS a_22
    FROM
      (
        SELECT
          measuretable_withsubquerymeasureexprs_7.a_1 AS a_1,
          measuretable_withsubquerymeasureexprs_7.a_2 AS a_2,
          measuretable_withsubquerymeasureexprs_7.a_3 AS a_3,
          measuretable_withsubquerymeasureexprs_7.a_4 AS a_4,
          measuretable_withsubquerymeasureexprs_7.a_5 AS a_5,
          measuretable_withsubquerymeasureexprs_7.a_6 AS a_6,
          STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
            (measuretable_withsubquerymeasureexprs_7.a_2), STRUCT< key INT64 > (measuretable_withsubquerymeasureexprs_7.a_1)) AS a_8,
          STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
            (measuretable_withsubquerymeasureexprs_7.a_2), STRUCT< key INT64 > (measuretable_withsubquerymeasureexprs_7.a_1)) AS a_9,
          STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
            (measuretable_withsubquerymeasureexprs_7.a_2), STRUCT< key INT64 > (measuretable_withsubquerymeasureexprs_7.a_1)) AS a_10,
          STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
            (measuretable_withsubquerymeasureexprs_7.a_2), STRUCT< key INT64 > (measuretable_withsubquerymeasureexprs_7.a_1)) AS a_11
        FROM
          (
            SELECT
              MeasureTable_WithSubqueryMeasureExprs.key AS a_1,
              MeasureTable_WithSubqueryMeasureExprs.price AS a_2,
              MeasureTable_WithSubqueryMeasureExprs.measure_with_top_level_subquery AS a_3,
              MeasureTable_WithSubqueryMeasureExprs.measure_with_simple_subquery_in_aggregate_function AS a_4,
              MeasureTable_WithSubqueryMeasureExprs.measure_with_aggregate_subquery_in_aggregate_function AS a_5,
              MeasureTable_WithSubqueryMeasureExprs.measure_with_multiple_subqueries AS a_6
            FROM
              MeasureTable_WithSubqueryMeasureExprs
          ) AS measuretable_withsubquerymeasureexprs_7
      ) AS projectscan_12
    GROUP BY 1
  ) AS aggregatescan_23;
