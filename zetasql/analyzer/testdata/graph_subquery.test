[default language_features=V_1_3_LIKE_ANY_SOME_ALL,V_1_4_SQL_GRAPH,V_1_4_SQL_GRAPH_ADVANCED_QUERY]
[default no_test_extract_table_names]
[default no_run_unparser]

# base test covering EXISTS, VALUE and ARRAY, with graph reference being omitted or not
GRAPH aml
MATCH (n:Person)
RETURN {{EXISTS|VALUE|ARRAY}} { {{|GRAPH aml}} MATCH (n2:Person) where n = n2 return 1 as one } as val

--
ALTERNATION GROUPS:
    EXISTS,
    EXISTS,GRAPH aml
--
QueryStmt
+-output_column_list=
| +-$graph_table.val#4 AS val [BOOL]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.val#4]
    +-property_graph=sample_catalog.aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.val#4]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.val#4]
            +-scan_list=
              +-GraphScan
              | +-column_list=[$element_table.n#1]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=[$element_table.n#1]
              | |   +-input_scan_list=
              | |   | +-GraphNodeScan
              | |   |   +-column_list=[$element_table.n#1]
              | |   |   +-label_expr=
              | |   |   | +-GraphLabel(label=sample_catalog.aml.Person)
              | |   |   +-target_element_table_list=[sample_catalog.aml.Person]
              | |   +-head=$element_table.n#1
              | |   +-tail=$element_table.n#1
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.val#4]
                +-expr_list=
                | +-val#4 :=
                |   +-SubqueryExpr
                |     +-type=BOOL
                |     +-subquery_type=EXISTS
                |     +-parameter_list=
                |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                |     +-subquery=
                |       +-GraphTableScan
                |         +-column_list=[$graph_table.one#3]
                |         +-property_graph=sample_catalog.aml
                |         +-input_scan=
                |           +-GraphLinearScan
                |             +-column_list=[$graph_table.one#3]
                |             +-scan_list=
                |               +-GraphLinearScan
                |                 +-column_list=[$graph_table.one#3]
                |                 +-scan_list=
                |                   +-GraphScan
                |                   | +-column_list=[$element_table.n2#2]
                |                   | +-input_scan_list=
                |                   | | +-GraphPathScan
                |                   | |   +-column_list=[$element_table.n2#2]
                |                   | |   +-input_scan_list=
                |                   | |   | +-GraphNodeScan
                |                   | |   |   +-column_list=[$element_table.n2#2]
                |                   | |   |   +-label_expr=
                |                   | |   |   | +-GraphLabel(label=sample_catalog.aml.Person)
                |                   | |   |   +-target_element_table_list=[sample_catalog.aml.Person]
                |                   | |   +-head=$element_table.n2#2
                |                   | |   +-tail=$element_table.n2#2
                |                   | +-filter_expr=
                |                   | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>) -> BOOL)
                |                   | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1, is_correlated=TRUE)
                |                   | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n2#2)
                |                   | +-input_scan=
                |                   |   +-SingleRowScan
                |                   +-ProjectScan
                |                     +-column_list=[$graph_table.one#3]
                |                     +-expr_list=
                |                     | +-one#3 := Literal(type=INT64, value=1)
                |                     +-input_scan=
                |                       +-GraphRefScan(column_list=[$element_table.n2#2])
                +-input_scan=
                  +-GraphRefScan(column_list=[$element_table.n#1])
--
ALTERNATION GROUPS:
    VALUE,
    VALUE,GRAPH aml
--
QueryStmt
+-output_column_list=
| +-$graph_table.val#4 AS val [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.val#4]
    +-property_graph=sample_catalog.aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.val#4]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.val#4]
            +-scan_list=
              +-GraphScan
              | +-column_list=[$element_table.n#1]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=[$element_table.n#1]
              | |   +-input_scan_list=
              | |   | +-GraphNodeScan
              | |   |   +-column_list=[$element_table.n#1]
              | |   |   +-label_expr=
              | |   |   | +-GraphLabel(label=sample_catalog.aml.Person)
              | |   |   +-target_element_table_list=[sample_catalog.aml.Person]
              | |   +-head=$element_table.n#1
              | |   +-tail=$element_table.n#1
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.val#4]
                +-expr_list=
                | +-val#4 :=
                |   +-SubqueryExpr
                |     +-type=INT64
                |     +-subquery_type=SCALAR
                |     +-parameter_list=
                |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                |     +-subquery=
                |       +-GraphTableScan
                |         +-column_list=[$graph_table.one#3]
                |         +-property_graph=sample_catalog.aml
                |         +-input_scan=
                |           +-GraphLinearScan
                |             +-column_list=[$graph_table.one#3]
                |             +-scan_list=
                |               +-GraphLinearScan
                |                 +-column_list=[$graph_table.one#3]
                |                 +-scan_list=
                |                   +-GraphScan
                |                   | +-column_list=[$element_table.n2#2]
                |                   | +-input_scan_list=
                |                   | | +-GraphPathScan
                |                   | |   +-column_list=[$element_table.n2#2]
                |                   | |   +-input_scan_list=
                |                   | |   | +-GraphNodeScan
                |                   | |   |   +-column_list=[$element_table.n2#2]
                |                   | |   |   +-label_expr=
                |                   | |   |   | +-GraphLabel(label=sample_catalog.aml.Person)
                |                   | |   |   +-target_element_table_list=[sample_catalog.aml.Person]
                |                   | |   +-head=$element_table.n2#2
                |                   | |   +-tail=$element_table.n2#2
                |                   | +-filter_expr=
                |                   | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>) -> BOOL)
                |                   | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1, is_correlated=TRUE)
                |                   | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n2#2)
                |                   | +-input_scan=
                |                   |   +-SingleRowScan
                |                   +-ProjectScan
                |                     +-column_list=[$graph_table.one#3]
                |                     +-expr_list=
                |                     | +-one#3 := Literal(type=INT64, value=1)
                |                     +-input_scan=
                |                       +-GraphRefScan(column_list=[$element_table.n2#2])
                +-input_scan=
                  +-GraphRefScan(column_list=[$element_table.n#1])
--
ALTERNATION GROUPS:
    ARRAY,
    ARRAY,GRAPH aml
--
QueryStmt
+-output_column_list=
| +-$graph_table.val#4 AS val [ARRAY<INT64>]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.val#4]
    +-property_graph=sample_catalog.aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.val#4]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.val#4]
            +-scan_list=
              +-GraphScan
              | +-column_list=[$element_table.n#1]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=[$element_table.n#1]
              | |   +-input_scan_list=
              | |   | +-GraphNodeScan
              | |   |   +-column_list=[$element_table.n#1]
              | |   |   +-label_expr=
              | |   |   | +-GraphLabel(label=sample_catalog.aml.Person)
              | |   |   +-target_element_table_list=[sample_catalog.aml.Person]
              | |   +-head=$element_table.n#1
              | |   +-tail=$element_table.n#1
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.val#4]
                +-expr_list=
                | +-val#4 :=
                |   +-SubqueryExpr
                |     +-type=ARRAY<INT64>
                |     +-subquery_type=ARRAY
                |     +-parameter_list=
                |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                |     +-subquery=
                |       +-GraphTableScan
                |         +-column_list=[$graph_table.one#3]
                |         +-property_graph=sample_catalog.aml
                |         +-input_scan=
                |           +-GraphLinearScan
                |             +-column_list=[$graph_table.one#3]
                |             +-scan_list=
                |               +-GraphLinearScan
                |                 +-column_list=[$graph_table.one#3]
                |                 +-scan_list=
                |                   +-GraphScan
                |                   | +-column_list=[$element_table.n2#2]
                |                   | +-input_scan_list=
                |                   | | +-GraphPathScan
                |                   | |   +-column_list=[$element_table.n2#2]
                |                   | |   +-input_scan_list=
                |                   | |   | +-GraphNodeScan
                |                   | |   |   +-column_list=[$element_table.n2#2]
                |                   | |   |   +-label_expr=
                |                   | |   |   | +-GraphLabel(label=sample_catalog.aml.Person)
                |                   | |   |   +-target_element_table_list=[sample_catalog.aml.Person]
                |                   | |   +-head=$element_table.n2#2
                |                   | |   +-tail=$element_table.n2#2
                |                   | +-filter_expr=
                |                   | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>) -> BOOL)
                |                   | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1, is_correlated=TRUE)
                |                   | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n2#2)
                |                   | +-input_scan=
                |                   |   +-SingleRowScan
                |                   +-ProjectScan
                |                     +-column_list=[$graph_table.one#3]
                |                     +-expr_list=
                |                     | +-one#3 := Literal(type=INT64, value=1)
                |                     +-input_scan=
                |                       +-GraphRefScan(column_list=[$element_table.n2#2])
                +-input_scan=
                  +-GraphRefScan(column_list=[$element_table.n#1])
==

# omitting graph reference but first operator is not MATCH triggers error
GRAPH aml
MATCH (n:Person)
RETURN {{EXISTS|VALUE|ARRAY}} { return 1 as one } as val

--
ALTERNATION GROUP: EXISTS
--
ERROR: Match should be the first operator when the graph reference is omitted [at 3:17]
RETURN EXISTS { return 1 as one } as val
                ^
--
ALTERNATION GROUP: VALUE
--
ERROR: Match should be the first operator when the graph reference is omitted [at 3:16]
RETURN VALUE { return 1 as one } as val
               ^
--
ALTERNATION GROUP: ARRAY
--
ERROR: Match should be the first operator when the graph reference is omitted [at 3:16]
RETURN ARRAY { return 1 as one } as val
               ^
==

# LIKE ANY|SOME|ALL with graph subquery
GRAPH aml
MATCH (n:Person)
WHERE n.name LIKE {{ANY|SOME|ALL}} ( VALUE { MATCH (p:Person) RETURN "name" as one} )
RETURN true AS val
--
ALTERNATION GROUPS:
    ANY
    SOME
--
QueryStmt
+-output_column_list=
| +-$graph_table.val#4 AS val [BOOL]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.val#4]
    +-property_graph=sample_catalog.aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.val#4]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.val#4]
            +-scan_list=
              +-GraphScan
              | +-column_list=[$element_table.n#1]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=[$element_table.n#1]
              | |   +-input_scan_list=
              | |   | +-GraphNodeScan
              | |   |   +-column_list=[$element_table.n#1]
              | |   |   +-label_expr=
              | |   |   | +-GraphLabel(label=sample_catalog.aml.Person)
              | |   |   +-target_element_table_list=[sample_catalog.aml.Person]
              | |   +-head=$element_table.n#1
              | |   +-tail=$element_table.n#1
              | +-filter_expr=
              | | +-FunctionCall(ZetaSQL:$like_any(STRING, repeated(1) STRING) -> BOOL)
              | |   +-GraphGetElementProperty
              | |   | +-type=STRING
              | |   | +-expr=
              | |   | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
              | |   | +-property=name(STRING)
              | |   +-SubqueryExpr
              | |     +-type=STRING
              | |     +-subquery_type=SCALAR
              | |     +-subquery=
              | |       +-GraphTableScan
              | |         +-column_list=[$graph_table.one#3]
              | |         +-property_graph=sample_catalog.aml
              | |         +-input_scan=
              | |           +-GraphLinearScan
              | |             +-column_list=[$graph_table.one#3]
              | |             +-scan_list=
              | |               +-GraphLinearScan
              | |                 +-column_list=[$graph_table.one#3]
              | |                 +-scan_list=
              | |                   +-GraphScan
              | |                   | +-column_list=[$element_table.p#2]
              | |                   | +-input_scan_list=
              | |                   | | +-GraphPathScan
              | |                   | |   +-column_list=[$element_table.p#2]
              | |                   | |   +-input_scan_list=
              | |                   | |   | +-GraphNodeScan
              | |                   | |   |   +-column_list=[$element_table.p#2]
              | |                   | |   |   +-label_expr=
              | |                   | |   |   | +-GraphLabel(label=sample_catalog.aml.Person)
              | |                   | |   |   +-target_element_table_list=[sample_catalog.aml.Person]
              | |                   | |   +-head=$element_table.p#2
              | |                   | |   +-tail=$element_table.p#2
              | |                   | +-input_scan=
              | |                   |   +-SingleRowScan
              | |                   +-ProjectScan
              | |                     +-column_list=[$graph_table.one#3]
              | |                     +-expr_list=
              | |                     | +-one#3 := Literal(type=STRING, value="name")
              | |                     +-input_scan=
              | |                       +-GraphRefScan(column_list=[$element_table.p#2])
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.val#4]
                +-expr_list=
                | +-val#4 := Literal(type=BOOL, value=true)
                +-input_scan=
                  +-GraphRefScan(column_list=[$element_table.n#1])
--
ALTERNATION GROUP: ALL
--
QueryStmt
+-output_column_list=
| +-$graph_table.val#4 AS val [BOOL]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.val#4]
    +-property_graph=sample_catalog.aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.val#4]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.val#4]
            +-scan_list=
              +-GraphScan
              | +-column_list=[$element_table.n#1]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=[$element_table.n#1]
              | |   +-input_scan_list=
              | |   | +-GraphNodeScan
              | |   |   +-column_list=[$element_table.n#1]
              | |   |   +-label_expr=
              | |   |   | +-GraphLabel(label=sample_catalog.aml.Person)
              | |   |   +-target_element_table_list=[sample_catalog.aml.Person]
              | |   +-head=$element_table.n#1
              | |   +-tail=$element_table.n#1
              | +-filter_expr=
              | | +-FunctionCall(ZetaSQL:$like_all(STRING, repeated(1) STRING) -> BOOL)
              | |   +-GraphGetElementProperty
              | |   | +-type=STRING
              | |   | +-expr=
              | |   | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
              | |   | +-property=name(STRING)
              | |   +-SubqueryExpr
              | |     +-type=STRING
              | |     +-subquery_type=SCALAR
              | |     +-subquery=
              | |       +-GraphTableScan
              | |         +-column_list=[$graph_table.one#3]
              | |         +-property_graph=sample_catalog.aml
              | |         +-input_scan=
              | |           +-GraphLinearScan
              | |             +-column_list=[$graph_table.one#3]
              | |             +-scan_list=
              | |               +-GraphLinearScan
              | |                 +-column_list=[$graph_table.one#3]
              | |                 +-scan_list=
              | |                   +-GraphScan
              | |                   | +-column_list=[$element_table.p#2]
              | |                   | +-input_scan_list=
              | |                   | | +-GraphPathScan
              | |                   | |   +-column_list=[$element_table.p#2]
              | |                   | |   +-input_scan_list=
              | |                   | |   | +-GraphNodeScan
              | |                   | |   |   +-column_list=[$element_table.p#2]
              | |                   | |   |   +-label_expr=
              | |                   | |   |   | +-GraphLabel(label=sample_catalog.aml.Person)
              | |                   | |   |   +-target_element_table_list=[sample_catalog.aml.Person]
              | |                   | |   +-head=$element_table.p#2
              | |                   | |   +-tail=$element_table.p#2
              | |                   | +-input_scan=
              | |                   |   +-SingleRowScan
              | |                   +-ProjectScan
              | |                     +-column_list=[$graph_table.one#3]
              | |                     +-expr_list=
              | |                     | +-one#3 := Literal(type=STRING, value="name")
              | |                     +-input_scan=
              | |                       +-GraphRefScan(column_list=[$element_table.p#2])
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.val#4]
                +-expr_list=
                | +-val#4 := Literal(type=BOOL, value=true)
                +-input_scan=
                  +-GraphRefScan(column_list=[$element_table.n#1])
==

# testing IN subquery
GRAPH aml
MATCH (n1:Person)
WHERE n1.name IN { MATCH (n2:Person) RETURN n2.name }
RETURN n1.id

--
QueryStmt
+-output_column_list=
| +-$graph_table.id#4 AS id [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.id#4]
    +-property_graph=sample_catalog.aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.id#4]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.id#4]
            +-scan_list=
              +-GraphScan
              | +-column_list=[$element_table.n1#1]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=[$element_table.n1#1]
              | |   +-input_scan_list=
              | |   | +-GraphNodeScan
              | |   |   +-column_list=[$element_table.n1#1]
              | |   |   +-label_expr=
              | |   |   | +-GraphLabel(label=sample_catalog.aml.Person)
              | |   |   +-target_element_table_list=[sample_catalog.aml.Person]
              | |   +-head=$element_table.n1#1
              | |   +-tail=$element_table.n1#1
              | +-filter_expr=
              | | +-SubqueryExpr
              | |   +-type=BOOL
              | |   +-subquery_type=IN
              | |   +-in_expr=
              | |   | +-GraphGetElementProperty
              | |   |   +-type=STRING
              | |   |   +-expr=
              | |   |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n1#1)
              | |   |   +-property=name(STRING)
              | |   +-subquery=
              | |     +-GraphTableScan
              | |       +-column_list=[$graph_table.name#3]
              | |       +-property_graph=sample_catalog.aml
              | |       +-input_scan=
              | |         +-GraphLinearScan
              | |           +-column_list=[$graph_table.name#3]
              | |           +-scan_list=
              | |             +-GraphLinearScan
              | |               +-column_list=[$graph_table.name#3]
              | |               +-scan_list=
              | |                 +-GraphScan
              | |                 | +-column_list=[$element_table.n2#2]
              | |                 | +-input_scan_list=
              | |                 | | +-GraphPathScan
              | |                 | |   +-column_list=[$element_table.n2#2]
              | |                 | |   +-input_scan_list=
              | |                 | |   | +-GraphNodeScan
              | |                 | |   |   +-column_list=[$element_table.n2#2]
              | |                 | |   |   +-label_expr=
              | |                 | |   |   | +-GraphLabel(label=sample_catalog.aml.Person)
              | |                 | |   |   +-target_element_table_list=[sample_catalog.aml.Person]
              | |                 | |   +-head=$element_table.n2#2
              | |                 | |   +-tail=$element_table.n2#2
              | |                 | +-input_scan=
              | |                 |   +-SingleRowScan
              | |                 +-ProjectScan
              | |                   +-column_list=[$graph_table.name#3]
              | |                   +-expr_list=
              | |                   | +-name#3 :=
              | |                   |   +-GraphGetElementProperty
              | |                   |     +-type=STRING
              | |                   |     +-expr=
              | |                   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n2#2)
              | |                   |     +-property=name(STRING)
              | |                   +-input_scan=
              | |                     +-GraphRefScan(column_list=[$element_table.n2#2])
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.id#4]
                +-expr_list=
                | +-id#4 :=
                |   +-GraphGetElementProperty
                |     +-type=INT64
                |     +-expr=
                |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n1#1)
                |     +-property=id(INT64)
                +-input_scan=
                  +-GraphRefScan(column_list=[$element_table.n1#1])
==

# graph reference missing should return user friendly error
SELECT EXISTS { RETURN 1 AS val }
--
ERROR: No graph reference found in the current context of graph subquery. Try starting the graph subquery with the GRAPH clause [at 1:15]
SELECT EXISTS { RETURN 1 AS val }
              ^
==

# EXISTS {graph_pattern} subquery, note the graph_reference is allowed and optional
GRAPH aml
MATCH (n:Person)
RETURN EXISTS {
  {{|GRAPH aml}}
  ((n2:Person)->(m) WHERE n2.name != 'Dana'),
  ((x:Person)->(n2) WHERE x.age = 42)
} AS val
--
QueryStmt
+-output_column_list=
| +-$graph_table.val#9 AS val [BOOL]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.val#9]
    +-property_graph=sample_catalog.aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.val#9]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.val#9]
            +-scan_list=
              +-GraphScan
              | +-column_list=[$element_table.n#1]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=[$element_table.n#1]
              | |   +-input_scan_list=
              | |   | +-GraphNodeScan
              | |   |   +-column_list=[$element_table.n#1]
              | |   |   +-label_expr=
              | |   |   | +-GraphLabel(label=sample_catalog.aml.Person)
              | |   |   +-target_element_table_list=[sample_catalog.aml.Person]
              | |   +-head=$element_table.n#1
              | |   +-tail=$element_table.n#1
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.val#9]
                +-expr_list=
                | +-val#9 :=
                |   +-SubqueryExpr
                |     +-type=BOOL
                |     +-subquery_type=EXISTS
                |     +-subquery=
                |       +-GraphTableScan
                |         +-column_list=[$graph_table.literal_true#8]
                |         +-property_graph=sample_catalog.aml
                |         +-input_scan=
                |           +-GraphLinearScan
                |             +-column_list=[$graph_table.literal_true#8]
                |             +-scan_list=
                |               +-GraphLinearScan
                |                 +-column_list=[$graph_table.literal_true#8]
                |                 +-scan_list=
                |                   +-GraphScan
                |                   | +-column_list=$element_table.[n2#2, $element1#3, m#4, x#5, $element2#6, n2#7]
                |                   | +-input_scan_list=
                |                   | | +-GraphPathScan
                |                   | | | +-column_list=$element_table.[n2#2, $element1#3, m#4]
                |                   | | | +-input_scan_list=
                |                   | | | | +-GraphNodeScan
                |                   | | | | | +-column_list=[$element_table.n2#2]
                |                   | | | | | +-label_expr=
                |                   | | | | | | +-GraphLabelNaryExpr
                |                   | | | | | |   +-op=AND
                |                   | | | | | |   +-operand_list=
                |                   | | | | | |     +-GraphLabel(label=sample_catalog.aml.Person)
                |                   | | | | | |     +-GraphLabelNaryExpr
                |                   | | | | | |       +-op=OR
                |                   | | | | | |       +-operand_list=
                |                   | | | | | |         +-GraphWildCardLabel
                |                   | | | | | |         +-GraphLabelNaryExpr
                |                   | | | | | |           +-op=NOT
                |                   | | | | | |           +-operand_list=
                |                   | | | | | |             +-GraphWildCardLabel
                |                   | | | | | +-target_element_table_list=[sample_catalog.aml.Person]
                |                   | | | | +-GraphEdgeScan
                |                   | | | | | +-column_list=[$element_table.$element1#3]
                |                   | | | | | +-label_expr=
                |                   | | | | | | +-GraphLabelNaryExpr
                |                   | | | | | |   +-op=OR
                |                   | | | | | |   +-operand_list=
                |                   | | | | | |     +-GraphWildCardLabel
                |                   | | | | | |     +-GraphLabelNaryExpr
                |                   | | | | | |       +-op=NOT
                |                   | | | | | |       +-operand_list=
                |                   | | | | | |         +-GraphWildCardLabel
                |                   | | | | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
                |                   | | | | | +-orientation=RIGHT
                |                   | | | | +-GraphNodeScan
                |                   | | | |   +-column_list=[$element_table.m#4]
                |                   | | | |   +-label_expr=
                |                   | | | |   | +-GraphLabelNaryExpr
                |                   | | | |   |   +-op=OR
                |                   | | | |   |   +-operand_list=
                |                   | | | |   |     +-GraphWildCardLabel
                |                   | | | |   |     +-GraphLabelNaryExpr
                |                   | | | |   |       +-op=NOT
                |                   | | | |   |       +-operand_list=
                |                   | | | |   |         +-GraphWildCardLabel
                |                   | | | |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
                |                   | | | +-filter_expr=
                |                   | | | | +-FunctionCall(ZetaSQL:$not_equal(STRING, STRING) -> BOOL)
                |                   | | | |   +-GraphGetElementProperty
                |                   | | | |   | +-type=STRING
                |                   | | | |   | +-expr=
                |                   | | | |   | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n2#2)
                |                   | | | |   | +-property=name(STRING)
                |                   | | | |   +-Literal(type=STRING, value="Dana")
                |                   | | | +-head=$element_table.n2#2
                |                   | | | +-tail=$element_table.m#4
                |                   | | +-GraphPathScan
                |                   | |   +-column_list=$element_table.[x#5, $element2#6, n2#7]
                |                   | |   +-input_scan_list=
                |                   | |   | +-GraphNodeScan
                |                   | |   | | +-column_list=[$element_table.x#5]
                |                   | |   | | +-label_expr=
                |                   | |   | | | +-GraphLabel(label=sample_catalog.aml.Person)
                |                   | |   | | +-target_element_table_list=[sample_catalog.aml.Person]
                |                   | |   | +-GraphEdgeScan
                |                   | |   | | +-column_list=[$element_table.$element2#6]
                |                   | |   | | +-label_expr=
                |                   | |   | | | +-GraphLabelNaryExpr
                |                   | |   | | |   +-op=OR
                |                   | |   | | |   +-operand_list=
                |                   | |   | | |     +-GraphWildCardLabel
                |                   | |   | | |     +-GraphLabelNaryExpr
                |                   | |   | | |       +-op=NOT
                |                   | |   | | |       +-operand_list=
                |                   | |   | | |         +-GraphWildCardLabel
                |                   | |   | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
                |                   | |   | | +-orientation=RIGHT
                |                   | |   | +-GraphNodeScan
                |                   | |   |   +-column_list=[$element_table.n2#7]
                |                   | |   |   +-label_expr=
                |                   | |   |   | +-GraphLabelNaryExpr
                |                   | |   |   |   +-op=AND
                |                   | |   |   |   +-operand_list=
                |                   | |   |   |     +-GraphLabel(label=sample_catalog.aml.Person)
                |                   | |   |   |     +-GraphLabelNaryExpr
                |                   | |   |   |       +-op=OR
                |                   | |   |   |       +-operand_list=
                |                   | |   |   |         +-GraphWildCardLabel
                |                   | |   |   |         +-GraphLabelNaryExpr
                |                   | |   |   |           +-op=NOT
                |                   | |   |   |           +-operand_list=
                |                   | |   |   |             +-GraphWildCardLabel
                |                   | |   |   +-target_element_table_list=[sample_catalog.aml.Person]
                |                   | |   +-filter_expr=
                |                   | |   | +-FunctionCall(ZetaSQL:$equal(UINT32, UINT32) -> BOOL)
                |                   | |   |   +-GraphGetElementProperty
                |                   | |   |   | +-type=UINT32
                |                   | |   |   | +-expr=
                |                   | |   |   | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.x#5)
                |                   | |   |   | +-property=age(UINT32)
                |                   | |   |   +-Literal(type=UINT32, value=42)
                |                   | |   +-head=$element_table.x#5
                |                   | |   +-tail=$element_table.n2#7
                |                   | +-filter_expr=
                |                   | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>) -> BOOL)
                |                   | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n2#2)
                |                   | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n2#7)
                |                   | +-input_scan=
                |                   |   +-SingleRowScan
                |                   +-ProjectScan
                |                     +-column_list=[$graph_table.literal_true#8]
                |                     +-expr_list=
                |                     | +-literal_true#8 := Literal(type=BOOL, value=true)
                |                     +-input_scan=
                |                       +-GraphRefScan(column_list=$element_table.[n2#2, $element1#3, m#4, x#5, $element2#6])
                +-input_scan=
                  +-GraphRefScan(column_list=[$element_table.n#1])
==

# EXISTS {linear_ops} subquery, note the graph_reference is allowed and optional
GRAPH aml
MATCH (n:Person)
RETURN EXISTS { {{|GRAPH aml}} MATCH (n2:Person) OPTIONAL MATCH (a:Account) } AS val
--

QueryStmt
+-output_column_list=
| +-$graph_table.val#5 AS val [BOOL]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.val#5]
    +-property_graph=sample_catalog.aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.val#5]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.val#5]
            +-scan_list=
              +-GraphScan
              | +-column_list=[$element_table.n#1]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=[$element_table.n#1]
              | |   +-input_scan_list=
              | |   | +-GraphNodeScan
              | |   |   +-column_list=[$element_table.n#1]
              | |   |   +-label_expr=
              | |   |   | +-GraphLabel(label=sample_catalog.aml.Person)
              | |   |   +-target_element_table_list=[sample_catalog.aml.Person]
              | |   +-head=$element_table.n#1
              | |   +-tail=$element_table.n#1
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.val#5]
                +-expr_list=
                | +-val#5 :=
                |   +-SubqueryExpr
                |     +-type=BOOL
                |     +-subquery_type=EXISTS
                |     +-subquery=
                |       +-GraphTableScan
                |         +-column_list=[$graph_table.literal_true#4]
                |         +-property_graph=sample_catalog.aml
                |         +-input_scan=
                |           +-GraphLinearScan
                |             +-column_list=[$graph_table.literal_true#4]
                |             +-scan_list=
                |               +-GraphLinearScan
                |                 +-column_list=[$graph_table.literal_true#4]
                |                 +-scan_list=
                |                   +-GraphScan
                |                   | +-column_list=[$element_table.n2#2]
                |                   | +-input_scan_list=
                |                   | | +-GraphPathScan
                |                   | |   +-column_list=[$element_table.n2#2]
                |                   | |   +-input_scan_list=
                |                   | |   | +-GraphNodeScan
                |                   | |   |   +-column_list=[$element_table.n2#2]
                |                   | |   |   +-label_expr=
                |                   | |   |   | +-GraphLabel(label=sample_catalog.aml.Person)
                |                   | |   |   +-target_element_table_list=[sample_catalog.aml.Person]
                |                   | |   +-head=$element_table.n2#2
                |                   | |   +-tail=$element_table.n2#2
                |                   | +-input_scan=
                |                   |   +-SingleRowScan
                |                   +-GraphScan
                |                   | +-column_list=$element_table.[n2#2, a#3]
                |                   | +-input_scan_list=
                |                   | | +-GraphPathScan
                |                   | |   +-column_list=[$element_table.a#3]
                |                   | |   +-input_scan_list=
                |                   | |   | +-GraphNodeScan
                |                   | |   |   +-column_list=[$element_table.a#3]
                |                   | |   |   +-label_expr=
                |                   | |   |   | +-GraphLabel(label=sample_catalog.aml.Account)
                |                   | |   |   +-target_element_table_list=[sample_catalog.aml.Account]
                |                   | |   +-head=$element_table.a#3
                |                   | |   +-tail=$element_table.a#3
                |                   | +-input_scan=
                |                   | | +-GraphRefScan(column_list=[$element_table.n2#2])
                |                   | +-optional=TRUE
                |                   +-ProjectScan
                |                     +-column_list=[$graph_table.literal_true#4]
                |                     +-expr_list=
                |                     | +-literal_true#4 := Literal(type=BOOL, value=true)
                |                     +-input_scan=
                |                       +-GraphRefScan(column_list=$element_table.[n2#2, a#3])
                +-input_scan=
                  +-GraphRefScan(column_list=[$element_table.n#1])
==

# EXISTS {linear_ops} subquery with a long list of operators
GRAPH aml
MATCH (n:Person)
RETURN NOT EXISTS {
  LET a = 42
  MATCH (n2:Person)
  WHERE n2.name != n.name AND n2.age < 42
  LET b = 31
  OPTIONAL MATCH (n3:Person)->(n4:Person)
  WHERE n = n4 AND n3.id > b
} AS val
--
QueryStmt
+-output_column_list=
| +-$graph_table.val#9 AS val [BOOL]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.val#9]
    +-property_graph=sample_catalog.aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.val#9]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.val#9]
            +-scan_list=
              +-GraphScan
              | +-column_list=[$element_table.n#1]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=[$element_table.n#1]
              | |   +-input_scan_list=
              | |   | +-GraphNodeScan
              | |   |   +-column_list=[$element_table.n#1]
              | |   |   +-label_expr=
              | |   |   | +-GraphLabel(label=sample_catalog.aml.Person)
              | |   |   +-target_element_table_list=[sample_catalog.aml.Person]
              | |   +-head=$element_table.n#1
              | |   +-tail=$element_table.n#1
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.val#9]
                +-expr_list=
                | +-val#9 :=
                |   +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
                |     +-SubqueryExpr
                |       +-type=BOOL
                |       +-subquery_type=EXISTS
                |       +-parameter_list=
                |       | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                |       +-subquery=
                |         +-GraphTableScan
                |           +-column_list=[$graph_table.literal_true#8]
                |           +-property_graph=sample_catalog.aml
                |           +-input_scan=
                |             +-GraphLinearScan
                |               +-column_list=[$graph_table.literal_true#8]
                |               +-scan_list=
                |                 +-GraphLinearScan
                |                   +-column_list=[$graph_table.literal_true#8]
                |                   +-scan_list=
                |                     +-ProjectScan
                |                     | +-expr_list=
                |                     | | +-a#2 := Literal(type=INT64, value=42)
                |                     | +-input_scan=
                |                     |   +-SingleRowScan
                |                     +-GraphScan
                |                     | +-column_list=[$element_table.n2#3]
                |                     | +-input_scan_list=
                |                     | | +-GraphPathScan
                |                     | |   +-column_list=[$element_table.n2#3]
                |                     | |   +-input_scan_list=
                |                     | |   | +-GraphNodeScan
                |                     | |   |   +-column_list=[$element_table.n2#3]
                |                     | |   |   +-label_expr=
                |                     | |   |   | +-GraphLabel(label=sample_catalog.aml.Person)
                |                     | |   |   +-target_element_table_list=[sample_catalog.aml.Person]
                |                     | |   +-head=$element_table.n2#3
                |                     | |   +-tail=$element_table.n2#3
                |                     | +-filter_expr=
                |                     | | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                |                     | |   +-FunctionCall(ZetaSQL:$not_equal(STRING, STRING) -> BOOL)
                |                     | |   | +-GraphGetElementProperty
                |                     | |   | | +-type=STRING
                |                     | |   | | +-expr=
                |                     | |   | | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n2#3)
                |                     | |   | | +-property=name(STRING)
                |                     | |   | +-GraphGetElementProperty
                |                     | |   |   +-type=STRING
                |                     | |   |   +-expr=
                |                     | |   |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1, is_correlated=TRUE)
                |                     | |   |   +-property=name(STRING)
                |                     | |   +-FunctionCall(ZetaSQL:$less(UINT32, UINT32) -> BOOL)
                |                     | |     +-GraphGetElementProperty
                |                     | |     | +-type=UINT32
                |                     | |     | +-expr=
                |                     | |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n2#3)
                |                     | |     | +-property=age(UINT32)
                |                     | |     +-Literal(type=UINT32, value=42)
                |                     | +-input_scan=
                |                     |   +-GraphRefScan
                |                     +-ProjectScan
                |                     | +-column_list=[$element_table.n2#3, $graph_table.b#4]
                |                     | +-expr_list=
                |                     | | +-b#4 := Literal(type=INT64, value=31)
                |                     | +-input_scan=
                |                     |   +-GraphRefScan(column_list=[$element_table.n2#3])
                |                     +-GraphScan
                |                     | +-column_list=[$element_table.n2#3, $graph_table.b#4, $element_table.n3#5, $element_table.$element1#6, $element_table.n4#7]
                |                     | +-input_scan_list=
                |                     | | +-GraphPathScan
                |                     | |   +-column_list=$element_table.[n3#5, $element1#6, n4#7]
                |                     | |   +-input_scan_list=
                |                     | |   | +-GraphNodeScan
                |                     | |   | | +-column_list=[$element_table.n3#5]
                |                     | |   | | +-label_expr=
                |                     | |   | | | +-GraphLabel(label=sample_catalog.aml.Person)
                |                     | |   | | +-target_element_table_list=[sample_catalog.aml.Person]
                |                     | |   | +-GraphEdgeScan
                |                     | |   | | +-column_list=[$element_table.$element1#6]
                |                     | |   | | +-label_expr=
                |                     | |   | | | +-GraphLabelNaryExpr
                |                     | |   | | |   +-op=OR
                |                     | |   | | |   +-operand_list=
                |                     | |   | | |     +-GraphWildCardLabel
                |                     | |   | | |     +-GraphLabelNaryExpr
                |                     | |   | | |       +-op=NOT
                |                     | |   | | |       +-operand_list=
                |                     | |   | | |         +-GraphWildCardLabel
                |                     | |   | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
                |                     | |   | | +-orientation=RIGHT
                |                     | |   | +-GraphNodeScan
                |                     | |   |   +-column_list=[$element_table.n4#7]
                |                     | |   |   +-label_expr=
                |                     | |   |   | +-GraphLabel(label=sample_catalog.aml.Person)
                |                     | |   |   +-target_element_table_list=[sample_catalog.aml.Person]
                |                     | |   +-head=$element_table.n3#5
                |                     | |   +-tail=$element_table.n4#7
                |                     | +-filter_expr=
                |                     | | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                |                     | |   +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>) -> BOOL)
                |                     | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1, is_correlated=TRUE)
                |                     | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n4#7)
                |                     | |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
                |                     | |     +-GraphGetElementProperty
                |                     | |     | +-type=INT64
                |                     | |     | +-expr=
                |                     | |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n3#5)
                |                     | |     | +-property=id(INT64)
                |                     | |     +-ColumnRef(type=INT64, column=$graph_table.b#4)
                |                     | +-input_scan=
                |                     | | +-GraphRefScan(column_list=[$element_table.n2#3, $graph_table.b#4])
                |                     | +-optional=TRUE
                |                     +-ProjectScan
                |                       +-column_list=[$graph_table.literal_true#8]
                |                       +-expr_list=
                |                       | +-literal_true#8 := Literal(type=BOOL, value=true)
                |                       +-input_scan=
                |                         +-GraphRefScan(column_list=[$element_table.n2#3, $graph_table.b#4, $element_table.n3#5, $element_table.$element1#6, $element_table.n4#7])
                +-input_scan=
                  +-GraphRefScan(column_list=[$element_table.n#1])

==

[default language_features=V_1_3_LIKE_ANY_SOME_ALL,V_1_4_SQL_GRAPH,V_1_4_SQL_GRAPH_ADVANCED_QUERY,V_1_1_WITH_ON_SUBQUERY]

GRAPH aml
MATCH (n:Person|Account WHERE (
  WITH x AS (SELECT 1 as a)
  SELECT a FROM x
) > 1)
RETURN 1 AS one

--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.one#4]
    +-property_graph=sample_catalog.aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.one#4]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#4]
            +-scan_list=
              +-GraphScan
              | +-column_list=[$element_table.n#1]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=[$element_table.n#1]
              | |   +-input_scan_list=
              | |   | +-GraphNodeScan
              | |   |   +-column_list=[$element_table.n#1]
              | |   |   +-filter_expr=
              | |   |   | +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
              | |   |   |   +-SubqueryExpr
              | |   |   |   | +-type=INT64
              | |   |   |   | +-subquery_type=SCALAR
              | |   |   |   | +-subquery=
              | |   |   |   |   +-WithScan
              | |   |   |   |     +-column_list=[x.a#3]
              | |   |   |   |     +-with_entry_list=
              | |   |   |   |     | +-WithEntry
              | |   |   |   |     |   +-with_query_name="x"
              | |   |   |   |     |   +-with_subquery=
              | |   |   |   |     |     +-ProjectScan
              | |   |   |   |     |       +-column_list=[x.a#2]
              | |   |   |   |     |       +-expr_list=
              | |   |   |   |     |       | +-a#2 := Literal(type=INT64, value=1)
              | |   |   |   |     |       +-input_scan=
              | |   |   |   |     |         +-SingleRowScan
              | |   |   |   |     +-query=
              | |   |   |   |       +-ProjectScan
              | |   |   |   |         +-column_list=[x.a#3]
              | |   |   |   |         +-input_scan=
              | |   |   |   |           +-WithRefScan(column_list=[x.a#3], with_query_name="x")
              | |   |   |   +-Literal(type=INT64, value=1)
              | |   |   +-label_expr=
              | |   |   | +-GraphLabelNaryExpr
              | |   |   |   +-op=OR
              | |   |   |   +-operand_list=
              | |   |   |     +-GraphLabel(label=sample_catalog.aml.Person)
              | |   |   |     +-GraphLabel(label=sample_catalog.aml.Account)
              | |   |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person]
              | |   +-head=$element_table.n#1
              | |   +-tail=$element_table.n#1
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.one#4]
                +-expr_list=
                | +-one#4 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-GraphRefScan(column_list=[$element_table.n#1])


==

GRAPH aml
MATCH (
  ()
  WHERE VALUE {
    GRAPH aml
    RETURN TRUE AS a_6
    NEXT

    RETURN TRUE AS a_7
    UNION ALL
    RETURN TRUE AS a_7
  }
)
RETURN 1 AS a_13;

--
QueryStmt
+-output_column_list=
| +-$graph_table.a_13#6 AS a_13 [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.a_13#6]
    +-property_graph=sample_catalog.aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.a_13#6]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.a_13#6]
            +-scan_list=
              +-GraphScan
              | +-column_list=[$element_table.$element1#1]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=[$element_table.$element1#1]
              | |   +-input_scan_list=
              | |   | +-GraphNodeScan
              | |   |   +-column_list=[$element_table.$element1#1]
              | |   |   +-label_expr=
              | |   |   | +-GraphLabelNaryExpr
              | |   |   |   +-op=OR
              | |   |   |   +-operand_list=
              | |   |   |     +-GraphWildCardLabel
              | |   |   |     +-GraphLabelNaryExpr
              | |   |   |       +-op=NOT
              | |   |   |       +-operand_list=
              | |   |   |         +-GraphWildCardLabel
              | |   |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
              | |   +-filter_expr=
              | |   | +-SubqueryExpr
              | |   |   +-type=BOOL
              | |   |   +-subquery_type=SCALAR
              | |   |   +-subquery=
              | |   |     +-GraphTableScan
              | |   |       +-column_list=[$graph_set_op.a_7#5]
              | |   |       +-property_graph=sample_catalog.aml
              | |   |       +-input_scan=
              | |   |         +-GraphLinearScan
              | |   |           +-column_list=[$graph_set_op.a_7#5]
              | |   |           +-scan_list=
              | |   |             +-GraphLinearScan
              | |   |             | +-column_list=[$graph_table.a_6#2]
              | |   |             | +-scan_list=
              | |   |             |   +-ProjectScan
              | |   |             |     +-column_list=[$graph_table.a_6#2]
              | |   |             |     +-expr_list=
              | |   |             |     | +-a_6#2 := Literal(type=BOOL, value=true)
              | |   |             |     +-input_scan=
              | |   |             |       +-SingleRowScan
              | |   |             +-SetOperationScan
              | |   |               +-column_list=[$graph_set_op.a_7#5]
              | |   |               +-op_type=UNION_ALL
              | |   |               +-input_item_list=
              | |   |               | +-SetOperationItem
              | |   |               | | +-scan=
              | |   |               | | | +-GraphLinearScan
              | |   |               | | |   +-column_list=[$graph_table.a_7#3]
              | |   |               | | |   +-scan_list=
              | |   |               | | |     +-ProjectScan
              | |   |               | | |       +-column_list=[$graph_table.a_7#3]
              | |   |               | | |       +-expr_list=
              | |   |               | | |       | +-a_7#3 := Literal(type=BOOL, value=true)
              | |   |               | | |       +-input_scan=
              | |   |               | | |         +-GraphRefScan(column_list=[$graph_table.a_6#2])
              | |   |               | | +-output_column_list=[$graph_table.a_7#3]
              | |   |               | +-SetOperationItem
              | |   |               |   +-scan=
              | |   |               |   | +-GraphLinearScan
              | |   |               |   |   +-column_list=[$graph_table.a_7#4]
              | |   |               |   |   +-scan_list=
              | |   |               |   |     +-ProjectScan
              | |   |               |   |       +-column_list=[$graph_table.a_7#4]
              | |   |               |   |       +-expr_list=
              | |   |               |   |       | +-a_7#4 := Literal(type=BOOL, value=true)
              | |   |               |   |       +-input_scan=
              | |   |               |   |         +-GraphRefScan(column_list=[$graph_table.a_6#2])
              | |   |               |   +-output_column_list=[$graph_table.a_7#4]
              | |   |               +-column_match_mode=CORRESPONDING
              | |   +-head=$element_table.$element1#1
              | |   +-tail=$element_table.$element1#1
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.a_13#6]
                +-expr_list=
                | +-a_13#6 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-GraphRefScan(column_list=[$element_table.$element1#1])

==

GRAPH aml
MATCH
  ()
  (-[]->()
    WHERE VALUE {
      GRAPH aml
      RETURN TRUE AS a_6
      NEXT

      RETURN TRUE AS a_7
      UNION ALL
      RETURN TRUE AS a_7
    }
  )
RETURN 1 AS a_13;

--

QueryStmt
+-output_column_list=
| +-$graph_table.a_13#9 AS a_13 [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.a_13#9]
    +-property_graph=sample_catalog.aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.a_13#9]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.a_13#9]
            +-scan_list=
              +-GraphScan
              | +-column_list=$element_table.[$element1#1, $element2#2, $element3#3, $element4#4]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=$element_table.[$element1#1, $element2#2, $element3#3, $element4#4]
              | |   +-input_scan_list=
              | |   | +-GraphNodeScan
              | |   | | +-column_list=[$element_table.$element1#1]
              | |   | | +-label_expr=
              | |   | | | +-GraphLabelNaryExpr
              | |   | | |   +-op=OR
              | |   | | |   +-operand_list=
              | |   | | |     +-GraphWildCardLabel
              | |   | | |     +-GraphLabelNaryExpr
              | |   | | |       +-op=NOT
              | |   | | |       +-operand_list=
              | |   | | |         +-GraphWildCardLabel
              | |   | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
              | |   | +-GraphPathScan
              | |   |   +-column_list=$element_table.[$element2#2, $element3#3, $element4#4]
              | |   |   +-input_scan_list=
              | |   |   | +-GraphNodeScan
              | |   |   | | +-column_list=[$element_table.$element2#2]
              | |   |   | | +-label_expr=
              | |   |   | | | +-GraphLabelNaryExpr
              | |   |   | | |   +-op=OR
              | |   |   | | |   +-operand_list=
              | |   |   | | |     +-GraphWildCardLabel
              | |   |   | | |     +-GraphLabelNaryExpr
              | |   |   | | |       +-op=NOT
              | |   |   | | |       +-operand_list=
              | |   |   | | |         +-GraphWildCardLabel
              | |   |   | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
              | |   |   | +-GraphEdgeScan
              | |   |   | | +-column_list=[$element_table.$element3#3]
              | |   |   | | +-label_expr=
              | |   |   | | | +-GraphLabelNaryExpr
              | |   |   | | |   +-op=OR
              | |   |   | | |   +-operand_list=
              | |   |   | | |     +-GraphWildCardLabel
              | |   |   | | |     +-GraphLabelNaryExpr
              | |   |   | | |       +-op=NOT
              | |   |   | | |       +-operand_list=
              | |   |   | | |         +-GraphWildCardLabel
              | |   |   | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
              | |   |   | | +-orientation=RIGHT
              | |   |   | +-GraphNodeScan
              | |   |   |   +-column_list=[$element_table.$element4#4]
              | |   |   |   +-label_expr=
              | |   |   |   | +-GraphLabelNaryExpr
              | |   |   |   |   +-op=OR
              | |   |   |   |   +-operand_list=
              | |   |   |   |     +-GraphWildCardLabel
              | |   |   |   |     +-GraphLabelNaryExpr
              | |   |   |   |       +-op=NOT
              | |   |   |   |       +-operand_list=
              | |   |   |   |         +-GraphWildCardLabel
              | |   |   |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
              | |   |   +-filter_expr=
              | |   |   | +-SubqueryExpr
              | |   |   |   +-type=BOOL
              | |   |   |   +-subquery_type=SCALAR
              | |   |   |   +-subquery=
              | |   |   |     +-GraphTableScan
              | |   |   |       +-column_list=[$graph_set_op.a_7#8]
              | |   |   |       +-property_graph=sample_catalog.aml
              | |   |   |       +-input_scan=
              | |   |   |         +-GraphLinearScan
              | |   |   |           +-column_list=[$graph_set_op.a_7#8]
              | |   |   |           +-scan_list=
              | |   |   |             +-GraphLinearScan
              | |   |   |             | +-column_list=[$graph_table.a_6#5]
              | |   |   |             | +-scan_list=
              | |   |   |             |   +-ProjectScan
              | |   |   |             |     +-column_list=[$graph_table.a_6#5]
              | |   |   |             |     +-expr_list=
              | |   |   |             |     | +-a_6#5 := Literal(type=BOOL, value=true)
              | |   |   |             |     +-input_scan=
              | |   |   |             |       +-SingleRowScan
              | |   |   |             +-SetOperationScan
              | |   |   |               +-column_list=[$graph_set_op.a_7#8]
              | |   |   |               +-op_type=UNION_ALL
              | |   |   |               +-input_item_list=
              | |   |   |               | +-SetOperationItem
              | |   |   |               | | +-scan=
              | |   |   |               | | | +-GraphLinearScan
              | |   |   |               | | |   +-column_list=[$graph_table.a_7#6]
              | |   |   |               | | |   +-scan_list=
              | |   |   |               | | |     +-ProjectScan
              | |   |   |               | | |       +-column_list=[$graph_table.a_7#6]
              | |   |   |               | | |       +-expr_list=
              | |   |   |               | | |       | +-a_7#6 := Literal(type=BOOL, value=true)
              | |   |   |               | | |       +-input_scan=
              | |   |   |               | | |         +-GraphRefScan(column_list=[$graph_table.a_6#5])
              | |   |   |               | | +-output_column_list=[$graph_table.a_7#6]
              | |   |   |               | +-SetOperationItem
              | |   |   |               |   +-scan=
              | |   |   |               |   | +-GraphLinearScan
              | |   |   |               |   |   +-column_list=[$graph_table.a_7#7]
              | |   |   |               |   |   +-scan_list=
              | |   |   |               |   |     +-ProjectScan
              | |   |   |               |   |       +-column_list=[$graph_table.a_7#7]
              | |   |   |               |   |       +-expr_list=
              | |   |   |               |   |       | +-a_7#7 := Literal(type=BOOL, value=true)
              | |   |   |               |   |       +-input_scan=
              | |   |   |               |   |         +-GraphRefScan(column_list=[$graph_table.a_6#5])
              | |   |   |               |   +-output_column_list=[$graph_table.a_7#7]
              | |   |   |               +-column_match_mode=CORRESPONDING
              | |   |   +-head=$element_table.$element2#2
              | |   |   +-tail=$element_table.$element4#4
              | |   +-head=$element_table.$element1#1
              | |   +-tail=$element_table.$element4#4
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.a_13#9]
                +-expr_list=
                | +-a_13#9 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-GraphRefScan(column_list=$element_table.[$element1#1, $element2#2, $element3#3, $element4#4])
==

[default language_features=V_1_4_SQL_GRAPH,V_1_1_WITH_ON_SUBQUERY]
[default no_test_extract_table_names]

SELECT gt.one
FROM GRAPH_TABLE(aml
  MATCH (n:Person|Account WHERE (
    WITH x AS (SELECT 1 as a)
    SELECT a FROM x
    WHERE n.age > a
  ) > 1)
  COLUMNS (1 as one)
) gt

--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$element_table.n#1]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$element_table.n#1]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.n#1]
        |       |   +-filter_expr=
        |       |   | +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |       |   |   +-SubqueryExpr
        |       |   |   | +-type=INT64
        |       |   |   | +-subquery_type=SCALAR
        |       |   |   | +-parameter_list=
        |       |   |   | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
        |       |   |   | +-subquery=
        |       |   |   |   +-WithScan
        |       |   |   |     +-column_list=[x.a#3]
        |       |   |   |     +-with_entry_list=
        |       |   |   |     | +-WithEntry
        |       |   |   |     |   +-with_query_name="x"
        |       |   |   |     |   +-with_subquery=
        |       |   |   |     |     +-ProjectScan
        |       |   |   |     |       +-column_list=[x.a#2]
        |       |   |   |     |       +-expr_list=
        |       |   |   |     |       | +-a#2 := Literal(type=INT64, value=1)
        |       |   |   |     |       +-input_scan=
        |       |   |   |     |         +-SingleRowScan
        |       |   |   |     +-query=
        |       |   |   |       +-ProjectScan
        |       |   |   |         +-column_list=[x.a#3]
        |       |   |   |         +-input_scan=
        |       |   |   |           +-FilterScan
        |       |   |   |             +-column_list=[x.a#3]
        |       |   |   |             +-input_scan=
        |       |   |   |             | +-WithRefScan(column_list=[x.a#3], with_query_name="x")
        |       |   |   |             +-filter_expr=
        |       |   |   |               +-FunctionCall(ZetaSQL:$greater(UINT64, INT64) -> BOOL)
        |       |   |   |                 +-Cast(UINT32 -> UINT64)
        |       |   |   |                 | +-GraphGetElementProperty
        |       |   |   |                 |   +-type=UINT32
        |       |   |   |                 |   +-expr=
        |       |   |   |                 |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1, is_correlated=TRUE)
        |       |   |   |                 |   +-property=age(UINT32)
        |       |   |   |                 +-ColumnRef(type=INT64, column=x.a#3)
        |       |   |   +-Literal(type=INT64, value=1)
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphLabel(label=sample_catalog.aml.Person)
        |       |   |     +-GraphLabel(label=sample_catalog.aml.Account)
        |       |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person]
        |       +-head=$element_table.n#1
        |       +-tail=$element_table.n#1
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)

==

[default language_features=V_1_4_SQL_GRAPH,V_1_1_WITH_ON_SUBQUERY]
[default no_test_extract_table_names]

SELECT gt.one
FROM GRAPH_TABLE(aml
  MATCH (n:!% WHERE (
    WITH x AS (SELECT 1 as a)
    SELECT a FROM x
    WHERE property_exists(n, age)
  ) > 1)
  COLUMNS (1 as one)
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$element_table.n#1]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$element_table.n#1]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.n#1]
        |       |   +-filter_expr=
        |       |   | +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |       |   |   +-SubqueryExpr
        |       |   |   | +-type=INT64
        |       |   |   | +-subquery_type=SCALAR
        |       |   |   | +-parameter_list=
        |       |   |   | | +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1)
        |       |   |   | +-subquery=
        |       |   |   |   +-WithScan
        |       |   |   |     +-column_list=[x.a#3]
        |       |   |   |     +-with_entry_list=
        |       |   |   |     | +-WithEntry
        |       |   |   |     |   +-with_query_name="x"
        |       |   |   |     |   +-with_subquery=
        |       |   |   |     |     +-ProjectScan
        |       |   |   |     |       +-column_list=[x.a#2]
        |       |   |   |     |       +-expr_list=
        |       |   |   |     |       | +-a#2 := Literal(type=INT64, value=1)
        |       |   |   |     |       +-input_scan=
        |       |   |   |     |         +-SingleRowScan
        |       |   |   |     +-query=
        |       |   |   |       +-ProjectScan
        |       |   |   |         +-column_list=[x.a#3]
        |       |   |   |         +-input_scan=
        |       |   |   |           +-FilterScan
        |       |   |   |             +-column_list=[x.a#3]
        |       |   |   |             +-input_scan=
        |       |   |   |             | +-WithRefScan(column_list=[x.a#3], with_query_name="x")
        |       |   |   |             +-filter_expr=
        |       |   |   |               +-FunctionCall(ZetaSQL:property_exists(GRAPH_NODE(aml)<>, STRING) -> BOOL)
        |       |   |   |                 +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1, is_correlated=TRUE)
        |       |   |   |                 +-Literal(type=STRING, value="age")
        |       |   |   +-Literal(type=INT64, value=1)
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=NOT
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   +-target_element_table_list=[]
        |       +-head=$element_table.n#1
        |       +-tail=$element_table.n#1
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)
