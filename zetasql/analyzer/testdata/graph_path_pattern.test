[default language_features=V_1_4_SQL_GRAPH]
[default no_test_extract_table_names]
[default show_unparsed]

select * from graph_table(
  aml
  match (a) -[b IS PersonOwnAccount]-> (c)
  columns (a.Id, b.PersonId, c.Id as c_id)
)

--
QueryStmt
+-output_column_list=
| +-$graph_table.Id#4 AS Id [INT64]
| +-$graph_table.PersonId#5 AS PersonId [INT64]
| +-$graph_table.c_id#6 AS c_id [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[Id#4, PersonId#5, c_id#6]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[Id#4, PersonId#5, c_id#6]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[a#1, b#2, c#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[a#1, b#2, c#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.a#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.b#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.PersonOwnAccount)
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.c#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       +-head=$element_table.a#1
        |       +-tail=$element_table.c#3
        +-shape_expr_list=
          +-Id#4 :=
          | +-GraphGetElementProperty
          |   +-type=INT64
          |   +-expr=
          |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
          |   +-property=id(INT64)
          +-PersonId#5 :=
          | +-GraphGetElementProperty
          |   +-type=INT64
          |   +-expr=
          |   | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, personId INT64>, column=$element_table.b#2)
          |   +-property=personId(INT64)
          +-c_id#6 :=
            +-GraphGetElementProperty
              +-type=INT64
              +-expr=
              | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.c#3)
              +-property=id(INT64)

[UNPARSED_SQL]
SELECT
  aml_1.a_5 AS Id,
  aml_1.a_6 AS PersonId,
  aml_1.a_7 AS c_id
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS PersonOwnAccount]->
      (a_4
      IS (% | ! %))
    COLUMNS(
      a_2.id AS a_5,
      a_3.personId AS a_6,
      a_4.id AS a_7
    )
  ) AS aml_1;
==

select * from graph_table(
  aml
match (a IS Account) -[b]-> (a WHERE a.name = "")
  columns (1 as one)
)

--
ERROR: Property name is not exposed by element type GRAPH_NODE(aml)<balance UINT64, id INT64> [at 3:40]
match (a IS Account) -[b]-> (a WHERE a.name = "")
                                       ^
==

[no_run_unparser]
# Disable unparse test because path pattern WHERE clause is not supported,
# as a result, we cannot express
#   (a IS Account) -[b]-> (a)
#     as
#   (a IS Account) -[b]-> (c) WHERE SAME(a, c)
# syntactically yet.
# TODO: Re-enable unparse test when we support path pattern where
# clause syntax.
select * from graph_table(
  aml
  match (a IS Account) -[b]-> (a)
  columns (1 as one, CAST(a.id as string) AS id_string)
)

--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
| +-$graph_table.id_string#5 AS id_string [STRING]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[one#4, id_string#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[one#4, id_string#5]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[a#1, b#2, a#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[a#1, b#2, a#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.a#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=AND
        |       | | |   +-operand_list=
        |       | | |     +-GraphLabel(label=sample_catalog.aml.Account)
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=OR
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | |         +-GraphLabelNaryExpr
        |       | | |           +-op=NOT
        |       | | |           +-operand_list=
        |       | | |             +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.Account]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.b#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.a#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=AND
        |       |   |   +-operand_list=
        |       |   |     +-GraphLabel(label=sample_catalog.aml.Account)
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=OR
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   |         +-GraphLabelNaryExpr
        |       |   |           +-op=NOT
        |       |   |           +-operand_list=
        |       |   |             +-GraphWildCardLabel
        |       |   +-target_element_table_list=[sample_catalog.aml.Account]
        |       +-filter_expr=
        |       | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<balance UINT64, id INT64>, GRAPH_NODE(aml)<balance UINT64, id INT64>) -> BOOL)
        |       |   +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#1)
        |       |   +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
        |       +-head=$element_table.a#1
        |       +-tail=$element_table.a#3
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)
          +-id_string#5 :=
            +-Cast(INT64 -> STRING)
              +-GraphGetElementProperty
                +-type=INT64
                +-expr=
                | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#1)
                +-property=id(INT64)

==

[no_run_unparser]
# Disable unparse test because path pattern WHERE clause is not supported,
# as a result, we cannot express
#   (a IS Account) -> (a IS Account) -> (a)
#     as
#   (a IS Account) -> (b IS Account) -> (c) WHERE SAME(a, b, c)
# syntactically yet.
# Multiply-declared variable label resolution: all ocurrences of `a` have
# the same label expression `Person & Account & (% | %)`.
# TODO: Re-enable unparse test when we support path pattern where
# clause syntax.
select * from graph_table(
  aml
  match (a IS Person) -> (a IS Account) -> (a)
  columns (1 AS one)
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#6 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#6]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#6]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[a#1, $element1#2, a#3, $element2#4, a#5]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[a#1, $element1#2, a#3, $element2#4, a#5]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.a#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=AND
        |       | | |   +-operand_list=
        |       | | |     +-GraphLabel(label=sample_catalog.aml.Person)
        |       | | |     +-GraphLabel(label=sample_catalog.aml.Account)
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=OR
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | |         +-GraphLabelNaryExpr
        |       | | |           +-op=NOT
        |       | | |           +-operand_list=
        |       | | |             +-GraphWildCardLabel
        |       | | +-target_element_table_list=[]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element1#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.a#3]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=AND
        |       | | |   +-operand_list=
        |       | | |     +-GraphLabel(label=sample_catalog.aml.Person)
        |       | | |     +-GraphLabel(label=sample_catalog.aml.Account)
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=OR
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | |         +-GraphLabelNaryExpr
        |       | | |           +-op=NOT
        |       | | |           +-operand_list=
        |       | | |             +-GraphWildCardLabel
        |       | | +-target_element_table_list=[]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element2#4]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.a#5]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=AND
        |       |   |   +-operand_list=
        |       |   |     +-GraphLabel(label=sample_catalog.aml.Person)
        |       |   |     +-GraphLabel(label=sample_catalog.aml.Account)
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=OR
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   |         +-GraphLabelNaryExpr
        |       |   |           +-op=NOT
        |       |   |           +-operand_list=
        |       |   |             +-GraphWildCardLabel
        |       |   +-target_element_table_list=[]
        |       +-filter_expr=
        |       | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
        |       |   +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<>, GRAPH_NODE(aml)<>) -> BOOL)
        |       |   | +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.a#1)
        |       |   | +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.a#3)
        |       |   +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<>, GRAPH_NODE(aml)<>) -> BOOL)
        |       |     +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.a#1)
        |       |     +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.a#5)
        |       +-head=$element_table.a#1
        |       +-tail=$element_table.a#5
        +-shape_expr_list=
          +-one#6 := Literal(type=INT64, value=1)
==

# After pattern canonicalization, an empty node pattern will be inserted before
# -[a]->.
select * from graph_table(
  aml
  match -[a IS PersonOwnAccount]-> (b IS Account)
  columns (1 as one)
)

--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[$element1#1, a#2, b#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[$element1#1, a#2, b#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element1#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.a#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.PersonOwnAccount)
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.b#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabel(label=sample_catalog.aml.Account)
        |       |   +-target_element_table_list=[sample_catalog.aml.Account]
        |       +-head=$element_table.$element1#1
        |       +-tail=$element_table.b#3
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)

[UNPARSED_SQL]
SELECT
  aml_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS PersonOwnAccount]->
      (a_4
      IS Account)
    COLUMNS(
      1 AS a_5
    )
  ) AS aml_1;
==

# After pattern canonicalization, an empty node pattern will be inserted after
# -[b]->.
select * from graph_table(
  aml
  match (a IS Person) -[b IS PersonOwnAccount]->
  columns (1 as one)
)

--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[a#1, b#2, $element1#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[a#1, b#2, $element1#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.a#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Person)
        |       | | +-target_element_table_list=[sample_catalog.aml.Person]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.b#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.PersonOwnAccount)
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.$element1#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       +-head=$element_table.a#1
        |       +-tail=$element_table.$element1#3
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)

[UNPARSED_SQL]
SELECT
  aml_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS PersonOwnAccount]->
      (a_4
      IS (% | ! %))
    COLUMNS(
      1 AS a_5
    )
  ) AS aml_1;
==

select * from graph_table(
  aml
  match (a) (b)
  columns (1 as one)
)

--
QueryStmt
+-output_column_list=
| +-$graph_table.one#3 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#3]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#3]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[a#1, b#2]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[a#1, b#2]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.a#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.b#2]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       +-head=$element_table.a#1
        |       +-tail=$element_table.b#2
        +-shape_expr_list=
          +-one#3 := Literal(type=INT64, value=1)

[UNPARSED_SQL]
SELECT
  aml_1.a_4 AS one
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      (a_3
      IS (% | ! %))
    COLUMNS(
      1 AS a_4
    )
  ) AS aml_1;
==

select * from graph_table(
  aml
  match -[a IS Transfer]-> <-[b IS Transfer]-
  columns (1 as one)
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#6 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#6]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#6]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[$element1#1, a#2, $element2#3, b#4, $element3#5]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[$element1#1, a#2, $element2#3, b#4, $element3#5]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element1#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.a#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Transfer)
        |       | | +-target_element_table_list=[sample_catalog.aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element2#3]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.b#4]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Transfer)
        |       | | +-target_element_table_list=[sample_catalog.aml.Transfer]
        |       | | +-orientation=LEFT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.$element3#5]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       +-head=$element_table.$element1#1
        |       +-tail=$element_table.$element3#5
        +-shape_expr_list=
          +-one#6 := Literal(type=INT64, value=1)

[UNPARSED_SQL]
SELECT
  aml_1.a_7 AS one
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS Transfer]->
      (a_4
      IS (% | ! %))
      <-[a_5
      IS Transfer]-
      (a_6
      IS (% | ! %))
    COLUMNS(
      1 AS a_7
    )
  ) AS aml_1;
==

select * from graph_table(
  aml
  match -[IS Transfer]-> -[IS Transfer]->
  columns (1 as one)
)

--
QueryStmt
+-output_column_list=
| +-$graph_table.one#6 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#6]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#6]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[$element1#1, $element2#2, $element3#3, $element4#4, $element5#5]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[$element1#1, $element2#2, $element3#3, $element4#4, $element5#5]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element1#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element2#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Transfer)
        |       | | +-target_element_table_list=[sample_catalog.aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element3#3]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element4#4]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Transfer)
        |       | | +-target_element_table_list=[sample_catalog.aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.$element5#5]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       +-head=$element_table.$element1#1
        |       +-tail=$element_table.$element5#5
        +-shape_expr_list=
          +-one#6 := Literal(type=INT64, value=1)

[UNPARSED_SQL]
SELECT
  aml_1.a_7 AS one
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS Transfer]->
      (a_4
      IS (% | ! %))
      -[a_5
      IS Transfer]->
      (a_6
      IS (% | ! %))
    COLUMNS(
      1 AS a_7
    )
  ) AS aml_1;
==

select * from graph_table(
  aml
  match -[IS Transfer]- -[IS Transfer]-
  columns (1 as one)
)

--
QueryStmt
+-output_column_list=
| +-$graph_table.one#6 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#6]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#6]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[$element1#1, $element2#2, $element3#3, $element4#4, $element5#5]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[$element1#1, $element2#2, $element3#3, $element4#4, $element5#5]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element1#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element2#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Transfer)
        |       | | +-target_element_table_list=[sample_catalog.aml.Transfer]
        |       | | +-orientation=ANY
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element3#3]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element4#4]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Transfer)
        |       | | +-target_element_table_list=[sample_catalog.aml.Transfer]
        |       | | +-orientation=ANY
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.$element5#5]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       +-head=$element_table.$element1#1
        |       +-tail=$element_table.$element5#5
        +-shape_expr_list=
          +-one#6 := Literal(type=INT64, value=1)

[UNPARSED_SQL]
SELECT
  aml_1.a_7 AS one
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS Transfer]-
      (a_4
      IS (% | ! %))
      -[a_5
      IS Transfer]-
      (a_6
      IS (% | ! %))
    COLUMNS(
      1 AS a_7
    )
  ) AS aml_1;
==

select * from graph_table(
  aml
  match <-[IS Transfer]- <-[IS Transfer]-
  columns (1 as one)
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#6 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#6]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#6]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[$element1#1, $element2#2, $element3#3, $element4#4, $element5#5]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[$element1#1, $element2#2, $element3#3, $element4#4, $element5#5]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element1#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element2#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Transfer)
        |       | | +-target_element_table_list=[sample_catalog.aml.Transfer]
        |       | | +-orientation=LEFT
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element3#3]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element4#4]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Transfer)
        |       | | +-target_element_table_list=[sample_catalog.aml.Transfer]
        |       | | +-orientation=LEFT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.$element5#5]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person,sample_catalog.aml.Syndicate]
        |       +-head=$element_table.$element1#1
        |       +-tail=$element_table.$element5#5
        +-shape_expr_list=
          +-one#6 := Literal(type=INT64, value=1)

[UNPARSED_SQL]
SELECT
  aml_1.a_7 AS one
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      <-[a_3
      IS Transfer]-
      (a_4
      IS (% | ! %))
      <-[a_5
      IS Transfer]-
      (a_6
      IS (% | ! %))
    COLUMNS(
      1 AS a_7
    )
  ) AS aml_1;
==

# 3-hop path.
select * from graph_table(
  aml
  match (a IS Person WHERE a.Name = 'Alice') -> (IS Account) -> (IS Account) <- (b IS Person)
  columns (a.Name AS sender, b.Name as receiver)
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.sender#8 AS sender [STRING]
| +-$graph_table.receiver#9 AS receiver [STRING]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[sender#8, receiver#9]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[sender#8, receiver#9]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[a#1, $element1#2, $element2#3, $element3#4, $element4#5, $element5#6, b#7]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[a#1, $element1#2, $element2#3, $element3#4, $element4#5, $element5#6, b#7]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.a#1]
        |       | | +-filter_expr=
        |       | | | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |       | | |   +-GraphGetElementProperty
        |       | | |   | +-type=STRING
        |       | | |   | +-expr=
        |       | | |   | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#1)
        |       | | |   | +-property=name(STRING)
        |       | | |   +-Literal(type=STRING, value="Alice")
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Person)
        |       | | +-target_element_table_list=[sample_catalog.aml.Person]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element1#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element2#3]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Account)
        |       | | +-target_element_table_list=[sample_catalog.aml.Account]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element3#4]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element4#5]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Account)
        |       | | +-target_element_table_list=[sample_catalog.aml.Account]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element5#6]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=LEFT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.b#7]
        |       |   +-label_expr=
        |       |   | +-GraphLabel(label=sample_catalog.aml.Person)
        |       |   +-target_element_table_list=[sample_catalog.aml.Person]
        |       +-head=$element_table.a#1
        |       +-tail=$element_table.b#7
        +-shape_expr_list=
          +-sender#8 :=
          | +-GraphGetElementProperty
          |   +-type=STRING
          |   +-expr=
          |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#1)
          |   +-property=name(STRING)
          +-receiver#9 :=
            +-GraphGetElementProperty
              +-type=STRING
              +-expr=
              | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.b#7)
              +-property=name(STRING)

[UNPARSED_SQL]
SELECT
  aml_1.a_9 AS sender,
  aml_1.a_10 AS receiver
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person
      WHERE
        (a_2.name) = "Alice")
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS Account)
      -[a_5
      IS (% | ! %)]->
      (a_6
      IS Account)
      <-[a_7
      IS (% | ! %)]-
      (a_8
      IS Person)
    COLUMNS(
      a_2.name AS a_9,
      a_8.name AS a_10
    )
  ) AS aml_1;
==

# Matches Person, PersonOwnAccount, Account
# when edge orientation is RIGHT or ANY.
select * from graph_table(
  aml
  match (IS Person) {{<-|-|->}} (IS Account)
  columns (1 as one)
)

--
ALTERNATION GROUP: <-
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[$element1#1, $element2#2, $element3#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[$element1#1, $element2#2, $element3#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element1#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Person)
        |       | | +-target_element_table_list=[sample_catalog.aml.Person]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element2#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=LEFT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.$element3#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabel(label=sample_catalog.aml.Account)
        |       |   +-target_element_table_list=[sample_catalog.aml.Account]
        |       +-head=$element_table.$element1#1
        |       +-tail=$element_table.$element3#3
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)

[UNPARSED_SQL]
SELECT
  aml_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      <-[a_3
      IS (% | ! %)]-
      (a_4
      IS Account)
    COLUMNS(
      1 AS a_5
    )
  ) AS aml_1;
--
ALTERNATION GROUP: -
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[$element1#1, $element2#2, $element3#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[$element1#1, $element2#2, $element3#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element1#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Person)
        |       | | +-target_element_table_list=[sample_catalog.aml.Person]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element2#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=ANY
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.$element3#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabel(label=sample_catalog.aml.Account)
        |       |   +-target_element_table_list=[sample_catalog.aml.Account]
        |       +-head=$element_table.$element1#1
        |       +-tail=$element_table.$element3#3
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)

[UNPARSED_SQL]
SELECT
  aml_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS (% | ! %)]-
      (a_4
      IS Account)
    COLUMNS(
      1 AS a_5
    )
  ) AS aml_1;
--
ALTERNATION GROUP: ->
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[$element1#1, $element2#2, $element3#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[$element1#1, $element2#2, $element3#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element1#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Person)
        |       | | +-target_element_table_list=[sample_catalog.aml.Person]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element2#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.$element3#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabel(label=sample_catalog.aml.Account)
        |       |   +-target_element_table_list=[sample_catalog.aml.Account]
        |       +-head=$element_table.$element1#1
        |       +-tail=$element_table.$element3#3
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)

[UNPARSED_SQL]
SELECT
  aml_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS Account)
    COLUMNS(
      1 AS a_5
    )
  ) AS aml_1;
==

# Matches Account, Transfer, Account
# regardless of orientation.
select * from graph_table(
  aml
  match (IS Account) {{<-|-|->}} (IS Account)
  columns (1 as one)
)

--
ALTERNATION GROUP: <-
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[$element1#1, $element2#2, $element3#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[$element1#1, $element2#2, $element3#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element1#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Account)
        |       | | +-target_element_table_list=[sample_catalog.aml.Account]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element2#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=LEFT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.$element3#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabel(label=sample_catalog.aml.Account)
        |       |   +-target_element_table_list=[sample_catalog.aml.Account]
        |       +-head=$element_table.$element1#1
        |       +-tail=$element_table.$element3#3
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)

[UNPARSED_SQL]
SELECT
  aml_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Account)
      <-[a_3
      IS (% | ! %)]-
      (a_4
      IS Account)
    COLUMNS(
      1 AS a_5
    )
  ) AS aml_1;
--
ALTERNATION GROUP: -
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[$element1#1, $element2#2, $element3#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[$element1#1, $element2#2, $element3#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element1#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Account)
        |       | | +-target_element_table_list=[sample_catalog.aml.Account]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element2#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=ANY
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.$element3#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabel(label=sample_catalog.aml.Account)
        |       |   +-target_element_table_list=[sample_catalog.aml.Account]
        |       +-head=$element_table.$element1#1
        |       +-tail=$element_table.$element3#3
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)

[UNPARSED_SQL]
SELECT
  aml_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Account)
      -[a_3
      IS (% | ! %)]-
      (a_4
      IS Account)
    COLUMNS(
      1 AS a_5
    )
  ) AS aml_1;
--
ALTERNATION GROUP: ->
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[$element1#1, $element2#2, $element3#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[$element1#1, $element2#2, $element3#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element1#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Account)
        |       | | +-target_element_table_list=[sample_catalog.aml.Account]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element2#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.$element3#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabel(label=sample_catalog.aml.Account)
        |       |   +-target_element_table_list=[sample_catalog.aml.Account]
        |       +-head=$element_table.$element1#1
        |       +-tail=$element_table.$element3#3
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)

[UNPARSED_SQL]
SELECT
  aml_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Account)
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS Account)
    COLUMNS(
      1 AS a_5
    )
  ) AS aml_1;
==

# No match regardless of orientation: no edges between Person and Person.
select * from graph_table(
  aml
  match (IS Person) {{<-|-|->}} (IS Person)
  columns (1 as one)
)

--
ALTERNATION GROUP: <-
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[$element1#1, $element2#2, $element3#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[$element1#1, $element2#2, $element3#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element1#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Person)
        |       | | +-target_element_table_list=[sample_catalog.aml.Person]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element2#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=LEFT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.$element3#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabel(label=sample_catalog.aml.Person)
        |       |   +-target_element_table_list=[sample_catalog.aml.Person]
        |       +-head=$element_table.$element1#1
        |       +-tail=$element_table.$element3#3
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)

[UNPARSED_SQL]
SELECT
  aml_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      <-[a_3
      IS (% | ! %)]-
      (a_4
      IS Person)
    COLUMNS(
      1 AS a_5
    )
  ) AS aml_1;
--
ALTERNATION GROUP: -
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[$element1#1, $element2#2, $element3#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[$element1#1, $element2#2, $element3#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element1#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Person)
        |       | | +-target_element_table_list=[sample_catalog.aml.Person]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element2#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=ANY
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.$element3#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabel(label=sample_catalog.aml.Person)
        |       |   +-target_element_table_list=[sample_catalog.aml.Person]
        |       +-head=$element_table.$element1#1
        |       +-tail=$element_table.$element3#3
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)

[UNPARSED_SQL]
SELECT
  aml_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS (% | ! %)]-
      (a_4
      IS Person)
    COLUMNS(
      1 AS a_5
    )
  ) AS aml_1;
--
ALTERNATION GROUP: ->
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[$element1#1, $element2#2, $element3#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[$element1#1, $element2#2, $element3#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element1#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Person)
        |       | | +-target_element_table_list=[sample_catalog.aml.Person]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element2#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.$element3#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabel(label=sample_catalog.aml.Person)
        |       |   +-target_element_table_list=[sample_catalog.aml.Person]
        |       +-head=$element_table.$element1#1
        |       +-tail=$element_table.$element3#3
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)

[UNPARSED_SQL]
SELECT
  aml_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS Person)
    COLUMNS(
      1 AS a_5
    )
  ) AS aml_1;
==

# No match regardless of orientation: wrong edges between Person and Account.
select * from graph_table(
  aml
  match (a IS Person) {{<-[IS Transfer]-|-[IS Transfer]-|-[IS Transfer]->}} (b IS Account)
  columns (1 as one)
)
--
ALTERNATION GROUP: <-[IS Transfer]-
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[a#1, $element1#2, b#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[a#1, $element1#2, b#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.a#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Person)
        |       | | +-target_element_table_list=[sample_catalog.aml.Person]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element1#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Transfer)
        |       | | +-target_element_table_list=[sample_catalog.aml.Transfer]
        |       | | +-orientation=LEFT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.b#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabel(label=sample_catalog.aml.Account)
        |       |   +-target_element_table_list=[sample_catalog.aml.Account]
        |       +-head=$element_table.a#1
        |       +-tail=$element_table.b#3
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)

[UNPARSED_SQL]
SELECT
  aml_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      <-[a_3
      IS Transfer]-
      (a_4
      IS Account)
    COLUMNS(
      1 AS a_5
    )
  ) AS aml_1;
--
ALTERNATION GROUP: -[IS Transfer]-
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[a#1, $element1#2, b#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[a#1, $element1#2, b#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.a#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Person)
        |       | | +-target_element_table_list=[sample_catalog.aml.Person]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element1#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Transfer)
        |       | | +-target_element_table_list=[sample_catalog.aml.Transfer]
        |       | | +-orientation=ANY
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.b#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabel(label=sample_catalog.aml.Account)
        |       |   +-target_element_table_list=[sample_catalog.aml.Account]
        |       +-head=$element_table.a#1
        |       +-tail=$element_table.b#3
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)

[UNPARSED_SQL]
SELECT
  aml_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS Transfer]-
      (a_4
      IS Account)
    COLUMNS(
      1 AS a_5
    )
  ) AS aml_1;
--
ALTERNATION GROUP: -[IS Transfer]->
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[a#1, $element1#2, b#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[a#1, $element1#2, b#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.a#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Person)
        |       | | +-target_element_table_list=[sample_catalog.aml.Person]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element1#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(label=sample_catalog.aml.Transfer)
        |       | | +-target_element_table_list=[sample_catalog.aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.b#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabel(label=sample_catalog.aml.Account)
        |       |   +-target_element_table_list=[sample_catalog.aml.Account]
        |       +-head=$element_table.a#1
        |       +-tail=$element_table.b#3
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)

[UNPARSED_SQL]
SELECT
  aml_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS Transfer]->
      (a_4
      IS Account)
    COLUMNS(
      1 AS a_5
    )
  ) AS aml_1;
==

# Matches Person, PersonOwnAccount, Account AND
#         Account, Transfer, Account
# when orientation is RIGHT or ANY;
#
# Matches Account, Transfer, Account
# when orientation is LEFT.
select * from graph_table(
  aml
  match (a IS Person | Account) {{<-|-|->}} (b IS Account)
  columns (1 as one)
)
--
ALTERNATION GROUP: <-
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[a#1, $element1#2, b#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[a#1, $element1#2, b#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.a#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphLabel(label=sample_catalog.aml.Person)
        |       | | |     +-GraphLabel(label=sample_catalog.aml.Account)
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element1#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=LEFT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.b#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabel(label=sample_catalog.aml.Account)
        |       |   +-target_element_table_list=[sample_catalog.aml.Account]
        |       +-head=$element_table.a#1
        |       +-tail=$element_table.b#3
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)

[UNPARSED_SQL]
SELECT
  aml_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (Person | Account))
      <-[a_3
      IS (% | ! %)]-
      (a_4
      IS Account)
    COLUMNS(
      1 AS a_5
    )
  ) AS aml_1;
--
ALTERNATION GROUP: -
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[a#1, $element1#2, b#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[a#1, $element1#2, b#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.a#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphLabel(label=sample_catalog.aml.Person)
        |       | | |     +-GraphLabel(label=sample_catalog.aml.Account)
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element1#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=ANY
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.b#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabel(label=sample_catalog.aml.Account)
        |       |   +-target_element_table_list=[sample_catalog.aml.Account]
        |       +-head=$element_table.a#1
        |       +-tail=$element_table.b#3
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)

[UNPARSED_SQL]
SELECT
  aml_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (Person | Account))
      -[a_3
      IS (% | ! %)]-
      (a_4
      IS Account)
    COLUMNS(
      1 AS a_5
    )
  ) AS aml_1;
--
ALTERNATION GROUP: ->
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=sample_catalog.aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[a#1, $element1#2, b#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[a#1, $element1#2, b#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.a#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphLabel(label=sample_catalog.aml.Person)
        |       | | |     +-GraphLabel(label=sample_catalog.aml.Account)
        |       | | +-target_element_table_list=[sample_catalog.aml.Account,sample_catalog.aml.Person]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element1#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[sample_catalog.aml.PersonOwnAccount,sample_catalog.aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.b#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabel(label=sample_catalog.aml.Account)
        |       |   +-target_element_table_list=[sample_catalog.aml.Account]
        |       +-head=$element_table.a#1
        |       +-tail=$element_table.b#3
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)

[UNPARSED_SQL]
SELECT
  aml_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (Person | Account))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS Account)
    COLUMNS(
      1 AS a_5
    )
  ) AS aml_1;
