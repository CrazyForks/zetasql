[default show_unparsed]
[default no_show_resolved_ast]
[default language_features=PIPES,PIPE_ASSERT]
# No payload.
FROM KeyValue
|> ASSERT key = 10
--
[UNPARSED_SQL]
SELECT
  assertscan_4.a_1 AS Key,
  assertscan_4.a_2 AS Value
FROM
  (
    SELECT
      keyvalue_3.a_1 AS a_1,
      keyvalue_3.a_2 AS a_2
    FROM
      (
        FROM
          (
            SELECT
              KeyValue.Key AS a_1,
              KeyValue.Value AS a_2
            FROM
              KeyValue
          ) AS keyvalue_3
        |> ASSERT(keyvalue_3.a_1) = 10, "key = 10"
      )
  ) AS assertscan_4;
==

# One payload.
FROM KeyValue
|> ASSERT key = 10, "payload1"
--
[UNPARSED_SQL]
SELECT
  assertscan_4.a_1 AS Key,
  assertscan_4.a_2 AS Value
FROM
  (
    SELECT
      keyvalue_3.a_1 AS a_1,
      keyvalue_3.a_2 AS a_2
    FROM
      (
        FROM
          (
            SELECT
              KeyValue.Key AS a_1,
              KeyValue.Value AS a_2
            FROM
              KeyValue
          ) AS keyvalue_3
        |> ASSERT(keyvalue_3.a_1) = 10, "payload1"
      )
  ) AS assertscan_4;
==

# Multiple payloads.
FROM KeyValue
|> ASSERT key = 10, key, "payload2"
--
[UNPARSED_SQL]
SELECT
  assertscan_4.a_1 AS Key,
  assertscan_4.a_2 AS Value
FROM
  (
    SELECT
      keyvalue_3.a_1 AS a_1,
      keyvalue_3.a_2 AS a_2
    FROM
      (
        FROM
          (
            SELECT
              KeyValue.Key AS a_1,
              KeyValue.Value AS a_2
            FROM
              KeyValue
          ) AS keyvalue_3
        |> ASSERT(keyvalue_3.a_1) = 10, CONCAT(IFNULL(CAST(keyvalue_3.a_1 AS STRING), "NULL"), " ", "payload2")
      )
  ) AS assertscan_4;
==

# Multiple ASSERT operators.
FROM KeyValue
|> ASSERT key = 10, "payload1"
|> ASSERT key = 20, "payload2"
--
[UNPARSED_SQL]
SELECT
  assertscan_5.a_1 AS Key,
  assertscan_5.a_2 AS Value
FROM
  (
    SELECT
      assertscan_4.a_1 AS a_1,
      assertscan_4.a_2 AS a_2
    FROM
      (
        FROM
          (
            SELECT
              assertscan_4.a_1 AS a_1,
              assertscan_4.a_2 AS a_2
            FROM
              (
                SELECT
                  keyvalue_3.a_1 AS a_1,
                  keyvalue_3.a_2 AS a_2
                FROM
                  (
                    FROM
                      (
                        SELECT
                          KeyValue.Key AS a_1,
                          KeyValue.Value AS a_2
                        FROM
                          KeyValue
                      ) AS keyvalue_3
                    |> ASSERT(keyvalue_3.a_1) = 10, "payload1"
                  )
              ) AS assertscan_4
          ) AS assertscan_4
        |> ASSERT(assertscan_4.a_1) = 20, "payload2"
      )
  ) AS assertscan_5;
==

# Nested ASSERT operators.
SELECT * FROM (
  FROM KeyValue
  |> ASSERT key = 10, "payload1"
)
|> ASSERT key = 20, "payload2"
--
[UNPARSED_SQL]
SELECT
  assertscan_6.a_1 AS Key,
  assertscan_6.a_2 AS Value
FROM
  (
    SELECT
      projectscan_5.a_1 AS a_1,
      projectscan_5.a_2 AS a_2
    FROM
      (
        FROM
          (
            SELECT
              assertscan_4.a_1 AS a_1,
              assertscan_4.a_2 AS a_2
            FROM
              (
                SELECT
                  keyvalue_3.a_1 AS a_1,
                  keyvalue_3.a_2 AS a_2
                FROM
                  (
                    FROM
                      (
                        SELECT
                          KeyValue.Key AS a_1,
                          KeyValue.Value AS a_2
                        FROM
                          KeyValue
                      ) AS keyvalue_3
                    |> ASSERT(keyvalue_3.a_1) = 10, "payload1"
                  )
              ) AS assertscan_4
          ) AS projectscan_5
        |> ASSERT(projectscan_5.a_1) = 20, "payload2"
      )
  ) AS assertscan_6;
