[default language_features=PIPES,GROUP_BY_ROLLUP,V_1_4_GROUPING_SETS,V_1_4_GROUPING_BUILTIN,V_1_3_NULLS_FIRST_LAST_IN_ORDER_BY,V_1_2_GROUP_BY_STRUCT]

# Test GROUP BY, with and without AND ORDER, with order suffixes on some items.
from KeyValue
|> aggregate count(*)
   GROUP {{|AND ORDER}} BY
       key,
       value,
       value ASC,
       value DESC,
       value ASC NULLS FIRST,
       value DESC NULLS LAST,
       key+1 ASC,
       key+2
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$groupby.key#4 AS key [INT64]
| +-$groupby.value#5 AS value [STRING]
| +-$groupby.value#5 AS value [STRING]
| +-$groupby.value#5 AS value [STRING]
| +-$groupby.value#5 AS value [STRING]
| +-$groupby.value#5 AS value [STRING]
| +-$groupby.$groupbycol3#6 AS `$groupbycol3` [INT64]
| +-$groupby.$groupbycol4#7 AS `$groupbycol4` [INT64]
| +-$aggregate.$agg1#3 AS `$col1` [INT64]
+-query=
  +-OrderByScan
    +-column_list=[$groupby.key#4, $groupby.value#5, $groupby.value#5, $groupby.value#5, $groupby.value#5, $groupby.value#5, $groupby.$groupbycol3#6, $groupby.$groupbycol4#7, $aggregate.$agg1#3]
    +-is_ordered=TRUE
    +-input_scan=
    | +-AggregateScan
    |   +-column_list=[$groupby.key#4, $groupby.value#5, $groupby.$groupbycol3#6, $groupby.$groupbycol4#7, $aggregate.$agg1#3]
    |   +-input_scan=
    |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    |   +-group_by_list=
    |   | +-key#4 := ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   | +-value#5 := ColumnRef(type=STRING, column=KeyValue.Value#2)
    |   | +-$groupbycol3#6 :=
    |   | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |   | |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   | |   +-Literal(type=INT64, value=1)
    |   | +-$groupbycol4#7 :=
    |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   |     +-Literal(type=INT64, value=2)
    |   +-aggregate_list=
    |     +-$agg1#3 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    +-order_by_item_list=
      +-OrderByItem
      | +-parse_location=162-167
      | +-column_ref=
      |   +-ColumnRef(type=STRING, column=$groupby.value#5)
      +-OrderByItem
      | +-parse_location=180-185
      | +-column_ref=
      | | +-ColumnRef(type=STRING, column=$groupby.value#5)
      | +-is_descending=TRUE
      +-OrderByItem
      | +-parse_location=199-204
      | +-column_ref=
      | | +-ColumnRef(type=STRING, column=$groupby.value#5)
      | +-null_order=NULLS_FIRST
      +-OrderByItem
      | +-parse_location=229-234
      | +-column_ref=
      | | +-ColumnRef(type=STRING, column=$groupby.value#5)
      | +-is_descending=TRUE
      | +-null_order=NULLS_LAST
      +-OrderByItem
        +-parse_location=259-264
        +-column_ref=
          +-ColumnRef(type=INT64, column=$groupby.$groupbycol3#6)
--
ALTERNATION GROUP: AND ORDER
--
QueryStmt
+-output_column_list=
| +-$groupby.key#4 AS key [INT64]
| +-$groupby.value#5 AS value [STRING]
| +-$groupby.value#5 AS value [STRING]
| +-$groupby.value#5 AS value [STRING]
| +-$groupby.value#5 AS value [STRING]
| +-$groupby.value#5 AS value [STRING]
| +-$groupby.$groupbycol3#6 AS `$groupbycol3` [INT64]
| +-$groupby.$groupbycol4#7 AS `$groupbycol4` [INT64]
| +-$aggregate.$agg1#3 AS `$col1` [INT64]
+-query=
  +-OrderByScan
    +-column_list=[$groupby.key#4, $groupby.value#5, $groupby.value#5, $groupby.value#5, $groupby.value#5, $groupby.value#5, $groupby.$groupbycol3#6, $groupby.$groupbycol4#7, $aggregate.$agg1#3]
    +-is_ordered=TRUE
    +-input_scan=
    | +-AggregateScan
    |   +-column_list=[$groupby.key#4, $groupby.value#5, $groupby.$groupbycol3#6, $groupby.$groupbycol4#7, $aggregate.$agg1#3]
    |   +-input_scan=
    |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    |   +-group_by_list=
    |   | +-key#4 := ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   | +-value#5 := ColumnRef(type=STRING, column=KeyValue.Value#2)
    |   | +-$groupbycol3#6 :=
    |   | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |   | |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   | |   +-Literal(type=INT64, value=1)
    |   | +-$groupbycol4#7 :=
    |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   |     +-Literal(type=INT64, value=2)
    |   +-aggregate_list=
    |     +-$agg1#3 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    +-order_by_item_list=
      +-OrderByItem
      | +-parse_location=145-148
      | +-column_ref=
      |   +-ColumnRef(type=INT64, column=$groupby.key#4)
      +-OrderByItem
      | +-parse_location=157-162
      | +-column_ref=
      |   +-ColumnRef(type=STRING, column=$groupby.value#5)
      +-OrderByItem
      | +-parse_location=171-176
      | +-column_ref=
      |   +-ColumnRef(type=STRING, column=$groupby.value#5)
      +-OrderByItem
      | +-parse_location=189-194
      | +-column_ref=
      | | +-ColumnRef(type=STRING, column=$groupby.value#5)
      | +-is_descending=TRUE
      +-OrderByItem
      | +-parse_location=208-213
      | +-column_ref=
      | | +-ColumnRef(type=STRING, column=$groupby.value#5)
      | +-null_order=NULLS_FIRST
      +-OrderByItem
      | +-parse_location=238-243
      | +-column_ref=
      | | +-ColumnRef(type=STRING, column=$groupby.value#5)
      | +-is_descending=TRUE
      | +-null_order=NULLS_LAST
      +-OrderByItem
      | +-parse_location=268-273
      | +-column_ref=
      |   +-ColumnRef(type=INT64, column=$groupby.$groupbycol3#6)
      +-OrderByItem
        +-parse_location=286-291
        +-column_ref=
          +-ColumnRef(type=INT64, column=$groupby.$groupbycol4#7)
==

# GROUP BY with ordering by computed expressions.
FROM KeyValue
|> EXTEND key+1 AS x
|> AGGREGATE COUNT(*)
   GROUP {{|AND ORDER}} BY
      x, x+1, x+2 ASC, x+2 DESC, x+3 DESC NULLS LAST
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$groupby.x#5 AS x [INT64]
| +-$groupby.$groupbycol2#6 AS `$groupbycol2` [INT64]
| +-$groupby.$groupbycol3#7 AS `$groupbycol3` [INT64]
| +-$groupby.$groupbycol4#8 AS `$groupbycol4` [INT64]
| +-$groupby.$groupbycol5#9 AS `$groupbycol5` [INT64]
| +-$aggregate.$agg1#4 AS `$col1` [INT64]
+-query=
  +-OrderByScan
    +-column_list=[$groupby.x#5, $groupby.$groupbycol2#6, $groupby.$groupbycol3#7, $groupby.$groupbycol4#8, $groupby.$groupbycol5#9, $aggregate.$agg1#4]
    +-is_ordered=TRUE
    +-input_scan=
    | +-AggregateScan
    |   +-column_list=[$groupby.x#5, $groupby.$groupbycol2#6, $groupby.$groupbycol3#7, $groupby.$groupbycol4#8, $groupby.$groupbycol5#9, $aggregate.$agg1#4]
    |   +-input_scan=
    |   | +-ProjectScan
    |   |   +-column_list=[KeyValue.Key#1, $pipe_extend.x#3]
    |   |   +-expr_list=
    |   |   | +-x#3 :=
    |   |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |   |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   |   |     +-Literal(type=INT64, value=1)
    |   |   +-input_scan=
    |   |     +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
    |   +-group_by_list=
    |   | +-x#5 := ColumnRef(type=INT64, column=$pipe_extend.x#3)
    |   | +-$groupbycol2#6 :=
    |   | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |   | |   +-ColumnRef(type=INT64, column=$pipe_extend.x#3)
    |   | |   +-Literal(type=INT64, value=1)
    |   | +-$groupbycol3#7 :=
    |   | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |   | |   +-ColumnRef(type=INT64, column=$pipe_extend.x#3)
    |   | |   +-Literal(type=INT64, value=2)
    |   | +-$groupbycol4#8 :=
    |   | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |   | |   +-ColumnRef(type=INT64, column=$pipe_extend.x#3)
    |   | |   +-Literal(type=INT64, value=2)
    |   | +-$groupbycol5#9 :=
    |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |   |     +-ColumnRef(type=INT64, column=$pipe_extend.x#3)
    |   |     +-Literal(type=INT64, value=3)
    |   +-aggregate_list=
    |     +-$agg1#4 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    +-order_by_item_list=
      +-OrderByItem
      | +-parse_location=84-87
      | +-column_ref=
      |   +-ColumnRef(type=INT64, column=$groupby.$groupbycol3#7)
      +-OrderByItem
      | +-parse_location=93-96
      | +-column_ref=
      | | +-ColumnRef(type=INT64, column=$groupby.$groupbycol4#8)
      | +-is_descending=TRUE
      +-OrderByItem
        +-parse_location=103-106
        +-column_ref=
        | +-ColumnRef(type=INT64, column=$groupby.$groupbycol5#9)
        +-is_descending=TRUE
        +-null_order=NULLS_LAST
--
ALTERNATION GROUP: AND ORDER
--
QueryStmt
+-output_column_list=
| +-$groupby.x#5 AS x [INT64]
| +-$groupby.$groupbycol2#6 AS `$groupbycol2` [INT64]
| +-$groupby.$groupbycol3#7 AS `$groupbycol3` [INT64]
| +-$groupby.$groupbycol4#8 AS `$groupbycol4` [INT64]
| +-$groupby.$groupbycol5#9 AS `$groupbycol5` [INT64]
| +-$aggregate.$agg1#4 AS `$col1` [INT64]
+-query=
  +-OrderByScan
    +-column_list=[$groupby.x#5, $groupby.$groupbycol2#6, $groupby.$groupbycol3#7, $groupby.$groupbycol4#8, $groupby.$groupbycol5#9, $aggregate.$agg1#4]
    +-is_ordered=TRUE
    +-input_scan=
    | +-AggregateScan
    |   +-column_list=[$groupby.x#5, $groupby.$groupbycol2#6, $groupby.$groupbycol3#7, $groupby.$groupbycol4#8, $groupby.$groupbycol5#9, $aggregate.$agg1#4]
    |   +-input_scan=
    |   | +-ProjectScan
    |   |   +-column_list=[KeyValue.Key#1, $pipe_extend.x#3]
    |   |   +-expr_list=
    |   |   | +-x#3 :=
    |   |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |   |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   |   |     +-Literal(type=INT64, value=1)
    |   |   +-input_scan=
    |   |     +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
    |   +-group_by_list=
    |   | +-x#5 := ColumnRef(type=INT64, column=$pipe_extend.x#3)
    |   | +-$groupbycol2#6 :=
    |   | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |   | |   +-ColumnRef(type=INT64, column=$pipe_extend.x#3)
    |   | |   +-Literal(type=INT64, value=1)
    |   | +-$groupbycol3#7 :=
    |   | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |   | |   +-ColumnRef(type=INT64, column=$pipe_extend.x#3)
    |   | |   +-Literal(type=INT64, value=2)
    |   | +-$groupbycol4#8 :=
    |   | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |   | |   +-ColumnRef(type=INT64, column=$pipe_extend.x#3)
    |   | |   +-Literal(type=INT64, value=2)
    |   | +-$groupbycol5#9 :=
    |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |   |     +-ColumnRef(type=INT64, column=$pipe_extend.x#3)
    |   |     +-Literal(type=INT64, value=3)
    |   +-aggregate_list=
    |     +-$agg1#4 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    +-order_by_item_list=
      +-OrderByItem
      | +-parse_location=85-86
      | +-column_ref=
      |   +-ColumnRef(type=INT64, column=$groupby.x#5)
      +-OrderByItem
      | +-parse_location=88-91
      | +-column_ref=
      |   +-ColumnRef(type=INT64, column=$groupby.$groupbycol2#6)
      +-OrderByItem
      | +-parse_location=93-96
      | +-column_ref=
      |   +-ColumnRef(type=INT64, column=$groupby.$groupbycol3#7)
      +-OrderByItem
      | +-parse_location=102-105
      | +-column_ref=
      | | +-ColumnRef(type=INT64, column=$groupby.$groupbycol4#8)
      | +-is_descending=TRUE
      +-OrderByItem
        +-parse_location=112-115
        +-column_ref=
        | +-ColumnRef(type=INT64, column=$groupby.$groupbycol5#9)
        +-is_descending=TRUE
        +-null_order=NULLS_LAST
==

# NULLS FIRST/LAST are allowed without ASC/DESC only with GROUP AND ORDER BY.
from KeyValue
|> aggregate count(*)
   GROUP {{|AND ORDER}} BY key {{NULLS FIRST|NULLS LAST}}
--
ALTERNATION GROUP: NULLS FIRST
--
ERROR: GROUP BY items cannot have NULLS FIRST/LAST without ASC/DESC except when using GROUP AND ORDER BY [at 3:18]
   GROUP  BY key NULLS FIRST
                 ^
--
ALTERNATION GROUP: NULLS LAST
--
ERROR: GROUP BY items cannot have NULLS FIRST/LAST without ASC/DESC except when using GROUP AND ORDER BY [at 3:18]
   GROUP  BY key NULLS LAST
                 ^
--
ALTERNATION GROUP: AND ORDER,NULLS FIRST
--
QueryStmt
+-output_column_list=
| +-$groupby.key#4 AS key [INT64]
| +-$aggregate.$agg1#3 AS `$col1` [INT64]
+-query=
  +-OrderByScan
    +-column_list=[$groupby.key#4, $aggregate.$agg1#3]
    +-is_ordered=TRUE
    +-input_scan=
    | +-AggregateScan
    |   +-column_list=[$groupby.key#4, $aggregate.$agg1#3]
    |   +-input_scan=
    |   | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
    |   +-group_by_list=
    |   | +-key#4 := ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   +-aggregate_list=
    |     +-$agg1#3 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    +-order_by_item_list=
      +-OrderByItem
        +-parse_location=58-61
        +-column_ref=
        | +-ColumnRef(type=INT64, column=$groupby.key#4)
        +-null_order=NULLS_FIRST
--
ALTERNATION GROUP: AND ORDER,NULLS LAST
--
QueryStmt
+-output_column_list=
| +-$groupby.key#4 AS key [INT64]
| +-$aggregate.$agg1#3 AS `$col1` [INT64]
+-query=
  +-OrderByScan
    +-column_list=[$groupby.key#4, $aggregate.$agg1#3]
    +-is_ordered=TRUE
    +-input_scan=
    | +-AggregateScan
    |   +-column_list=[$groupby.key#4, $aggregate.$agg1#3]
    |   +-input_scan=
    |   | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
    |   +-group_by_list=
    |   | +-key#4 := ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   +-aggregate_list=
    |     +-$agg1#3 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    +-order_by_item_list=
      +-OrderByItem
        +-parse_location=58-61
        +-column_ref=
        | +-ColumnRef(type=INT64, column=$groupby.key#4)
        +-null_order=NULLS_LAST
==

# STRUCTs are groupable but not orderable.
select STRUCT(123 AS x) str
|> AGGREGATE COUNT(*)
   GROUP BY str, str ASC
--
ERROR: ORDER BY does not support expressions of type STRUCT<x INT64> [at 3:18]
   GROUP BY str, str ASC
                 ^
==

select STRUCT(123 AS x) str
|> AGGREGATE COUNT(*)
   GROUP AND ORDER BY str
--
ERROR: ORDER BY does not support expressions of type STRUCT<x INT64> [at 3:23]
   GROUP AND ORDER BY str
                      ^
==

# Order suffixes are disallowed on all non-expression grouping items.
FROM KeyValue
|> AGGREGATE count(*)
   GROUP BY {{ALL|()|ROLLUP(key)|CUBE(key)|GROUPING SETS(key)}} ASC
--
ALTERNATION GROUP: ALL
--
ERROR: Syntax error: Unexpected keyword ALL [at 3:13]
   GROUP BY ALL ASC
            ^
--
ALTERNATION GROUP: ()
--
ERROR: Syntax error: Expected end of input but got keyword ASC [at 3:16]
   GROUP BY () ASC
               ^
--
ALTERNATION GROUP: ROLLUP(key)
--
ERROR: Syntax error: Expected end of input but got keyword ASC [at 3:25]
   GROUP BY ROLLUP(key) ASC
                        ^
--
ALTERNATION GROUP: CUBE(key)
--
ERROR: Syntax error: Expected end of input but got keyword ASC [at 3:23]
   GROUP BY CUBE(key) ASC
                      ^
--
ALTERNATION GROUP: GROUPING SETS(key)
--
ERROR: Syntax error: Expected end of input but got keyword ASC [at 3:32]
   GROUP BY GROUPING SETS(key) ASC
                               ^
==

# AND ORDER BY is disallowed on all non-expression grouping items.
FROM KeyValue
|> AGGREGATE count(*)
   GROUP AND ORDER BY {{ALL|()|ROLLUP(key)|CUBE(key)|GROUPING SETS(key)}}
--
ALTERNATION GROUP: ALL
--
ERROR: Syntax error: Unexpected keyword ALL [at 3:23]
   GROUP AND ORDER BY ALL
                      ^
--
ALTERNATION GROUP: ()
--
ERROR: GROUP AND ORDER BY cannot be used with GROUP BY () [at 3:23]
   GROUP AND ORDER BY ()
                      ^
--
ALTERNATION GROUP: ROLLUP(key)
--
ERROR: GROUP AND ORDER BY cannot be used with ROLLUP [at 3:23]
   GROUP AND ORDER BY ROLLUP(key)
                      ^
--
ALTERNATION GROUP: CUBE(key)
--
ERROR: GROUP AND ORDER BY cannot be used with CUBE [at 3:23]
   GROUP AND ORDER BY CUBE(key)
                      ^
--
ALTERNATION GROUP: GROUPING SETS(key)
--
ERROR: GROUP AND ORDER BY cannot be used with GROUPING SETS [at 3:23]
   GROUP AND ORDER BY GROUPING SETS(key)
                      ^
==

# Test order modifiers attached to standard GROUP BY syntax.
# With PIPES disabled, the parser rejects these.
# With PIPES enabled, they parse, but the analyzer rejects them.
select COUNT(*)
from KeyValue
GROUP {{|AND ORDER}} BY
   key{{| ASC| DESC| ASC NULLS FIRST| DESC NULLS LAST| NULLS FIRST}}
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#3 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#3]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#3]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-group_by_list=
        | +-key#4 := ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-aggregate_list=
          +-$agg1#3 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
--
ALTERNATION GROUP:  ASC
--
ERROR: GROUP BY does not support order specification outside pipe AGGREGATE [at 4:8]
   key ASC
       ^
--
ALTERNATION GROUP:  DESC
--
ERROR: GROUP BY does not support order specification outside pipe AGGREGATE [at 4:8]
   key DESC
       ^
--
ALTERNATION GROUP:  ASC NULLS FIRST
--
ERROR: GROUP BY does not support order specification outside pipe AGGREGATE [at 4:8]
   key ASC NULLS FIRST
       ^
--
ALTERNATION GROUP:  DESC NULLS LAST
--
ERROR: GROUP BY does not support order specification outside pipe AGGREGATE [at 4:8]
   key DESC NULLS LAST
       ^
--
ALTERNATION GROUP:  NULLS FIRST
--
ERROR: GROUP BY does not support order specification outside pipe AGGREGATE [at 4:8]
   key NULLS FIRST
       ^
--
ALTERNATION GROUPS:
    AND ORDER,
    AND ORDER, ASC
    AND ORDER, DESC
    AND ORDER, ASC NULLS FIRST
    AND ORDER, DESC NULLS LAST
    AND ORDER, NULLS FIRST
--
ERROR: GROUP AND ORDER BY is not supported outside pipe AGGREGATE [at 3:1]
GROUP AND ORDER BY
^
==

select COUNT(*)
from KeyValue
GROUP AND ORDER BY {{key|()|ALL|ROLLUP(key)}}
--
ALTERNATION GROUP: key
--
ERROR: GROUP AND ORDER BY is not supported outside pipe AGGREGATE [at 3:1]
GROUP AND ORDER BY key
^
--
ALTERNATION GROUP: ()
--
ERROR: GROUP AND ORDER BY is not supported outside pipe AGGREGATE [at 3:1]
GROUP AND ORDER BY ()
^
--
ALTERNATION GROUP: ALL
--
ERROR: GROUP AND ORDER BY is not supported outside pipe AGGREGATE [at 3:1]
GROUP AND ORDER BY ALL
^
--
ALTERNATION GROUP: ROLLUP(key)
--
ERROR: GROUP AND ORDER BY is not supported outside pipe AGGREGATE [at 3:1]
GROUP AND ORDER BY ROLLUP(key)
^
==

# GROUP BY in AGGREGATE doesn't currently support ordinals.  If that gets added,
# we need to test GROUP AND ORDER BY also works correctly with ordinals.
from KeyValue
|> aggregate count(*)
   GROUP AND ORDER BY key,{{2|7}}
--
ALTERNATION GROUP: 2
--
ERROR: GROUP BY ordinal not allowed in pipe AGGREGATE [at 3:27]
   GROUP AND ORDER BY key,2
                          ^
--
ALTERNATION GROUP: 7
--
ERROR: GROUP BY ordinal not allowed in pipe AGGREGATE [at 3:27]
   GROUP AND ORDER BY key,7
                          ^
==

# Ordering suffixes on the aggregate list.
from KeyValue
|> aggregate count(key) ASC,
             count(key+1) DESC,
             1+count(key) ASC NULLS FIRST,
             sum(key) DESC NULLS LAST,
             count(value)
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#3 AS `$col1` [INT64]
| +-$aggregate.$agg2#4 AS `$col2` [INT64]
| +-$aggregate.$col3#8 AS `$col3` [INT64]
| +-$aggregate.$agg4#6 AS `$col4` [INT64]
| +-$aggregate.$agg5#7 AS `$col5` [INT64]
+-query=
  +-OrderByScan
    +-column_list=$aggregate.[$agg1#3, $agg2#4, $col3#8, $agg4#6, $agg5#7]
    +-is_ordered=TRUE
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=$aggregate.[$agg1#3, $agg2#4, $col3#8, $agg4#6, $agg5#7]
    |   +-expr_list=
    |   | +-$col3#8 :=
    |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |   |     +-Literal(type=INT64, value=1)
    |   |     +-ColumnRef(type=INT64, column=$aggregate.$agg3#5)
    |   +-input_scan=
    |     +-AggregateScan
    |       +-column_list=$aggregate.[$agg1#3, $agg2#4, $agg3#5, $agg4#6, $agg5#7]
    |       +-input_scan=
    |       | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    |       +-aggregate_list=
    |         +-$agg1#3 :=
    |         | +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
    |         |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |         +-$agg2#4 :=
    |         | +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
    |         |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |         |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |         |     +-Literal(type=INT64, value=1)
    |         +-$agg3#5 :=
    |         | +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
    |         |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |         +-$agg4#6 :=
    |         | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
    |         |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |         +-$agg5#7 :=
    |           +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
    |             +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    +-order_by_item_list=
      +-OrderByItem
      | +-parse_location=27-37
      | +-column_ref=
      |   +-ColumnRef(type=INT64, column=$aggregate.$agg1#3)
      +-OrderByItem
      | +-parse_location=56-68
      | +-column_ref=
      | | +-ColumnRef(type=INT64, column=$aggregate.$agg2#4)
      | +-is_descending=TRUE
      +-OrderByItem
      | +-parse_location=88-100
      | +-column_ref=
      | | +-ColumnRef(type=INT64, column=$aggregate.$col3#8)
      | +-null_order=NULLS_FIRST
      +-OrderByItem
        +-parse_location=131-139
        +-column_ref=
        | +-ColumnRef(type=INT64, column=$aggregate.$agg4#6)
        +-is_descending=TRUE
        +-null_order=NULLS_LAST
==

# Ordering suffix in aggregate list combined with GROUP BY.
# When GROUP AND ORDER BY is present, the ordering for aggregate columns
# is still present but won't affect the result because the grouping
# columns already produce a unique order.
from MultipleColumns
|> aggregate count(string_b) ASC, count(int_d), count(*) DESC
   GROUP {{|AND ORDER}} BY int_a, string_b DESC
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$groupby.int_a#10 AS int_a [INT64]
| +-$groupby.string_b#11 AS string_b [STRING]
| +-$aggregate.$agg1#7 AS `$col1` [INT64]
| +-$aggregate.$agg2#8 AS `$col2` [INT64]
| +-$aggregate.$agg3#9 AS `$col3` [INT64]
+-query=
  +-OrderByScan
    +-column_list=[$groupby.int_a#10, $groupby.string_b#11, $aggregate.$agg1#7, $aggregate.$agg2#8, $aggregate.$agg3#9]
    +-is_ordered=TRUE
    +-input_scan=
    | +-AggregateScan
    |   +-column_list=[$groupby.int_a#10, $groupby.string_b#11, $aggregate.$agg1#7, $aggregate.$agg2#8, $aggregate.$agg3#9]
    |   +-input_scan=
    |   | +-TableScan(column_list=MultipleColumns.[int_a#1, string_b#4, int_d#6], table=MultipleColumns, column_index_list=[0, 3, 5])
    |   +-group_by_list=
    |   | +-int_a#10 := ColumnRef(type=INT64, column=MultipleColumns.int_a#1)
    |   | +-string_b#11 := ColumnRef(type=STRING, column=MultipleColumns.string_b#4)
    |   +-aggregate_list=
    |     +-$agg1#7 :=
    |     | +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
    |     |   +-ColumnRef(type=STRING, column=MultipleColumns.string_b#4)
    |     +-$agg2#8 :=
    |     | +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
    |     |   +-ColumnRef(type=INT64, column=MultipleColumns.int_d#6)
    |     +-$agg3#9 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    +-order_by_item_list=
      +-OrderByItem
      | +-parse_location=103-111
      | +-column_ref=
      | | +-ColumnRef(type=STRING, column=$groupby.string_b#11)
      | +-is_descending=TRUE
      +-OrderByItem
      | +-parse_location=34-49
      | +-column_ref=
      |   +-ColumnRef(type=INT64, column=$aggregate.$agg1#7)
      +-OrderByItem
        +-parse_location=69-77
        +-column_ref=
        | +-ColumnRef(type=INT64, column=$aggregate.$agg3#9)
        +-is_descending=TRUE
--
ALTERNATION GROUP: AND ORDER
--
QueryStmt
+-output_column_list=
| +-$groupby.int_a#10 AS int_a [INT64]
| +-$groupby.string_b#11 AS string_b [STRING]
| +-$aggregate.$agg1#7 AS `$col1` [INT64]
| +-$aggregate.$agg2#8 AS `$col2` [INT64]
| +-$aggregate.$agg3#9 AS `$col3` [INT64]
+-query=
  +-OrderByScan
    +-column_list=[$groupby.int_a#10, $groupby.string_b#11, $aggregate.$agg1#7, $aggregate.$agg2#8, $aggregate.$agg3#9]
    +-is_ordered=TRUE
    +-input_scan=
    | +-AggregateScan
    |   +-column_list=[$groupby.int_a#10, $groupby.string_b#11, $aggregate.$agg1#7, $aggregate.$agg2#8, $aggregate.$agg3#9]
    |   +-input_scan=
    |   | +-TableScan(column_list=MultipleColumns.[int_a#1, string_b#4, int_d#6], table=MultipleColumns, column_index_list=[0, 3, 5])
    |   +-group_by_list=
    |   | +-int_a#10 := ColumnRef(type=INT64, column=MultipleColumns.int_a#1)
    |   | +-string_b#11 := ColumnRef(type=STRING, column=MultipleColumns.string_b#4)
    |   +-aggregate_list=
    |     +-$agg1#7 :=
    |     | +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
    |     |   +-ColumnRef(type=STRING, column=MultipleColumns.string_b#4)
    |     +-$agg2#8 :=
    |     | +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
    |     |   +-ColumnRef(type=INT64, column=MultipleColumns.int_d#6)
    |     +-$agg3#9 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    +-order_by_item_list=
      +-OrderByItem
      | +-parse_location=105-110
      | +-column_ref=
      |   +-ColumnRef(type=INT64, column=$groupby.int_a#10)
      +-OrderByItem
      | +-parse_location=112-120
      | +-column_ref=
      | | +-ColumnRef(type=STRING, column=$groupby.string_b#11)
      | +-is_descending=TRUE
      +-OrderByItem
      | +-parse_location=34-49
      | +-column_ref=
      |   +-ColumnRef(type=INT64, column=$aggregate.$agg1#7)
      +-OrderByItem
        +-parse_location=69-77
        +-column_ref=
        | +-ColumnRef(type=INT64, column=$aggregate.$agg3#9)
        +-is_descending=TRUE
==

# Using ordering suffix on an unorderable column type in the aggregate list.
select 123 key, STRUCT(123 AS x) str
|> AGGREGATE ANY_VALUE(str) ASC
   {{GROUP BY key|GROUP BY KEY asc}}
--
ERROR: ORDER BY does not support expressions of type STRUCT<x INT64> [at 2:14]
|> AGGREGATE ANY_VALUE(str) ASC
             ^
