[default required_features=AGGREGATE_FILTERING,ANALYTIC_FUNCTIONS]

[prepare_database]
CREATE TABLE Employees AS
  SELECT * FROM UNNEST([
    STRUCT(1 AS emp_id, 101 AS dept_id, 45 AS age, 200000 AS salary, "Manager" AS job, 1 AS status_code),
    STRUCT(2 AS emp_id, 102 AS dept_id, 42 AS age, 180000 AS salary, "Manager" AS job, NULL AS status_code),
    STRUCT(3 AS emp_id, 101 AS dept_id, 28 AS age, 150000 AS salary, "Manager" AS job, 2 AS status_code),
    STRUCT(4 AS emp_id, 102 AS dept_id, 25 AS age, 80000 AS salary,  "Analyst" AS job, 1 AS status_code),
    STRUCT(5 AS emp_id, 101 AS dept_id, 29 AS age, 70000 AS salary,  "Analyst" AS job, 2 AS status_code),
    STRUCT(6 AS emp_id, 102 AS dept_id, 37 AS age, 80000 AS salary,  "Analyst" AS job, NULL AS status_code)
  ]);
--
ARRAY<STRUCT<emp_id INT64,
             dept_id INT64,
             age INT64,
             salary INT64,
             job STRING,
             status_code INT64>>
[
  {2, 102, 42, 180000, "Manager", NULL},
  {4, 102, 25, 80000, "Analyst", 1},
  {6, 102, 37, 80000, "Analyst", NULL},
  {1, 101, 45, 200000, "Manager", 1},
  {3, 101, 28, 150000, "Manager", 2},
  {5, 101, 29, 70000, "Analyst", 2}
]
==

# Filter is additional on top of the shared WHERE clause
[name=simple_filter]
SELECT
  dept_id, emp_id,
  SUM(salary) OVER(PARTITION BY dept_id ORDER BY emp_id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS unfiltered,
  SUM(salary WHERE job = "Manager") OVER(PARTITION BY dept_id ORDER BY emp_id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS arr,
FROM Employees
WHERE age < 40
--
ARRAY<STRUCT<dept_id INT64, emp_id INT64, unfiltered INT64, arr INT64>>[unknown order:
  {101, 3, 150000, 150000},
  {101, 5, 220000, 150000},
  {102, 4, 80000, NULL},
  {102, 6, 160000, NULL}
]
