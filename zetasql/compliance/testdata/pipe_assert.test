[prepare_database]
CREATE TABLE KeyValue
AS
SELECT 1 AS key, "value1" AS value
UNION ALL
SELECT 2, "value2"
--
ARRAY<STRUCT<key INT64, value STRING>>[{1, "value1"}, {2, "value2"}]
==

[default required_features=PIPES,PIPE_ASSERT]
[name=assertion_succeeded_with_no_payload_result_order_is_unknown]
FROM UNNEST([1, 1, 1]) AS x
|> ASSERT x >= 1
--
ARRAY<INT64>[unknown order:1, 1, 1]
==

[name=assertion_succeeded_with_no_payload]
FROM UNNEST([1, 2, 3]) AS x
|> ASSERT x >= 1
|> ORDER BY x
--
ARRAY<INT64>[known order:1, 2, 3]
==

[name=assertion_failed_with_no_payload]
FROM UNNEST([1, 2, 3]) AS x
|> ASSERT x >= 2
--
ERROR: generic::out_of_range: Assert failed: x >= 2
==

[name=assert_condition_itself_errors]
FROM UNNEST([0, 1]) AS x
|> ASSERT 1 / 0 > 0
--
ERROR: generic::out_of_range: division by zero: 1 / 0
==

[name=assertion_succeeded_with_one_payload]
FROM KeyValue
|> ASSERT key >= 1, value
|> ORDER BY key
--
ARRAY<STRUCT<key INT64, value STRING>>[known order:
  {1, "value1"},
  {2, "value2"}
]
==

[name=assertion_failed_with_one_payload]
FROM UNNEST([1, 2, 3]) AS x
|> ASSERT x > 2, "This is a payload"
--
ERROR: generic::out_of_range: Assert failed: This is a payload
==

[name=assertion_succeeded_with_multiple_payloads]
FROM KeyValue
|> ASSERT key > 0, value, ERROR("This should not trigger")
|> ORDER BY key
--
ARRAY<STRUCT<key INT64, value STRING>>[known order:
  {1, "value1"},
  {2, "value2"}
]
==

[name=assertion_failed_with_multiple_payloads]
FROM KeyValue
|> ASSERT FALSE, value, "some random payload"
--
ERROR: generic::out_of_range: Assert failed: value2 some random payload
==

[name=assertion_failed_with_general_expressions_as_payloads]
FROM UNNEST([1, 2, 3]) AS x
|> ASSERT x > 1, 1 + 1 * 2, STRUCT(1 AS a, 2 AS b).a
--
ERROR: generic::out_of_range: Assert failed: 3 1
==

[name=assertion_failed_error_as_payload]
FROM UNNEST([1, 2, 3]) AS x
|> ASSERT x > 2, ERROR("An additional error is triggered")
--
ERROR: generic::out_of_range: An additional error is triggered
==

[name=assertion_failed_payload_evaluation_errors]
FROM UNNEST([0, 1]) AS x
|> ASSERT x > 2, CAST(1 / 0 AS STRING)
--
ERROR: generic::out_of_range: division by zero: 1 / 0
==

[name=assertion_failed_error_as_payload_with_additional_payloads]
FROM UNNEST([1, 2, 3]) AS x
|> ASSERT x > 2, "payload1", ERROR("An additional error is triggered"), "payload2"
--
ERROR: generic::out_of_range: An additional error is triggered
==

[name=assertion_failed_null_payload]
FROM UNNEST([1, 2, 3]) AS x
|> ASSERT FALSE, NULL, NULL, NULL
--
ERROR: generic::out_of_range: Assert failed: NULL NULL NULL
==

[name=assertion_failed_null_payload_different_types]
FROM UNNEST([1, 2, 3]) AS x
|> ASSERT FALSE, CAST(NULL AS INT64), CAST(NULL AS DOUBLE), CAST(NULL AS BYTES)
--
ERROR: generic::out_of_range: Assert failed: NULL NULL NULL
==

[name=assertion_failed_mixed_null_and_non_null_payloads]
SELECT 1 AS x, NULL AS y, CAST(NULL AS DOUBLE) AS z
|> ASSERT false, x, y, z, 'xyz'
--
ERROR: generic::out_of_range: Assert failed: 1 NULL NULL xyz
==

[name=assertion_failed_null_condition]
FROM UNNEST([1, 2, 3]) AS x
|> ASSERT NULL
--
ERROR: generic::out_of_range: Assert failed: NULL
==

[name=assertion_failed_null_condition_with_payload]
FROM UNNEST([1, 2, 3]) AS x
|> ASSERT NULL, "some random payload"
--
ERROR: generic::out_of_range: Assert failed: some random payload
==

[name=empty_scan_do_not_fail_assert]
FROM UNNEST([]) AS X
|> ASSERT x > 1
--
ARRAY<INT64>[]
==

[name=empty_scan_do_not_fail_assert_with_payload]
FROM KeyValue
|> WHERE FALSE
|> ASSERT FALSE, "some random payload"
--
ARRAY<STRUCT<key INT64, value STRING>>[]
==

[name=no_filter_push_down_assert_failed]
FROM UNNEST([1, 2, 3]) AS x
|> ASSERT x > 1
|> WHERE x > 1
--
ERROR: generic::out_of_range: Assert failed: x > 1
==

[name=no_filter_push_down_assert_succeeded]
FROM UNNEST([1, 2, 3]) AS x
|> WHERE x > 1
|> ASSERT x > 1
|> ORDER BY x
--
ARRAY<INT64>[known order:2, 3]
==

[name=correlated_subquery_as_assert_input]
SELECT (
  FROM UNNEST([1, 2, 3]) AS x
  |> WHERE x > key
  |> ASSERT x > 1
  |> AGGREGATE COUNT(*)
)
FROM KeyValue
ORDER BY key
--
ARRAY<STRUCT<INT64>>[known order:{2}, {1}]
==

[name=correlated_column_in_assert_condition_assert_succeeded]
SELECT (
  FROM UNNEST([3, 4]) AS x
  |> ASSERT x > key, "payload"
  |> AGGREGATE COUNT(*)
)
FROM KeyValue
--
ARRAY<STRUCT<INT64>>[unknown order:{2}, {2}]
==

[name=correlated_column_in_assert_assert_failed]
SELECT (
  FROM UNNEST([1, 2, 3]) AS x
  |> ASSERT x >= key, "key =", key, ", x =", x
  |> AGGREGATE COUNT(*)
)
FROM KeyValue
--
ERROR: generic::out_of_range: Assert failed: key = 2 , x = 1
==

[name=ok_for_the_whole_assert_to_be_optimized_away]
SELECT (
  FROM UNNEST([1, 2, 3]) AS x
  |> ASSERT FALSE
  |> AGGREGATE COUNT(*)
)
FROM KeyValue
WHERE FALSE
--
ARRAY<STRUCT<INT64>>[]
