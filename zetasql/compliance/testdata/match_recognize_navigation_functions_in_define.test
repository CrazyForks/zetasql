[default reserve_match_recognize]
[default required_features=MATCH_RECOGNIZE,ANALYTIC_FUNCTIONS]
[prepare_database]

# X is always decreasing, Y is always increasing to make it easier to test
# cases like around the edges of the window.
CREATE TABLE t1 AS
  SELECT * FROM UNNEST([
    STRUCT(1 AS rowid,  20 AS x,  1 AS y, 1 AS z),
    STRUCT(2 AS rowid,  19 AS x,  2 AS y, 1 AS z),
    STRUCT(3 AS rowid,  18 AS x,  3 AS y, 1 AS z),
    STRUCT(4 AS rowid,  17 AS x,  4 AS y, 1 AS z),
    STRUCT(5 AS rowid,  16 AS x,  5 AS y, 1 AS z),
    STRUCT(6 AS rowid,  15 AS x,  6 AS y, 1 AS z),
    STRUCT(7 AS rowid,  14 AS x,  7 AS y, 1 AS z),
    STRUCT(8 AS rowid,  13 AS x,  8 AS y, 1 AS z),
    STRUCT(9 AS rowid,  12 AS x,  9 AS y, 2 AS z),
    STRUCT(10 AS rowid, 11 AS x, 10 AS y, 2 AS z),
    STRUCT(11 AS rowid, 10 AS x, 11 AS y, 2 AS z),
    STRUCT(12 AS rowid,  9 AS x, 12 AS y, 2 AS z),
    STRUCT(13 AS rowid,  8 AS x, 13 AS y, 2 AS z),
    STRUCT(14 AS rowid,  7 AS x, 14 AS y, 2 AS z),
    STRUCT(15 AS rowid,  6 AS x, 15 AS y, 2 AS z),
    STRUCT(16 AS rowid,  5 AS x, 16 AS y, 2 AS z)
    ]);
--
ARRAY<STRUCT<rowid INT64, x INT64, y INT64, z INT64>>[
  {2, 19, 2, 1},
  {4, 17, 4, 1},
  {6, 15, 6, 1},
  {8, 13, 8, 1},
  {10, 11, 10, 2},
  {12, 9, 12, 2},
  {14, 7, 14, 2},
  {16, 5, 16, 2},
  {1, 20, 1, 1},
  {3, 18, 3, 1},
  {5, 16, 5, 1},
  {7, 14, 7, 1},
  {9, 12, 9, 2},
  {11, 10, 11, 2},
  {13, 8, 13, 2},
  {15, 6, 15, 2}
]
==

# Using the regularity of X and Y, and the preferment of pattern alternations to
# indicate how lead and lag operate at the edge of the window.
# Because `a` is the leftmost the alternation in the pattern, it is preferred
# when available.
# This test thus asserts that each match corresponds to an input row, and that
# the first and last row won't produce matches. The 2nd and 2nd to last will
# only qualify through "b", and all others will easily qualify through "a" as
# they satisfy both.
[name=prev_and_next]
SELECT * FROM t1 MATCH_RECOGNIZE(
  ORDER BY rowid
  MEASURES min(rowid) AS rowid, any_value(classifier()) AS label
  PATTERN (a | b)
  DEFINE
    a AS prev(x, 2) > next(x, 2),
    b AS prev(x) > next(x)
)
ORDER BY rowid
--
ARRAY<STRUCT<rowid INT64, label STRING>>[known order:
  {2, "b"},
  {3, "a"},
  {4, "a"},
  {5, "a"},
  {6, "a"},
  {7, "a"},
  {8, "a"},
  {9, "a"},
  {10, "a"},
  {11, "a"},
  {12, "a"},
  {13, "a"},
  {14, "a"},
  {15, "b"}
]
==

# Same as above, but with a PARTITION BY clause.
[name=prev_and_next_with_partitions]
SELECT * FROM t1 MATCH_RECOGNIZE(
  PARTITION BY z
  ORDER BY rowid
  MEASURES min(rowid) AS rowid, any_value(classifier()) AS label
  PATTERN (a | b)
  DEFINE
    a AS prev(x, 2) > next(x, 2),
    b AS prev(x) > next(x)
)
ORDER BY rowid
--
ARRAY<STRUCT<z INT64, rowid INT64, label STRING>>[known order:
  {1, 2, "b"},
  {1, 3, "a"},
  {1, 4, "a"},
  {1, 5, "a"},
  {1, 6, "a"},
  {1, 7, "b"},
  {2, 10, "b"},
  {2, 11, "a"},
  {2, 12, "a"},
  {2, 13, "a"},
  {2, 14, "a"},
  {2, 15, "b"}
]
==

[name=prev_with_negative_offset]
SELECT * FROM t1 MATCH_RECOGNIZE(
  PARTITION BY z
  ORDER BY rowid
  MEASURES min(rowid) AS rowid, any_value(classifier()) AS label
  PATTERN (a)
  DEFINE
    a AS prev(x, -1) > x
)
ORDER BY rowid
--
ERROR: generic::out_of_range: The offset to the function LAG must not be negative
==

[name=next_with_negative_offset]
SELECT * FROM t1 MATCH_RECOGNIZE(
  PARTITION BY z
  ORDER BY rowid
  MEASURES min(rowid) AS rowid, any_value(classifier()) AS label
  PATTERN (a)
  DEFINE
    a AS next(x, -1) > x
)
ORDER BY rowid
--
ERROR: generic::out_of_range: The offset to the function LEAD must not be negative
==

[name=prev_with_null_offset]
[parameters=NULL AS p]
SELECT * FROM t1 MATCH_RECOGNIZE(
  PARTITION BY z
  ORDER BY rowid
  MEASURES min(rowid) AS rowid, any_value(classifier()) AS label
  PATTERN (a)
  DEFINE
    a AS prev(x, @p) > x
)
ORDER BY rowid
--
ERROR: generic::out_of_range: The offset to the function LAG must not be null
==

[name=next_with_null_offset]
[parameters=NULL AS p]
SELECT * FROM t1 MATCH_RECOGNIZE(
  PARTITION BY z
  ORDER BY rowid
  MEASURES min(rowid) AS rowid, any_value(classifier()) AS label
  PATTERN (a)
  DEFINE
    a AS next(x, @p) > x
)
ORDER BY rowid
--
ERROR: generic::out_of_range: The offset to the function LEAD must not be null
==

[name=prev_and_next_with_zero_offset_are_noop]
SELECT * FROM t1 MATCH_RECOGNIZE(
  PARTITION BY z
  ORDER BY rowid
  MEASURES min(rowid) AS rowid, any_value(classifier()) AS label
  PATTERN (a)
  DEFINE
    a AS prev(x, 0) = x AND next(x, 0) = x
)
ORDER BY rowid
--
ARRAY<STRUCT<z INT64, rowid INT64, label STRING>>[known order:
  {1, 1, "a"},
  {1, 2, "a"},
  {1, 3, "a"},
  {1, 4, "a"},
  {1, 5, "a"},
  {1, 6, "a"},
  {1, 7, "a"},
  {1, 8, "a"},
  {2, 9, "a"},
  {2, 10, "a"},
  {2, 11, "a"},
  {2, 12, "a"},
  {2, 13, "a"},
  {2, 14, "a"},
  {2, 15, "a"},
  {2, 16, "a"}
]
