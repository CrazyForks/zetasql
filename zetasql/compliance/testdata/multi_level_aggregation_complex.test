[prepare_database]
CREATE TABLE SimpleTypes AS
  SELECT * FROM UNNEST([
    STRUCT(
      1 AS row_id,
      CAST(1000 AS INT32) AS int32, CAST(2000 AS INT64) AS int64,
      CAST(3000 AS UINT32) AS uint32, CAST(4000 AS UINT64) AS uint64,
      CAST(1000.0 AS FLOAT) AS float, CAST(2000.0 AS DOUBLE) AS double,
      "oddstring" AS string, CAST(NULL AS STRING) AS nullable_string
    ),
    STRUCT(
      2 AS row_id,
      CAST(1000 AS INT32) AS int32, CAST(2000 AS INT64) AS int64,
      CAST(3000 AS UINT32) AS uint32, CAST(4000 AS UINT64) AS uint64,
      CAST(1000.0 AS FLOAT) AS float, CAST(2000.0 AS DOUBLE) AS double,
      "evenstring" AS string, CAST("not_null" AS STRING) AS nullable_string
    ),
    STRUCT(
      3 AS row_id,
      CAST(100 AS INT32) AS int32, CAST(2000 AS INT64) AS int64,
      CAST(300 AS UINT32) AS uint32, CAST(4000 AS UINT64) AS uint64,
      CAST(100.0 AS FLOAT) AS float, CAST(2000.0 AS DOUBLE) AS double,
      "oddstring" AS string, CAST("not_null" AS STRING) AS nullable_string
    ),
    STRUCT(
      4 AS row_id,
      CAST(1000 AS INT32) AS int32, CAST(200 AS INT64) AS int64,
      CAST(3000 AS UINT32) AS uint32, CAST(400 AS UINT64) AS uint64,
      CAST(1000.0 AS FLOAT) AS float, CAST(200.0 AS DOUBLE) AS double,
      "evenstring" AS string, CAST("not_null" AS STRING) AS nullable_string
    ),
    STRUCT(
      5 AS row_id,
      CAST(1000 AS INT32) AS int32, CAST(200 AS INT64) AS int64,
      CAST(3000 AS UINT32) AS uint32, CAST(400 AS UINT64) AS uint64,
      CAST(1000.0 AS FLOAT) AS float, CAST(200.0 AS DOUBLE) AS double,
      "oddstring" AS string, CAST(NULL AS STRING) AS nullable_string
    ),
    STRUCT(
      6 AS row_id,
      CAST(100 AS INT32) AS int32, CAST(200 AS INT64) AS int64,
      CAST(300 AS UINT32) AS uint32, CAST(400 AS UINT64) AS uint64,
      CAST(100.0 AS FLOAT) AS float, CAST(200.0 AS DOUBLE) AS double,
      "evenstring" AS string, CAST(NULL AS STRING) AS nullable_string
    )
  ]);
--
ARRAY<STRUCT<
        row_id INT64,
        int32 INT32,
        int64 INT64,
        uint32 UINT32,
        uint64 UINT64,
        float FLOAT,
        double DOUBLE,
        string STRING,
        nullable_string STRING
      >>
[
  {2, 1000, 2000, 3000, 4000, 1000, 2000, "evenstring", "not_null"},
  {4, 1000, 200, 3000, 400, 1000, 200, "evenstring", "not_null"},
  {6, 100, 200, 300, 400, 100, 200, "evenstring", NULL},
  {1, 1000, 2000, 3000, 4000, 1000, 2000, "oddstring", NULL},
  {3, 100, 2000, 300, 4000, 100, 2000, "oddstring", "not_null"},
  {5, 1000, 200, 3000, 400, 1000, 200, "oddstring", NULL}
]
==

[required_features=MULTILEVEL_AGGREGATION]
[name=multi_level_agg_basic]
SELECT
  SUM(MAX(int64) GROUP BY int32)
FROM SimpleTypes;
--
ARRAY<STRUCT<INT64>>[{4000}]
==

[required_features=MULTILEVEL_AGGREGATION]
[name=multi_level_agg_grouping_constness]
SELECT
  SUM(uint64 + uint32 + CAST(MAX(int64) AS UINT64) GROUP BY uint32)
FROM SimpleTypes
GROUP BY uint64;
--
ARRAY<STRUCT<UINT64>>[unknown order:{4500}, {15300}]
==

[required_features=MULTILEVEL_AGGREGATION]
[name=multi_level_agg_with_count_star]
SELECT
  SUM(int64 GROUP BY int64),
  COUNT(* GROUP BY int64),
  SUM(COUNT(*) + int32 + COUNT(* GROUP BY int64) GROUP BY int32),
FROM SimpleTypes
GROUP BY uint64;
--
ARRAY<STRUCT<INT64, INT64, INT64>>[unknown order:
  {200, 1, 1105},
  {2000, 1, 1105}
]
==

[required_features=MULTILEVEL_AGGREGATION]
[name=multi_level_agg_redundant_grouping_keys]
SELECT
  SUM(int32 + COUNT(string GROUP BY int32, uint64, string) GROUP BY int32, uint64),
  MIN(COUNT(string GROUP BY int32, int32, string, uint64, string) GROUP BY int32, uint64, uint64),
FROM SimpleTypes
GROUP BY uint64;
--
ARRAY<STRUCT<INT64, INT64>>[unknown order:{1103, 1}, {1103, 1}]
==

[required_features=MULTILEVEL_AGGREGATION,ORDER_BY_IN_AGGREGATE]
[name=multi_level_agg_with_order_by_modifier]
SELECT
  ARRAY_AGG(MIN(int64) GROUP BY int32 ORDER BY int32),
  ARRAY_AGG(int32 GROUP BY int32 ORDER BY SUM(int64)),
  ARRAY_AGG(MAX(int64) GROUP BY int32 ORDER BY MAX(int64))
FROM SimpleTypes;
--
ARRAY<STRUCT<ARRAY<>, ARRAY<>, ARRAY<>>>[
  {
    ARRAY<INT64>[known order:200, 200],
    ARRAY<INT32>[known order:100, 1000],
    ARRAY<INT64>[unknown order:2000, 2000]
  }
]
==

[required_features=MULTILEVEL_AGGREGATION,ORDER_BY_IN_AGGREGATE,NULL_HANDLING_MODIFIER_IN_AGGREGATE]
[name=multi_level_agg_with_order_by_modifier_ignore_nulls]
SELECT
  ARRAY_AGG(MIN(int64) IGNORE NULLS GROUP BY int32 ORDER BY int32),
  ARRAY_AGG(int32 IGNORE NULLS GROUP BY int32 ORDER BY SUM(int64)),
  ARRAY_AGG(MAX(int64) IGNORE NULLS GROUP BY int32 ORDER BY MAX(int64))
FROM SimpleTypes;
--
ARRAY<STRUCT<ARRAY<>, ARRAY<>, ARRAY<>>>[
  {
    ARRAY<INT64>[known order:200, 200],
    ARRAY<INT32>[known order:100, 1000],
    ARRAY<INT64>[unknown order:2000, 2000]
  }
]
==

[required_features=MULTILEVEL_AGGREGATION]
[name=multi_level_agg_in_having_clause]
SELECT
  string,
  SUM(MAX(int64) GROUP BY int32) AS multi_level_agg
FROM SimpleTypes
GROUP BY string
HAVING multi_level_agg > 0 AND SUM(int32 + AVG(int64) GROUP BY int32) = 4200
ORDER BY multi_level_agg;
--
ARRAY<STRUCT<
        string STRING,
        multi_level_agg INT64
      >>[{"oddstring", 4000}]
==

[required_features=MULTILEVEL_AGGREGATION,QUALIFY,ANALYTIC_FUNCTIONS]
[name=multi_level_agg_inside_over_clause]
SELECT
  SUM(uint32) OVER () AS window_result
FROM SimpleTypes
GROUP BY uint32
QUALIFY
  window_result >
  AVG(uint32) OVER (
    PARTITION BY SUM(uint32 + MAX(int32) GROUP BY uint64)
    ORDER BY MAX(uint64 + uint32 + CAST(MIN(int32) AS UINT64) GROUP BY uint64)
  );
--
ARRAY<STRUCT<window_result UINT64>>[unknown order:{3300}, {3300}]
==

[required_features=MULTILEVEL_AGGREGATION]
[name=multi_level_agg_in_order_by_clause]
SELECT
  SUM(int64)
FROM SimpleTypes
GROUP BY int64
ORDER BY
  SUM(CAST(int64 AS UINT64) + uint64 + CAST(MAX(int32) AS UINT64) GROUP BY uint64),
  MIN(int64 + MAX(COUNT(*) GROUP BY int32) GROUP BY string)
--
ARRAY<STRUCT<INT64>>[known order:{600}, {6000}]
==
[required_features=MULTILEVEL_AGGREGATION,NULL_HANDLING_MODIFIER_IN_AGGREGATE]
[name=multi_level_agg_with_null_handling_modifier]
SELECT
  ARRAY_AGG(nullable_string IGNORE NULLS GROUP BY nullable_string),
  ARRAY_AGG(nullable_string RESPECT NULLS GROUP BY nullable_string)
FROM SimpleTypes
--
ARRAY<STRUCT<ARRAY<>, ARRAY<>>>[
  {
    ARRAY<STRING>["not_null"],
    ARRAY<STRING>[unknown order:NULL, "not_null"]
  }
]
==
[required_features=MULTILEVEL_AGGREGATION,ORDER_BY_IN_AGGREGATE,LIMIT_IN_AGGREGATE]
[name=multi_level_agg_with_order_by_and_limit_1]
SELECT
  ARRAY_AGG(int64 GROUP BY int64 ORDER BY int64 LIMIT 2)
FROM SimpleTypes
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[known order:200, 2000]}]
==
[required_features=MULTILEVEL_AGGREGATION,ORDER_BY_IN_AGGREGATE,LIMIT_IN_AGGREGATE,NULL_HANDLING_MODIFIER_IN_AGGREGATE]
[name=multi_level_agg_with_order_by_and_limit_1_ignore_nulls]
SELECT
  ARRAY_AGG(int64 IGNORE NULLS GROUP BY int64 ORDER BY int64 LIMIT 2)
FROM SimpleTypes
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[known order:200, 2000]}]
==
[required_features=MULTILEVEL_AGGREGATION,ORDER_BY_IN_AGGREGATE,LIMIT_IN_AGGREGATE]
[name=multi_level_agg_with_order_by_and_limit_2]
SELECT
  ARRAY_AGG(MAX(row_id) GROUP BY row_id ORDER BY MAX(row_id) LIMIT 4)
FROM SimpleTypes
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[known order:1, 2, 3, 4]}]
==
[required_features=MULTILEVEL_AGGREGATION,ORDER_BY_IN_AGGREGATE,LIMIT_IN_AGGREGATE,NULL_HANDLING_MODIFIER_IN_AGGREGATE]
[name=multi_level_agg_with_order_by_and_limit_2_ignore_nulls]
SELECT
  ARRAY_AGG(MAX(row_id) IGNORE NULLS GROUP BY row_id ORDER BY MAX(row_id) LIMIT 4)
FROM SimpleTypes
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[known order:1, 2, 3, 4]}]
==
[required_features=MULTILEVEL_AGGREGATION]
[name=multi_level_agg_with_distinct]
SELECT
  ARRAY_AGG(MAX(int64) GROUP BY string),
  ARRAY_AGG(DISTINCT MAX(int64) GROUP BY string)
FROM SimpleTypes
--
ARRAY<STRUCT<ARRAY<>, ARRAY<>>>[
  {
    ARRAY<INT64>[unknown order:2000, 2000],
    ARRAY<INT64>[2000]
  }
]
==
[required_features=MULTILEVEL_AGGREGATION]
[name=multi_level_agg_with_sum_distinct]
SELECT
  SUM(MAX(int64) GROUP BY string),
  SUM(DISTINCT MAX(int64) GROUP BY string)
FROM SimpleTypes
--
ARRAY<STRUCT<INT64, INT64>>[{4000, 2000}]
==
[required_features=MULTILEVEL_AGGREGATION]
[name=multi_level_agg_with_count_distinct]
SELECT
  COUNT(int64 GROUP BY int64),
  COUNT(DISTINCT int64 GROUP BY int64),
  COUNT(MAX(int64) GROUP BY string),
  COUNT(DISTINCT MAX(int64) GROUP BY string),
  COUNT(string GROUP BY string),
  COUNT(DISTINCT string GROUP BY string)
FROM SimpleTypes
--
ARRAY<STRUCT<INT64, INT64, INT64, INT64, INT64, INT64>>[{2, 2, 2, 1, 2, 2}]
==
[required_features=MULTILEVEL_AGGREGATION]
[name=multi_level_agg_with_multiple_count_star]
SELECT
  COUNT(* GROUP BY int64),
  COUNT(* GROUP BY string)
FROM SimpleTypes
--
ARRAY<STRUCT<INT64, INT64>>[{2, 2}]
==
[required_features=MULTILEVEL_AGGREGATION,ORDER_BY_IN_AGGREGATE,LIMIT_IN_AGGREGATE]
[name=multi_level_agg_many_clauses]
SELECT
  ARRAY_AGG(DISTINCT row_id GROUP BY row_id ORDER BY row_id LIMIT 5)
FROM SimpleTypes
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[known order:1, 2, 3, 4, 5]}]
==
[required_features=MULTILEVEL_AGGREGATION,ORDER_BY_IN_AGGREGATE,LIMIT_IN_AGGREGATE,NULL_HANDLING_MODIFIER_IN_AGGREGATE]
[name=multi_level_agg_many_clauses_ignore_nulls]
SELECT
  ARRAY_AGG(DISTINCT row_id IGNORE NULLS GROUP BY row_id ORDER BY row_id LIMIT 5)
FROM SimpleTypes
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[known order:1, 2, 3, 4, 5]}]
==
[required_features=MULTILEVEL_AGGREGATION,ORDER_BY_IN_AGGREGATE,LIMIT_IN_AGGREGATE,NULL_HANDLING_MODIFIER_IN_AGGREGATE]
[name=multi_level_agg_many_clauses_nullable_ignore_nulls]
SELECT
  ARRAY_AGG(DISTINCT nullable_string IGNORE NULLS GROUP BY nullable_string ORDER BY nullable_string LIMIT 5)
FROM SimpleTypes
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<STRING>["not_null"]}]
==
[required_features=MULTILEVEL_AGGREGATION]
[name=multi_level_agg_group_by_ordinals]
SELECT
  int32,
  int64,
  SUM(MIN(uint32) GROUP BY string)
FROM SimpleTypes
GROUP BY 1,2
--
ARRAY<STRUCT<int32 INT32, int64 INT64, UINT64>>[unknown order:
  {100, 200, 300},
  {100, 2000, 300},
  {1000, 200, 6000},
  {1000, 2000, 6000}
]
==
[required_features=MULTILEVEL_AGGREGATION,GROUP_BY_ALL]
[name=multi_level_agg_group_by_all]
SELECT
  int32,
  int64,
  SUM(MIN(uint32) GROUP BY string)
FROM SimpleTypes
GROUP BY ALL
--
ARRAY<STRUCT<int32 INT32, int64 INT64, UINT64>>[unknown order:
  {100, 200, 300},
  {100, 2000, 300},
  {1000, 200, 6000},
  {1000, 2000, 6000}
]
==
[required_features=MULTILEVEL_AGGREGATION,GROUPING_BUILTIN,GROUPING_SETS]
[name=multi_level_agg_grouping_sets]
SELECT
  GROUPING(int32) AS int32_is_aggregated_and_not_grouped,
  GROUPING(int64) AS int64_is_aggregated_and_not_grouped,
  int32,
  int64,
  SUM(MIN(uint32) GROUP BY string)
FROM SimpleTypes
GROUP BY GROUPING SETS (int32, int64)
--
ARRAY<STRUCT<
        int32_is_aggregated_and_not_grouped INT64,
        int64_is_aggregated_and_not_grouped INT64,
        int32 INT32,
        int64 INT64,
        UINT64
      >>
[unknown order:
  {1, 0, NULL, 200, 3300},
  {1, 0, NULL, 2000, 3300},
  {0, 1, 100, NULL, 600},
  {0, 1, 1000, NULL, 6000}
]
==
[required_features=MULTILEVEL_AGGREGATION,GROUPING_BUILTIN,GROUP_BY_ROLLUP]
[name=multi_level_agg_group_by_rollup]
SELECT
  GROUPING(int32) AS int32_is_aggregated_and_not_grouped,
  GROUPING(int64) AS int64_is_aggregated_and_not_grouped,
  int32,
  int64,
  SUM(MIN(uint32) GROUP BY string)
FROM SimpleTypes
GROUP BY ROLLUP (int32, int64)
--
ARRAY<STRUCT<
        int32_is_aggregated_and_not_grouped INT64,
        int64_is_aggregated_and_not_grouped INT64,
        int32 INT32,
        int64 INT64,
        UINT64
      >>
[unknown order:
  {1, 1, NULL, NULL, 600},
  {0, 1, 100, NULL, 600},
  {0, 0, 100, 200, 300},
  {0, 0, 100, 2000, 300},
  {0, 1, 1000, NULL, 6000},
  {0, 0, 1000, 200, 6000},
  {0, 0, 1000, 2000, 6000}
]
==
[required_features=MULTILEVEL_AGGREGATION,GROUPING_BUILTIN,GROUPING_SETS]
[name=multi_level_agg_group_by_cube]
SELECT
  GROUPING(int32) AS int32_is_aggregated_and_not_grouped,
  GROUPING(int64) AS int64_is_aggregated_and_not_grouped,
  int32,
  int64,
  SUM(MIN(uint32) GROUP BY string)
FROM SimpleTypes
GROUP BY CUBE (int32, int64)
--
ARRAY<STRUCT<
        int32_is_aggregated_and_not_grouped INT64,
        int64_is_aggregated_and_not_grouped INT64,
        int32 INT32,
        int64 INT64,
        UINT64
      >>
[unknown order:
  {1, 1, NULL, NULL, 600},
  {1, 0, NULL, 200, 3300},
  {1, 0, NULL, 2000, 3300},
  {0, 1, 100, NULL, 600},
  {0, 0, 100, 200, 300},
  {0, 0, 100, 2000, 300},
  {0, 1, 1000, NULL, 6000},
  {0, 0, 1000, 200, 6000},
  {0, 0, 1000, 2000, 6000}
]
==
[required_features=MULTILEVEL_AGGREGATION]
[name=multi_level_agg_with_multiple_args]
SELECT
  CORR(AVG(int64), CORR(int32, int64) GROUP BY string)
FROM SimpleTypes
--
ARRAY<STRUCT<DOUBLE>>[{-1}]
==
[required_features=MULTILEVEL_AGGREGATION]
[name=multi_level_agg_with_subquery_args]
SELECT
  string,
  SUM(
    (SELECT MAX(SUM(int64) GROUP BY int32) FROM SimpleTypes)
    GROUP BY int32
  )
FROM SimpleTypes
GROUP BY string;
--
ARRAY<STRUCT<string STRING, INT64>>[unknown order:
  {"evenstring", 8800},
  {"oddstring", 8800}
]
