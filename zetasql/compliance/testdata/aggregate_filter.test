[default required_features=AGGREGATE_FILTERING]

[prepare_database]
CREATE TABLE Employees AS
  SELECT * FROM UNNEST([
    STRUCT(1 AS emp_id, 101 AS dept_id, 45 AS age, 200000 AS salary, "Manager" AS job, 1 AS status_code),
    STRUCT(2 AS emp_id, 102 AS dept_id, 42 AS age, 180000 AS salary, "Manager" AS job, NULL AS status_code),
    STRUCT(3 AS emp_id, 101 AS dept_id, 28 AS age, 150000 AS salary, "Manager" AS job, 2 AS status_code),
    STRUCT(4 AS emp_id, 102 AS dept_id, 25 AS age, 80000 AS salary,  "Analyst" AS job, 1 AS status_code),
    STRUCT(5 AS emp_id, 101 AS dept_id, 29 AS age, 70000 AS salary,  "Analyst" AS job, 2 AS status_code),
    STRUCT(6 AS emp_id, 102 AS dept_id, 37 AS age, 80000 AS salary,  "Analyst" AS job, NULL AS status_code)
  ]);
--
ARRAY<STRUCT<emp_id INT64,
             dept_id INT64,
             age INT64,
             salary INT64,
             job STRING,
             status_code INT64>>
[
  {2, 102, 42, 180000, "Manager", NULL},
  {4, 102, 25, 80000, "Analyst", 1},
  {6, 102, 37, 80000, "Analyst", NULL},
  {1, 101, 45, 200000, "Manager", 1},
  {3, 101, 28, 150000, "Manager", 2},
  {5, 101, 29, 70000, "Analyst", 2}
]
==

[prepare_database]
CREATE TABLE TestExamTableWithRowId AS
SELECT cast(1 as int64) as row_id,
       cast("Hansen" as string) as last_name,
       cast("P91" as string) as test_id,
       cast(510 as double) as test_score UNION ALL
SELECT 2, "Wang", "U25", 500 UNION ALL
SELECT 3, "Wang", "C83", 520 UNION ALL
SELECT 4, "Wang", "U25", 460 UNION ALL
SELECT 5, "Hansen", "C83", 420 UNION ALL
SELECT 6, "Hansen", "C83", 560 UNION ALL
SELECT 7, "Devi", "U25", 580 UNION ALL
SELECT 8, "Devi", "P91", 480 UNION ALL
SELECT 9, "Ivanov", "U25", 490 UNION ALL
SELECT 10, "Ivanov", "P91", 540 UNION ALL
SELECT 11, "Silva", "U25", 550
--
ARRAY<STRUCT<row_id INT64, last_name STRING, test_id STRING, test_score DOUBLE>>[
  {1, "Hansen", "P91", 510},
  {2, "Wang", "U25", 500},
  {3, "Wang", "C83", 520},
  {4, "Wang", "U25", 460},
  {5, "Hansen", "C83", 420},
  {6, "Hansen", "C83", 560},
  {7, "Devi", "U25", 580},
  {8, "Devi", "P91", 480},
  {9, "Ivanov", "U25", 490},
  {10, "Ivanov", "P91", 540},
  {11, "Silva", "U25", 550}
]
==

# Filter is additional on top of the shared WHERE clause
[name=simple_filter]
SELECT
  dept_id,
  count(* WHERE job = "Analyst") AS cnt_star_analyst,
  count(salary WHERE job = "Analyst") AS cnt_analyst,

  count(* WHERE job = "Manager") AS cnt_star_mgr,
  count(salary WHERE job = "Manager") AS cnt_mgr,

  count(*) AS cnt_star,
  count(salary) AS cnt_salary,
FROM Employees
WHERE age < 40
GROUP BY dept_id
--
ARRAY<STRUCT<
        dept_id INT64,
        cnt_star_analyst INT64,
        cnt_analyst INT64,
        cnt_star_mgr INT64,
        cnt_mgr INT64,
        cnt_star INT64,
        cnt_salary INT64
      >>
[unknown order:
  {101, 1, 1, 1, 1, 2, 2},
  {102, 2, 2, 0, 0, 2, 2}
]
==

# One of the groups results in zero rows passing the filter.
[required_features=AGGREGATE_FILTERING,ORDER_BY_IN_AGGREGATE]
[name=filter_with_order_by]
SELECT
  dept_id,
  ARRAY_AGG(emp_id ORDER BY salary DESC) AS unfiltered,
  ARRAY_AGG(emp_id WHERE salary > 100000 ORDER BY salary DESC) AS arr,
FROM Employees
WHERE age < 40
GROUP BY dept_id
--
ARRAY<STRUCT<dept_id INT64, unfiltered ARRAY<>, arr ARRAY<>>>[unknown order:
  {
    101,
    ARRAY<INT64>[known order:3, 5],
    ARRAY<INT64>[3]
  },
  {
    102,
    ARRAY<INT64>[unknown order:4, 6],
    ARRAY<INT64>(NULL)
  }
]
==

[required_features=AGGREGATE_FILTERING,NULL_HANDLING_MODIFIER_IN_AGGREGATE]
[name=filter_with_respect_nulls]
SELECT
  ARRAY_AGG(status_code) AS unfiltered,
  ARRAY_AGG(status_code RESPECT NULLS WHERE age < 40) AS codes,
  ARRAY_AGG(status_code IGNORE NULLS) AS codes_no_nulls,
FROM Employees
--
ARRAY<STRUCT<
        unfiltered ARRAY<>,
        codes ARRAY<>,
        codes_no_nulls ARRAY<>
      >>
[{
   ARRAY<INT64>[unknown order:1, 1, 2, NULL, NULL, 2],
   ARRAY<INT64>[unknown order:1, 2, NULL, 2],
   ARRAY<INT64>[unknown order:1, 1, 2, 2]
 }]
==

[required_features=AGGREGATE_FILTERING,HAVING_IN_AGGREGATE]
[name=filter_with_having_min_max]
SELECT
  dept_id,
  ARRAY_AGG(emp_id HAVING MIN age) AS unfiltered,
  ARRAY_AGG(emp_id WHERE salary > 100000 HAVING MIN age) AS codes,
FROM Employees
WHERE age < 40
GROUP BY dept_id
--
ARRAY<STRUCT<dept_id INT64, unfiltered ARRAY<>, codes ARRAY<>>>[unknown order:
  {101, ARRAY<INT64>[3], ARRAY<INT64>[3]},
  {102, ARRAY<INT64>[4], ARRAY<INT64>(NULL)}
]
==

[required_features=AGGREGATE_FILTERING,LIMIT_IN_AGGREGATE]
[name=filter_with_limit]
SELECT
  dept_id,
  ARRAY_AGG(emp_id LIMIT 3) AS unfiltered,
  ARRAY_AGG(emp_id WHERE job = "Manager" LIMIT 3) AS arr,
FROM Employees
WHERE age < 40
GROUP BY dept_id
--
ARRAY<STRUCT<dept_id INT64, unfiltered ARRAY<>, arr ARRAY<>>>[unknown order:
  {
    101,
    ARRAY<INT64>[unknown order:5, 3],
    ARRAY<INT64>[3]
  },
  {
    102,
    ARRAY<INT64>[unknown order:4, 6],
    ARRAY<INT64>(NULL)
  }
]
==

[required_features=AGGREGATE_FILTERING]
[name=filter_with_distinct]
SELECT
  dept_id,
  ARRAY_AGG(job) AS duplicated,
  ARRAY_AGG(DISTINCT job) AS unfiltered,
  ARRAY_AGG(DISTINCT job WHERE job = "Manager") AS arr,
FROM Employees
WHERE age < 40
GROUP BY dept_id
--
ARRAY<STRUCT<dept_id INT64, duplicated ARRAY<>, unfiltered ARRAY<>, arr ARRAY<>>>[unknown order:
  {
    101,
    ARRAY<STRING>[unknown order:"Analyst", "Manager"],
    ARRAY<STRING>[unknown order:"Analyst", "Manager"],
    ARRAY<STRING>["Manager"]
  },
  {
    102,
    ARRAY<STRING>[unknown order:"Analyst", "Analyst"],
    ARRAY<STRING>["Analyst"],
    ARRAY<STRING>(NULL)
  }
]
==

# Error: There's no way to escape this error: the filter needs to be evaluated
# to even tell if the row is going to count in the aggregation:
[name=error_in_filter]
SELECT
  dept_id,
  count(* WHERE 1.0/(emp_id - 1) > 0) AS cnt,
  max(salary) AS max_salary
FROM Employees
GROUP BY dept_id
--
ERROR: generic::out_of_range: division by zero: 1 / 0
==

# Error: There's no way to escape this calculation: the filter needs to be
# evaluated to even tell if the row is going to count in the aggregation.
# But we use SAFE_DIVIDE, so the query shouldn't fail.
[name=escaped_error_in_filter]
SELECT
  dept_id,
  count(* WHERE SAFE_DIVIDE(1.0, (emp_id - 1)) > 0) AS cnt,
  max(salary) AS max_salary
FROM Employees
GROUP BY dept_id
--
ARRAY<STRUCT<dept_id INT64, cnt INT64, max_salary INT64>>[unknown order:
  {101, 2, 200000},
  {102, 3, 180000}
]
==

[required_features=AGGREGATE_FILTERING,MULTILEVEL_AGGREGATION]
[name=filter_with_multilevel]
SELECT
  dept_id,
  ARRAY_AGG(MIN(emp_id) WHERE salary < 80000 GROUP BY job) AS arr,
FROM Employees
WHERE age < 40
GROUP BY dept_id
--
ARRAY<STRUCT<dept_id INT64, arr ARRAY<>>>[unknown order:
  {101, ARRAY<INT64>[5]},
  {102, ARRAY<INT64>(NULL)}
]
==


[required_features=AGGREGATE_FILTERING,MULTILEVEL_AGGREGATION]
[name=filter_on_inner_aggregate_in_multilevel]
SELECT
  dept_id,
  ARRAY_AGG(MIN(emp_id WHERE job = "Manager") GROUP BY job) AS arr,
FROM Employees
WHERE age < 40
GROUP BY dept_id
--
ARRAY<STRUCT<dept_id INT64, arr ARRAY<>>>[unknown order:
  {
    101,
    ARRAY<INT64>[unknown order:NULL, 3]
  },
  {102, ARRAY<INT64>[NULL]}
]
==

[name=filter_in_having_clause]
SELECT
  dept_id,
  ARRAY_AGG(emp_id) AS unfiltered,
FROM Employees
WHERE age < 40
GROUP BY dept_id
HAVING sum(salary WHERE status_code = 1) > 50000
--
ARRAY<STRUCT<dept_id INT64, unfiltered ARRAY<>>>[
  {
    102,
    ARRAY<INT64>[unknown order:4, 6]
  }
]
==

# Simple aggregation_threshold count query removes the unique student count
# result for C83 because it is below the threshold.
[required_features=AGGREGATION_THRESHOLD,AGGREGATE_FILTERING]
[name=count_aggregation_threshold_query_remove_some_results]
[labels=aggregation_threshold]
SELECT WITH AGGREGATION_THRESHOLD
  OPTIONS(threshold=3, privacy_unit_column=last_name)
  test_id,
  COUNT(DISTINCT last_name) AS student_count_unfiltered,
  COUNT(DISTINCT last_name WHERE row_id < 9) AS filter1,
  COUNT(DISTINCT last_name WHERE test_score > 500) AS filter2,
FROM TestExamTableWithRowId
GROUP BY test_id;
--
ARRAY<STRUCT<
        test_id STRING,
        student_count_unfiltered INT64,
        filter1 INT64,
        filter2 INT64
      >>
[unknown order:{"P91", 3, 2, 2}, {"U25", 4, 2, 2}]
==

# Ensure the branch with an error does fail the query
[name=filter_with_conditional_evaluation_error_in_chosen_branch]
SELECT
  dept_id,
  IF (SUM(salary) < 0,
    [],
    ARRAY_AGG(emp_id WHERE salary < cast('xyz' AS INT64))) AS arr,
FROM Employees
WHERE age < 40
GROUP BY dept_id
--
ERROR: generic::out_of_range: Bad int64 value: xyz
==

# Ensure the branch with an error doesn't fail the query.
[required_features=AGGREGATE_FILTERING,ENFORCE_CONDITIONAL_EVALUATION]
[name=filter_with_conditional_evaluation_avoids_error_in_unchosen_branch]
SELECT
  dept_id,
  IF (SUM(salary) > 10000,
    ARRAY_AGG(emp_id WHERE salary < 100000),
    ARRAY_AGG(emp_id WHERE salary < cast('xyz' AS INT64))) AS arr,
FROM Employees
WHERE age < 40
GROUP BY dept_id
--
ARRAY<STRUCT<dept_id INT64, arr ARRAY<>>>[unknown order:
  {
    102,
    ARRAY<INT64>[unknown order:4, 6]
  },
  {101, ARRAY<INT64>[5]}
]
==

# MATCH_RECOGNIZE MEASURES add conjunction filters to aggregations:
# (NOT `$is_sentinel` AND CLASSIFIER() = '<referenced_var>')
[reserve_match_recognize]
[required_features=AGGREGATE_FILTERING,MATCH_RECOGNIZE,ORDER_BY_IN_AGGREGATE]
[name=filter_with_match_recognize_measure_containing_pattern_var_refs]
SELECT * FROM Employees MATCH_RECOGNIZE(
  ORDER BY emp_id
  MEASURES ARRAY_AGG(A.emp_id WHERE A.salary > 80000) AS m
  PATTERN (a+)
  DEFINE a AS true
)
--
ARRAY<STRUCT<m ARRAY<>>>[{ARRAY<INT64>[known order:1, 2, 3]}]
