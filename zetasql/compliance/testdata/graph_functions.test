[default reserve_graph_table]
[default required_features=V_1_4_SQL_GRAPH,V_1_4_SQL_GRAPH_ADVANCED_QUERY,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT]
[load_proto_files=zetasql/testdata/test_schema.proto]
[load_proto_names=zetasql_test__.KitchenSinkPB]
[prepare_database]
CREATE TABLE person AS
(SELECT 1 AS id, "name1" AS name) UNION ALL
(SELECT 2 AS id, "name2" AS name)
--
ARRAY<STRUCT<id INT64, name STRING>>[{1, "name1"}, {2, "name2"}]
==
[prepare_database]
CREATE TABLE person_knows_person AS
(SELECT 100 AS id, 1 AS from_person_id, 1 AS to_person_id, TIMESTAMP '2000-01-01 00:00:00' AS since)  UNION ALL
(SELECT 200 AS id, 1 AS from_person_id, 2 AS to_person_id, TIMESTAMP '2000-01-02 00:00:00' AS since)
--
ARRAY<STRUCT<id INT64, from_person_id INT64, to_person_id INT64, since TIMESTAMP>>[
  {
    100,
    1,
    1,
    2000-01-01 08:00:00+00
  },
  {
    200,
    1,
    2,
    2000-01-02 08:00:00+00
  }
]
==
[prepare_database]
CREATE PROPERTY GRAPH aml
  NODE TABLES (
    Person KEY(id)
  )
  EDGE TABLES (
    person_knows_person AS Knows KEY(id)
              SOURCE KEY(from_person_id) REFERENCES Person(id)
              DESTINATION KEY(to_person_id) REFERENCES Person(id)
              DEFAULT LABEL PROPERTIES(since)
  )
==
[name=any_type_scalar_functions]
[required_features=V_1_4_SQL_GRAPH,V_1_4_SQL_GRAPH_ADVANCED_QUERY,JSON_TYPE,JSON_MUTATOR_FUNCTIONS,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT,V_1_3_TYPEOF_FUNCTION,V_1_3_INLINE_LAMBDA_ARGUMENT]
GRAPH aml
MATCH (a:Person)
RETURN TO_JSON(NULLIF(a, a)) AS nullif,
       TO_JSON(IFNULL(a, a)) AS ifnull,
       JSON_ARRAY_APPEND(JSON '[]', '$', a) AS json_array_append,
       TYPEOF(a) AS typeof,
       ARRAY_INCLUDES([a], a) AS array_includes,
       TO_JSON(ARRAY_TRANSFORM([a], a->a.id)) AS array_transform,
       a IS NULL AS is_null,
       TO_JSON(IF(true, a, a)) AS if_expr,
       TO_JSON(COALESCE(a, a)) AS coalesce,
       a.id as id
NEXT
RETURN nullif,
       ifnull.labels,
       json_array_append is null as json_array_append_is_null,
       typeof,
       array_includes,
       array_transform,
       is_null,
       if_expr.kind,
       coalesce.properties
ORDER BY id
LIMIT 1
--
ARRAY<STRUCT<
        nullif JSON,
        labels JSON,
        json_array_append_is_null BOOL,
        typeof STRING,
        array_includes BOOL,
        array_transform JSON,
        is_null BOOL,
        kind JSON,
        properties JSON
      >>
[{
   null,
   ["Person"],
   false,
   "GRAPH_NODE(aml)<id INT64, name STRING>",
   true,
   [1],
   false,
   "node",
   {"id":1,"name":"name1"}
 }]
==

[name=any_type_analytic_functions]
[required_features=V_1_4_SQL_GRAPH,V_1_4_SQL_GRAPH_ADVANCED_QUERY,V_1_4_SQL_GRAPH_EXPOSE_GRAPH_ELEMENT,JSON_TYPE,ANALYTIC_FUNCTIONS]
SELECT json.kind, json.labels, json.properties FROM (
SELECT TO_JSON(FIRST_VALUE(a) OVER (ORDER BY a.id)) as json
FROM GRAPH_TABLE(
  aml
  MATCH (a:Person)
  ORDER BY a.id
  LIMIT 1
  RETURN a
)
)
--
ARRAY<STRUCT<kind JSON, labels JSON, properties JSON>>[
  {
    "node",
    ["Person"],
    {"id":1,"name":"name1"}
  }
]
