#
# Create tables
#
[load_proto_files=zetasql/testdata/test_schema.proto]
[load_proto_names=zetasql_test__.KitchenSinkPB]

[prepare_database]
CREATE TABLE TableAll AS
SELECT cast(1 as int64) as primary_key,
       cast(1 as int64) as distinct_1, cast(1 as int64) as distinct_2,
       cast(1 as int64) as `all` UNION ALL
  SELECT 2, 1, 2, 2 UNION ALL
  SELECT 3, 1, 1, 3 UNION ALL
  SELECT 4, 1, 2, 4 UNION ALL
  SELECT 5, 1, 1, 1 UNION ALL
  SELECT 6, 1, 2, 2 UNION ALL
  SELECT 7, 1, 1, 3 UNION ALL
  SELECT 8, 1, 2, 4 UNION ALL
  SELECT 9, 1, 1, 1 UNION ALL
  SELECT 10, 1, 2, 2 UNION ALL
  SELECT 11, 1, 1, 3 UNION ALL
  SELECT 12, 1, 2, 4 UNION ALL
  SELECT 13, 1, 1, 1 UNION ALL
  SELECT 14, 1, 2, 2 UNION ALL
  SELECT 15, 1, 1, 3 UNION ALL
  SELECT 16, 1, 2, 4
--
ARRAY<STRUCT<primary_key INT64, distinct_1 INT64, distinct_2 INT64, all INT64>>[
  {1, 1, 1, 1},
  {2, 1, 2, 2},
  {3, 1, 1, 3},
  {4, 1, 2, 4},
  {5, 1, 1, 1},
  {6, 1, 2, 2},
  {7, 1, 1, 3},
  {8, 1, 2, 4},
  {9, 1, 1, 1},
  {10, 1, 2, 2},
  {11, 1, 1, 3},
  {12, 1, 2, 4},
  {13, 1, 1, 1},
  {14, 1, 2, 2},
  {15, 1, 1, 3},
  {16, 1, 2, 4}
]
==

[prepare_database]
CREATE TABLE TableLarge AS
SELECT cast(1 as int64) as primary_key,
       cast(null as bool) as bool_val, cast(null as double) as double_val,
       cast(null as int64) as int64_val,
       cast(null as string) as str_val UNION ALL
  SELECT 2, true,  null, null, null UNION ALL
  SELECT 3, false, 0.2,  null, null UNION ALL
  SELECT 4, true,  0.3,  3,    null UNION ALL
  SELECT 5, false, 0.4,  4,     "4" UNION ALL
  SELECT 6, true,  0.5,  5,     "5" UNION ALL
  SELECT 7, false, 0.6,  6,     "6" UNION ALL
  SELECT 8, true,  0.7,  7,     "7" UNION ALL
  SELECT 9, false, 0.8,  8,     "8" UNION ALL
  SELECT 10, true,  0.9,  9,     "9" UNION ALL
  SELECT 11, false, 1.0, 10,    "10"
--
ARRAY<STRUCT<primary_key INT64,
             bool_val BOOL,
             double_val DOUBLE,
             int64_val INT64,
             str_val STRING>>
[
  {1, NULL, NULL, NULL, NULL},
  {2, true, NULL, NULL, NULL},
  {3, false, 0.2, NULL, NULL},
  {4, true, 0.3, 3, NULL},
  {5, false, 0.4, 4, "4"},
  {6, true, 0.5, 5, "5"},
  {7, false, 0.6, 6, "6"},
  {8, true, 0.7, 7, "7"},
  {9, false, 0.8, 8, "8"},
  {10, true, 0.9, 9, "9"},
  {11, false, 1, 10, "10"}
]
==

[prepare_database]
CREATE TABLE TableStruct AS
SELECT cast(1 as int64) as primary_key,
       STRUCT(1 AS a1,
              STRUCT(STRUCT(1 AS c1, 1 AS c2) AS b1, 1 AS b2) AS a2) AS x,
       1 AS y UNION ALL
SELECT 2 as primary_key,
       STRUCT(1 AS a1,
              STRUCT(STRUCT(1 AS c1, 1 AS c2) AS b1, 1 AS b2) AS a2) AS x,
       2 AS y UNION ALL
SELECT 3 as primary_key,
       STRUCT(3 AS a1,
              STRUCT(STRUCT(3 AS c1, 3 AS c2) AS b1, 3 AS b2) AS a2) AS x,
       3 AS y UNION ALL
SELECT 4 as primary_key,
       STRUCT(4 AS a1,
              STRUCT(STRUCT(4 AS c1, 4 AS c2) AS b1, 4 AS b2) AS a2) AS x,
       4 AS y
--
ARRAY<STRUCT<primary_key INT64,
             x STRUCT<a1 INT64,
                         a2 STRUCT<
                                b1 STRUCT<c1 INT64, c2 INT64>,
                                b2 INT64
                              >>,
             y INT64>>
[
  {1, {1, {{1, 1}, 1}}, 1},
  {2, {1, {{1, 1}, 1}}, 2},
  {3, {3, {{3, 3}, 3}}, 3},
  {4, {4, {{4, 4}, 4}}, 4}
]
==

[default required_features=GROUP_BY_ALL]
[name=group_by_all_one_groupable_one_aggregate_1]
SELECT primary_key, count(*) as cnt
FROM TableLarge t
GROUP BY ALL
ORDER BY primary_key ASC
--
ARRAY<STRUCT<primary_key INT64, cnt INT64>>[known order:
  {1, 1},
  {2, 1},
  {3, 1},
  {4, 1},
  {5, 1},
  {6, 1},
  {7, 1},
  {8, 1},
  {9, 1},
  {10, 1},
  {11, 1}
]
==

[name=group_by_all_only_groupable_1]
SELECT primary_key
FROM TableLarge t
GROUP BY ALL
ORDER BY primary_key ASC
--
ARRAY<STRUCT<primary_key INT64>>[known order:
  {1},
  {2},
  {3},
  {4},
  {5},
  {6},
  {7},
  {8},
  {9},
  {10},
  {11}
]
==

[name=group_by_all_only_groupable_2]
SELECT primary_key, primary_key + int64_val
FROM TableLarge t
GROUP BY ALL
ORDER BY primary_key ASC
--
ARRAY<STRUCT<primary_key INT64, INT64>>[known order:
  {1, NULL},
  {2, NULL},
  {3, NULL},
  {4, 7},
  {5, 9},
  {6, 11},
  {7, 13},
  {8, 15},
  {9, 17},
  {10, 19},
  {11, 21}
]
==

[name=group_by_all_proto_path_1]
SELECT a.int64_key_1
FROM (
  SELECT CAST("int64_key_1: 1 int64_key_2: 2" AS zetasql_test__.KitchenSinkPB) AS a
) t
GROUP BY ALL
--
ARRAY<STRUCT<int64_key_1 INT64>>[{1}]
==

[name=group_by_all_proto_path_2]
SELECT a.int64_key_1, SUM(b)
FROM (
  SELECT CAST("int64_key_1: 1 int64_key_2: 2" AS zetasql_test__.KitchenSinkPB) AS a,
         1 AS b
) t
GROUP BY ALL
--
ARRAY<STRUCT<int64_key_1 INT64, INT64>>[{1, 1}]
==

[name=group_by_all_only_aggregate_1]
SELECT count(*) as cnt
FROM TableLarge t
GROUP BY ALL
--
ARRAY<STRUCT<cnt INT64>>[{11}]
==

[name=group_by_all_only_aggregate_2]
SELECT SUM(distinct_1)
FROM TableAll
GROUP BY ALL
--
ARRAY<STRUCT<INT64>>[{16}]
==

[name=group_by_all_only_aggregate_3]
SELECT SUM(distinct_1) + COUNT(*)
FROM TableAll
GROUP BY ALL
--
ARRAY<STRUCT<INT64>>[{32}]
==

# FROM clause reference table with column named "ALL".
[name=group_by_all_reserved_keyword_column_name_1]
SELECT *
FROM TableAll
GROUP BY ALL
ORDER BY primary_key
--
ARRAY<STRUCT<primary_key INT64, distinct_1 INT64, distinct_2 INT64, all INT64>>[known order:
  {1, 1, 1, 1},
  {2, 1, 2, 2},
  {3, 1, 1, 3},
  {4, 1, 2, 4},
  {5, 1, 1, 1},
  {6, 1, 2, 2},
  {7, 1, 1, 3},
  {8, 1, 2, 4},
  {9, 1, 1, 1},
  {10, 1, 2, 2},
  {11, 1, 1, 3},
  {12, 1, 2, 4},
  {13, 1, 1, 1},
  {14, 1, 2, 2},
  {15, 1, 1, 3},
  {16, 1, 2, 4}
]
==

# FROM clause reference table with column named "ALL" and table name "ALL".
[name=group_by_all_reserved_keyword_column_name_2]
SELECT *
FROM TableAll AS `ALL`
GROUP BY ALL
ORDER BY primary_key
--
ARRAY<STRUCT<primary_key INT64, distinct_1 INT64, distinct_2 INT64, all INT64>>[known order:
  {1, 1, 1, 1},
  {2, 1, 2, 2},
  {3, 1, 1, 3},
  {4, 1, 2, 4},
  {5, 1, 1, 1},
  {6, 1, 2, 2},
  {7, 1, 1, 3},
  {8, 1, 2, 4},
  {9, 1, 1, 1},
  {10, 1, 2, 2},
  {11, 1, 1, 3},
  {12, 1, 2, 4},
  {13, 1, 1, 1},
  {14, 1, 2, 2},
  {15, 1, 1, 3},
  {16, 1, 2, 4}
]
==

# FROM clause reference table with column named "ALL".
[name=group_by_all_reserved_keyword_column_name_3]
SELECT `all`, SUM(distinct_1)
FROM TableAll
GROUP BY ALL
ORDER BY 1
--
ARRAY<STRUCT<all INT64, INT64>>[known order:{1, 4}, {2, 4}, {3, 4}, {4, 4}]
==

# FROM clause reference table with column named "ALL".
[required_features=]
[name=group_by_reserved_keyword_column_name_1]
SELECT `all`, SUM(distinct_1)
FROM TableAll
GROUP BY `ALL`
ORDER BY 1
--
ARRAY<STRUCT<all INT64, INT64>>[known order:{1, 4}, {2, 4}, {3, 4}, {4, 4}]
==

# FROM clause reference table with column named "ALL".
[required_features=]
[name=group_by_reserved_keyword_column_name_2]
SELECT SUM(distinct_1)
FROM TableAll
GROUP BY `ALL`
ORDER BY `ALL`
--
ARRAY<STRUCT<INT64>>[known order:{4}, {4}, {4}, {4}]
==

[required_features=GROUP_BY_ALL,QUALIFY,ANALYTIC_FUNCTIONS]
[name=group_by_all_window_function_1]
SELECT distinct_1, row_number() over () AS a
FROM TableAll WHERE true
GROUP BY ALL
QUALIFY a = 1
--
ARRAY<STRUCT<distinct_1 INT64, a INT64>>[{1, 1}]
==

[required_features=GROUP_BY_ALL,QUALIFY,ANALYTIC_FUNCTIONS]
[name=group_by_all_window_function_2]
SELECT distinct_1, SUM(distinct_2), row_number() over () AS a
FROM TableAll WHERE true
GROUP BY ALL
QUALIFY a = 1
--
ARRAY<STRUCT<distinct_1 INT64, INT64, a INT64>>[{1, 24, 1}]
==

[required_features=GROUP_BY_ALL,SELECT_STAR_EXCEPT_REPLACE]
[name=group_by_all_select_except]
SELECT * EXCEPT (a)
FROM (
  SELECT 1 AS a, 2 AS b
)
GROUP BY ALL
--
ARRAY<STRUCT<b INT64>>[{2}]
==

[required_features=GROUP_BY_ALL,SELECT_STAR_EXCEPT_REPLACE]
[name=group_by_all_select_replace]
SELECT * REPLACE (0 AS a)
FROM (
  SELECT 1 AS a, 2 AS b
)
GROUP BY ALL
--
ARRAY<STRUCT<a INT64, b INT64>>[{0, 2}]
==

[name=group_by_all_select_distinct]
SELECT DISTINCT *
FROM (
  SELECT 1 AS a
  UNION ALL
  SELECT 1 AS a
)
GROUP BY ALL
--
ARRAY<STRUCT<a INT64>>[{1}]
==

[name=group_by_all_having_aggregate_function]
SELECT a
FROM (
  SELECT 1 AS a, 2 AS b
  UNION ALL
  SELECT 2 AS a, 1 AS b
)
GROUP BY ALL
HAVING SUM(b) > 1
--
ARRAY<STRUCT<a INT64>>[{1}]
==

[name=group_by_all_non_correlated_path_expr_1]
SELECT
  (
    SELECT T.expr AS correlated_expr
  ) AS x, a, SUM(b)
FROM (
  SELECT 1 AS expr, 1 AS a, 1 AS b
  UNION ALL
  SELECT 1 AS expr, 2 AS a, 2 AS b
  UNION ALL
  SELECT 2 AS expr, 2 AS a, 2 AS b
  UNION ALL
  SELECT 2 AS expr, 2 AS a, 3 AS b
) T
GROUP BY ALL
ORDER BY 1, 2
--
ARRAY<STRUCT<x INT64, a INT64, INT64>>[known order:
  {1, 1, 1},
  {1, 2, 2},
  {2, 2, 5}
]
==

[name=group_by_all_correlated_path_expr_1]
# We can't order by STRUCT, so the output row order of this test can't be
# determined on purpose.
SELECT
  (
    SELECT AS STRUCT
      T.expr AS correlated_expr, T.a, SUM(b)
    FROM (
      SELECT 1 AS b
      UNION ALL
      SELECT 2 AS b
    )
    GROUP BY ALL
  ) AS x
FROM (
  SELECT 1 AS expr, 1 AS a, 1 AS b
  UNION ALL
  SELECT 1 AS expr, 2 AS a, 2 AS b
  UNION ALL
  SELECT 2 AS expr, 2 AS a, 2 AS b
  UNION ALL
  SELECT 2 AS expr, 2 AS a, 3 AS b
) T
--
ARRAY<STRUCT<x STRUCT<
                    correlated_expr INT64,
                    a INT64,
                    INT64
                  >>>
[unknown order:{{1, 2, 3}}, {{2, 2, 3}}, {{1, 1, 3}}, {{2, 2, 3}}]
==

[required_features=GROUP_BY_ALL,INLINE_LAMBDA_ARGUMENT]
[name=group_by_all_correlated_path_expr_2]
SELECT
  (
    SELECT AS STRUCT
      current_key,
      ARRAY_FILTER(external_array, e -> e > a),
      SUM(b)
    FROM (
      SELECT 1 AS current_key, [3, 4, 5] AS current_array
    ) AS current_table
    GROUP BY ALL
  ) AS x
FROM (
  SELECT 1 AS a, 1 AS b, [1, 2] AS external_array
  UNION ALL
  SELECT 2 AS a, 2 AS b, [2, 4] AS external_array
) AS external_table
--
ARRAY<STRUCT<x STRUCT<current_key INT64, ARRAY<>, INT64>>>[unknown order:
  {{1, ARRAY<INT64>[4], 2}},
  {{1, ARRAY<INT64>[2], 1}}
]
==

[required_features=GROUP_BY_ALL,GROUP_BY_STRUCT]
[name=group_by_all_column_ref_as_prefix_1]
# We can't order by STRUCT, so the output row order of this test can't be
# determined on purpose.
SELECT x.a2.b1, x, x.a1, SUM(y)
FROM TableStruct
GROUP BY ALL
--
ARRAY<STRUCT<b1 STRUCT<c1 INT64, c2 INT64>,
             x STRUCT<a1 INT64,
                         a2 STRUCT<
                                b1 STRUCT<c1 INT64, c2 INT64>,
                                b2 INT64
                              >>,
             a1 INT64,
             INT64>>
[unknown order:
  {{3, 3}, {3, {{3, 3}, 3}}, 3, 3},
  {{1, 1}, {1, {{1, 1}, 1}}, 1, 3},
  {{4, 4}, {4, {{4, 4}, 4}}, 4, 4}
]
==

[required_features=GROUP_BY_ALL,GROUP_BY_STRUCT]
[name=group_by_all_path_expression_as_prefix_1]
# We can't order by STRUCT, so the output row order of this test can't be
# determined on purpose.
SELECT x.a2.b1, x.a1, x.a2, SUM(y)
FROM TableStruct
GROUP BY ALL
--
ARRAY<STRUCT<b1 STRUCT<c1 INT64, c2 INT64>,
             a1 INT64,
             a2 STRUCT<
                    b1 STRUCT<c1 INT64, c2 INT64>,
                    b2 INT64
                  >,
             INT64>>
[unknown order:
  {{3, 3}, 3, {{3, 3}, 3}, 3},
  {{1, 1}, 1, {{1, 1}, 1}, 3},
  {{4, 4}, 4, {{4, 4}, 4}, 4}
]
==

[required_features=GROUP_BY_ALL,GROUP_BY_STRUCT]
[name=group_by_all_path_expression_as_prefix_2]
# We can't order by STRUCT, so the output row order of this test can't be
# determined on purpose.
SELECT (SELECT x.a2.b1), [x.a2.b1.c1, x.a2.b2], x.a2, SUM(y)
FROM TableStruct
GROUP BY ALL
--
ARRAY<STRUCT<STRUCT<c1 INT64, c2 INT64>,
             ARRAY<>,
             a2 STRUCT<
                    b1 STRUCT<c1 INT64, c2 INT64>,
                    b2 INT64
                  >,
             INT64>>
[unknown order:{
                 {3, 3},
                 ARRAY<INT64>[known order:3, 3],
                 {{3, 3}, 3},
                 3
               },
               {
                 {1, 1},
                 ARRAY<INT64>[known order:1, 1],
                 {{1, 1}, 1},
                 3
               },
               {
                 {4, 4},
                 ARRAY<INT64>[known order:4, 4],
                 {{4, 4}, 4},
                 4
               }]
==

[required_features=GROUP_BY_ALL,GROUP_BY_STRUCT]
[name=group_by_all_complex_expression_as_prefix]
# We can't order by STRUCT, so the output row order of this test can't be
# determined on purpose.
SELECT x.a2.b1, (SELECT x), SUM(y)
FROM TableStruct
GROUP BY ALL
--
ARRAY<STRUCT<b1 STRUCT<c1 INT64, c2 INT64>,
             STRUCT<a1 INT64,
                         a2 STRUCT<
                                b1 STRUCT<c1 INT64, c2 INT64>,
                                b2 INT64
                              >>,
             INT64>>
[unknown order:
  {{1, 1}, {1, {{1, 1}, 1}}, 3},
  {{3, 3}, {3, {{3, 3}, 3}}, 3},
  {{4, 4}, {4, {{4, 4}, 4}}, 4}
]
==

# Regression test for b/310705631
[required_features=GROUP_BY_ARRAY,GROUP_BY_ALL]
[name=group_by_all_implicit_unnest_table_array_path_regression_test]
WITH Table5 AS (SELECT [1, 2, 3] AS arr_col)
SELECT
  ( SELECT e FROM t5.arr_col AS e ORDER BY e LIMIT 1 ) AS scalar_subq_col,
  t5.arr_col
FROM Table5 AS t5
GROUP BY ALL
--
ARRAY<STRUCT<
        scalar_subq_col INT64,
        arr_col ARRAY<>
      >>
[{
   1,
   ARRAY<INT64>[known order:1, 2, 3]
 }]
==

# Regression test for b/323439034
[name=group_by_all_no_agg_no_grouping_keys_regression_test]
SELECT 'a' AS x
FROM (
  SELECT 1 AS id
  UNION ALL
  SELECT 2 AS id
)
GROUP BY ALL
--
ARRAY<STRUCT<x STRING>>[{"a"}]
==

# Regression test for b/323567303
[name=group_by_all_no_agg_no_grouping_keys_having_regression_test]
SELECT 'a' AS x
FROM (
  SELECT 1 AS id
  UNION ALL
  SELECT 2 AS id
)
GROUP BY ALL
HAVING TRUE
--
ARRAY<STRUCT<x STRING>>[{"a"}]
==

