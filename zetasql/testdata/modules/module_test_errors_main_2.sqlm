-- This module is mostly the same as 'module_test_errors_main', except that
-- it does not try to import non-existing modules (either from this module
-- or from imported modules).  This module file was added specifically for
-- a test case in module_factory_test.cc that tests for toleration of syntax
-- errors when fetching module contents, in both top level and nested module
-- imports.

MODULE module_test_errors_main;

-- no errors
IMPORT MODULE zetasql.testdata.modules.module_test_errors_imported_a;

-- parse error
IMPORT MODULE zetasql.testdata.modules.module_test_errors_imported_b;

-- init errors
IMPORT MODULE zetasql.testdata.modules.module_test_errors_imported_c;

-- resolution errors
IMPORT MODULE zetasql.testdata.modules.module_test_errors_imported_d;

-- evaluation errors
IMPORT MODULE zetasql.testdata.modules.module_test_errors_imported_f;

-- Catalog initialization error - SELECT statements are invalid inside modules.
SELECT * FROM some_table;

----------------- UDFs
-- Valid UDF
CREATE PUBLIC FUNCTION udf(a INT64) AS (a);

-- UDF initialization error (not PRIVATE and not PUBLIC)
CREATE FUNCTION udf_init_error(a INT64) AS (a);

-- UDF resolution error
-- Note that this will not show up with ModuleCatalog::AppendModuleErrors()
-- if the function is not resolved.
CREATE PUBLIC FUNCTION udf_resolution_error(a INT64) AS (a + "a");

----------------- Templated UDFs
-- Valid templated UDF
CREATE PUBLIC FUNCTION templated_udf(a ANY TYPE) AS (a);

-- Templated UDF initialization error
CREATE TEMP FUNCTION templated_udf_init_error(a ANY TYPE) AS (a);

-- Templated UDF resolution error
CREATE PUBLIC FUNCTION templated_udf_resolution_error(a ANY TYPE) AS (a + "a");

----------------- UDAs
-- Valid UDA
CREATE PUBLIC AGGREGATE FUNCTION uda(a INT64) AS (SUM(a));

-- UDA initialization error
CREATE FUNCTION uda_init_error(a INT64) AS (SUM(a));

-- UDA resolution error
CREATE PUBLIC AGGREGATE FUNCTION uda_resolution_error(a INT64)
AS (SUM(a) + "b");

----------------- Templated UDAs
-- Valid templated UDA
CREATE PUBLIC AGGREGATE FUNCTION templated_uda(a ANY TYPE) AS (SUM(a));

-- Templated UDA initialization error
CREATE FUNCTION templated_uda_init_error(a ANY TYPE) AS (SUM(a));

-- Templated UDA resolution error
CREATE PUBLIC AGGREGATE FUNCTION templated_uda_resolution_error(a ANY TYPE)
AS (SUM(a) + "b");

----------------- TVFs
-- Valid TVF
CREATE PUBLIC TABLE FUNCTION tvf(a INT64) AS (SELECT a);

-- TVF initialization error
CREATE TABLE FUNCTION tvf_init_error(a INT64) AS (SELECT a);

-- TVF resolution error
CREATE PUBLIC TABLE FUNCTION tvf_resolution_error(a INT64) AS (SELECT a + "c");

----------------- Templated TVFs
-- Valid templated TVF
CREATE PUBLIC TABLE FUNCTION templated_tvf(a ANY TYPE) AS (SELECT a);

-- Templated TVF initialization error
CREATE TABLE FUNCTION templated_tvf_init_error(a ANY TYPE) AS (SELECT a);

-- Templated TVF resolution error
CREATE PUBLIC TABLE FUNCTION templated_tvf_resolution_error(a ANY TYPE)
AS (SELECT a + "c");

----------------- Constants
-- Valid constant
CREATE PUBLIC CONSTANT constant = "constant";

-- Constant initialization error (not PRIVATE and not PUBLIC)
CREATE CONSTANT constant_init_error = "constant_init_error";

-- Constant resolution error
CREATE PUBLIC CONSTANT constant_resolution_error =
    1 + "constant_resolution_error";

-- Constant evaluation error
-- Used with a mock ConstantEvaluator that returns an error for this expression.
-- Note that this will not show up with ModuleCatalog::AppendModuleErrors()
-- if the constant is not evaluated.
CREATE PUBLIC CONSTANT constant_evaluation_error = 1 / 0;

----------------- Parse error
CREATE PRIVATE FUNCTINO udf_parse_error(a INT64) AS (a);

-- Other (valid) statement that is currently ignored due to the parse error.
CREATE PUBLIC FUNCTION good_function_after_parse_error(a INT64) AS (a);
