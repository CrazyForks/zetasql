//
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Testing for various flavors of recursive proto definitions.
//
// Types of recursion in this file:
//
//   * DirectRecursionPB -> DirectRecursionPB
//
//   * RecursiveOuterPB -> RecursiveMiddlePB -> RecursiveInnerPB
//     -> RecursiveOuterPB
//
//   * TestRecursivePB -> Nested -> TestRecursivePB
//   + TestRecursivePB -> Nested -> Nested2 -> Nested -> TestRecursivePB
//   + TestRecursivePB -> Nested -> Nested2 -> Nested

syntax = "proto2";

package zetasql_test__;

message TestRecursivePB {
  required int64 test_id = 1;
  required int64 index_id = 2;
  optional int32 stats_shard = 13;
  optional int32 value = 3 [default = 77];
  optional string name = 4 [default = "default_name"];
  optional float float_val = 10;
  repeated int32 repeated_int = 12;

  message Nested {
    optional int64 nested_id = 1 [default = 88];
    repeated int64 nested_repeated_id = 2;
    optional TestRecursivePB recursive = 3;
    optional Nested2 other_recursive = 4;
  }
  optional Nested nested_value = 5;
  repeated Nested nested_repeated_value = 6;

  message Nested2 {
    required int64 nested_id = 1;
    optional Nested recursive = 2;
  }
  optional Nested2 nested_value2 = 9;

  optional int64 optional_id = 11;

  optional int32 date = 15;
  optional int64 timestamp_millis = 16;
  optional int64 timestamp_micros = 17;

  optional float float_value = 18;
  optional double double_value = 19;
}

message RecursiveOuterPB {
  repeated RecursiveMiddlePB middle = 1;
}

message RecursiveMiddlePB {
  optional RecursiveInnerPB inner = 1;
}

message RecursiveInnerPB {
  required RecursiveOuterPB outer = 1;
}

message DirectRecursionPB {
  required DirectRecursionPB recursive = 1;
}
