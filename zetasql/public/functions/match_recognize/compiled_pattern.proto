//
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// LINT: LEGACY_NAMES
syntax = "proto2";

package zetasql.functions.match_recognize;

import "zetasql/resolved_ast/resolved_ast_enums.proto";

message StateMachineProto {
  // Proto representation of CompiledNFA. See compiled_nfa.h for details.
  message CompiledNFAProto {
    message EdgeProto {
      // State number the edge goes to.
      optional int32 to_state = 3;

      // Pattern variable id that must be satisfied by the row consumed by the
      // edge, or empty if the edge does not consume a row.
      optional int32 pattern_variable = 4;

      optional bool is_head_anchored = 5;
      optional bool is_tail_anchored = 6;
    }

    message StateProto {
      // All edges from this state, sorted by prececence.
      repeated EdgeProto edges = 1;
    }

    // All states in the graph, indexed by state number.
    repeated StateProto states = 1;

    // State representing the beginning of a match.
    optional int32 start_state = 2;

    // State representing the end of a match.
    optional int32 final_state = 3;

    // Number of pattern variables the engine is expected to provide during
    // matching.
    optional int32 num_pattern_variables = 4;
  }
  optional CompiledNFAProto nfa = 1;
  optional ResolvedMatchRecognizeScanEnums.AfterMatchSkipMode
      after_match_skip_mode = 2;
  optional bool longest_match_mode = 3;
}

// Proto representation of a CompiledPattern.
message CompiledPatternProto {
  oneof variant {
    // Set if the state machine algorithm is used.
    StateMachineProto state_machine = 1;
  }
}
