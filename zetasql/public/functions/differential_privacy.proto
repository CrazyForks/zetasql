//
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto2";

package zetasql.functions;

import "zetasql/proto/anon_output_with_report.proto";
import "zetasql/public/type.proto";

option java_package = "com.google.zetasql.functions";
option java_outer_classname = "ZetaSQLDifferentialPrivacy";

message DifferentialPrivacyEnums {
  // Enum that defines the output format of differential privacy functions that
  // return report. See:
  //   Detailed report description: (broken link).
  //   Updated report syntax:  (broken link).
  enum ReportFormat {
    option (opaque_enum_type_options).sql_opaque_enum_name =
        "DIFFERENTIAL_PRIVACY_REPORT_FORMAT";

    // Invalid in ZetaSQL.
    DIFFERENTIAL_PRIVACY_REPORT_FORMAT_INVALID = 0
        [(opaque_enum_value_options).invalid_enum_value = true];

    // Report output format is JSON.
    JSON = 1;

    // Report output format is proto.
    PROTO = 2;
  }

  // Enum representing the group selection strategy that can be passed by the
  // user in the anonymization options.  LAPLACE_THRESHOLD is the default group
  // selection strategy.
  //
  // See (broken link).
  enum GroupSelectionStrategy {
    option (opaque_enum_type_options).sql_opaque_enum_name =
        "DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY";

    DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY_INVALID = 0
        [(opaque_enum_value_options).invalid_enum_value = true];

    LAPLACE_THRESHOLD = 1;
    PUBLIC_GROUPS = 2;
  }

  // Enum that represents the contribution_bounding strategy for differentially
  // private count distinct. For details, see
  // (broken link).
  enum CountDistinctContributionBoundingStrategy {
    option (opaque_enum_type_options).sql_opaque_enum_name =
        "DIFFERENTIAL_PRIVACY_COUNT_DISTINCT_CONTRIBUTION_BOUNDING_STRATEGY";

    DIFFERENTIAL_PRIVACY_COUNT_DISTINCT_CONTRIBUTION_BOUNDING_STRATEGY_INVALID =
        0 [(opaque_enum_value_options).invalid_enum_value = true];

    AUTO = 1;
    SAMPLING = 2;
    GREEDY = 3;
    MATCHING = 4;
  }
}

// Contains output from a ZetaSQL differential privacy function.
message DifferentialPrivacyOutputWithReport {
  oneof result {
    DifferentialPrivacyOutputValue value = 1;
    DifferentialPrivacyOutputValues values = 2;
  }

  oneof report {
    DifferentialPrivacyBoundingReport bounding_report = 3;
    DifferentiallyPrivateCountDistinctBoundingReport
        count_distinct_bounding_report = 4;
  }
}

// When ApproxBounds is called by bounded algorithms, the BoundingReport can
// be used to pass differentially private intermediate results to help users
// understand the accuracy implications of the output.
message DifferentialPrivacyBoundingReport {
  // Lower and upper bounds are either the explicit bounds specified in the
  // query, or are the (noisy) implicit bounds that were derived by the
  // ApproxBounds algorithm.
  optional DifferentialPrivacyOutputValue lower_bound = 1;
  optional DifferentialPrivacyOutputValue upper_bound = 2;
  // `num_inputs` and `num_outside` in the BoundingReport are *noisy*
  // counts, not exact.
  // Noisy number of total inputs to the bounding algorithm.
  optional double num_inputs = 3;
  // Noisy number of inputs lying outside the bounds.
  optional double num_outside = 4;
}

message DifferentiallyPrivateCountDistinctBoundingReport {
  // The contribution strategy that was used to bound the contribution of each
  // user. If the contribution bounding strategy is set to `SAMPLING`, `GREEDY`
  // or `MATCHING` in the input, then this field will be set to the same value.
  // If the contribution bounding strategy is set to `AUTO`, then this field
  // will be set to the contribution bounding strategy that was chosen by the
  // algorithm.
  optional DifferentialPrivacyEnums.CountDistinctContributionBoundingStrategy
      contribution_bounding_strategy = 1;
  // The upper bound is either explicitly specified in the query, or is the
  // implicit (noisy) bound derived by the algorithm. There is no lower bound,
  // because it is always zero. In that regard, note that there is no good way
  // to clamp a user to have more distinct values than they have.
  optional int64 upper_bound = 2;

  // The noisy number of inputs to the bounding algorithm. This is the same as
  // the noisy number of privacy units that contributed to the given
  // partition/group.
  optional double num_inputs = 3;

  // There is no `num_outside` field, because it is unclear how to define it,
  // because some of the bounding algorithms operate aross users.
}

message DifferentialPrivacyOutputValues {
  repeated DifferentialPrivacyOutputValue values = 1;
}

message DifferentialPrivacyOutputValue {
  oneof value {
    int64 int_value = 1;
    double float_value = 2;
    string string_value = 3;
  }

  optional NoiseConfidenceInterval noise_confidence_interval = 4;
}
