//
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto2";

package zetasql;

option java_multiple_files = true;

// All possible options that can be overridden for UDF server modules.
// Next id: 5
message PerModuleOptions {
  // The default mode for how to find the appropriate UDF server, if a specific
  // udf_server_address isn't provided.
  enum UdfServerImportMode {
    // Mode unspecified.
    UNKNOWN = 0;
    // The UDF server is from the udf_server_address set in the module's
    // OPTIONS. This is the default mode.
    SERVER_ADDRESS_FROM_MODULE = 1;
    // The UDF servers will be provided or selected based on setup of the system
    // launching queries. For example, it may be running UDF servers including
    // in some MPM release, or servers built from source code by the user.
    CALLER_PROVIDED = 2;
    // There is no default source for this UDF server. An explicit
    // udf_server_address must be provided.
    MANUAL = 3;
  }
  // The address of the UDF server that the serves functions in the ZetaSQL
  // module. This takes precedence over the default set in
  // udf_server_import_mode if not empty.
  optional string udf_server_address = 1;
  // The namespace of the UDFs when they are registered.
  optional string udf_namespace = 4;
  // The default import mode of the UDF server.
  optional UdfServerImportMode udf_server_import_mode = 2
      [default = SERVER_ADDRESS_FROM_MODULE];
  // A hint of ratio between the number of UDF servers to the number of F1
  // workers.
  optional double udf_scaling_factor = 3;
}

// This proto is passed to ModuleFactory to control how to find and configure
// UDF servers for UDF server stub modules.
//
// Modules with OPTIONS(stub_module_type='udf_server_catalog') represent the
// functions provided by a particular UDF server. The module OPTIONS can suggest
// a default server to connect to.
//
// These options allow telling the ModuleFactory whether to use that default to
// select servers, or to choose servers another way. The proto allows setting a
// default for all modules, and overriding for specific modules.
// Next id: 3
message ModuleOptions {
  // This option sets the default for all modules, which can be overridden by
  // `per_module_options`.
  optional PerModuleOptions global_options = 1;

  // Module options for specific modules, keyed by the full module name (the
  // dotted path). Fields set here override the corresponding fields from
  // `global_options` for that module.
  map<string, PerModuleOptions> per_module_options = 2;
}
